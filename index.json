[{"categories":[],"content":"2022 test ","date":"2022-02-22","objectID":"/test/:0:0","tags":[],"title":"Test","uri":"/test/"},{"categories":null,"content":"切记丝毫懈怠！！！  ","date":"2022-02-10","objectID":"/about/:1:0","tags":null,"title":"About","uri":"/about/"},{"categories":["mac"],"content":"1.准备工作 需要两个U盘，一个windows的装机盘(我使用了微pe)，一个用来安装macos系统 去黑果小兵下载所需的镜像文件 下载苹果镜像工具etcher 下载对应的efi文件，可以在github上搜你的主板和cpu型号 将下载好的镜像烧录到用于安装macos系统的u盘中 ","date":"2021-05-16","objectID":"/%E9%BB%91%E8%8B%B9%E6%9E%9C_win-%E5%8F%8C%E7%B3%BB%E7%BB%9F-%E5%8D%95%E7%A1%AC%E7%9B%98%E5%AE%89%E8%A3%85/:0:1","tags":["mac","黑苹果"],"title":"黑苹果_win 双系统 单硬盘安装","uri":"/%E9%BB%91%E8%8B%B9%E6%9E%9C_win-%E5%8F%8C%E7%B3%BB%E7%BB%9F-%E5%8D%95%E7%A1%AC%E7%9B%98%E5%AE%89%E8%A3%85/"},{"categories":["mac"],"content":"2.黑苹果BIOS设置(微星B460m) settings\\高级\\唤醒时间管理\\BIOS settings\\高级\\内建显示器\\集成显卡多显示器\\允许 settings\\高级\\PCIe/PCi子系统设置/Above 4G memory…/允许 settings\\高级\\USB设置\\XHCI Hand-off\\ 允许 settings\\高级\\USB设置\\传统USB支持\\ 允许 settings\\高级\\BIOS CSM/UEFI Mode\\ UEFI OC\\cpu特征\\intel虚拟化技术\\允许 OC\\cpu特征\\intel VT-D技术\\禁止 OC\\cpu特征\\CFG锁定\\禁止 ","date":"2021-05-16","objectID":"/%E9%BB%91%E8%8B%B9%E6%9E%9C_win-%E5%8F%8C%E7%B3%BB%E7%BB%9F-%E5%8D%95%E7%A1%AC%E7%9B%98%E5%AE%89%E8%A3%85/:0:2","tags":["mac","黑苹果"],"title":"黑苹果_win 双系统 单硬盘安装","uri":"/%E9%BB%91%E8%8B%B9%E6%9E%9C_win-%E5%8F%8C%E7%B3%BB%E7%BB%9F-%E5%8D%95%E7%A1%AC%E7%9B%98%E5%AE%89%E8%A3%85/"},{"categories":["mac"],"content":"3.分区 F11(微星B460m)进入bios，选择u盘启动 通过微pe里的DiskGenius进行分区，如果事先已经安装win系统，也可以自行在win下通过该工具进行分区 选中要安装系统的硬盘，将硬盘分区表类型转为GUID模式(如果原来有系统了，只需新建一个分区，格式为Mac OS X（HFS+)patition，并且保证有esp分区，并且分区表类型为GUID模式）) 选中硬盘，建立新分区，这时会跳出来建立ESP，MS分区，我们只要勾选ESP就好了，大小默认300M 在空闲的位置点击建立新分区，文件系统类型要选择Mac OS X（HFS+)patition，空间大小随你决定 在空余的位置点击建立新分区，文件系统选择NTFS 如图所示(网图) ","date":"2021-05-16","objectID":"/%E9%BB%91%E8%8B%B9%E6%9E%9C_win-%E5%8F%8C%E7%B3%BB%E7%BB%9F-%E5%8D%95%E7%A1%AC%E7%9B%98%E5%AE%89%E8%A3%85/:0:3","tags":["mac","黑苹果"],"title":"黑苹果_win 双系统 单硬盘安装","uri":"/%E9%BB%91%E8%8B%B9%E6%9E%9C_win-%E5%8F%8C%E7%B3%BB%E7%BB%9F-%E5%8D%95%E7%A1%AC%E7%9B%98%E5%AE%89%E8%A3%85/"},{"categories":["mac"],"content":"4.安装系统 windows系统安装 F11(微星B460m)进入bios，选择u盘启动 进入pe安装windows系统在之前新建的NTFS分区中 等 mac系统安装 删除macos系统盘中的EFI文件夹，替换为下载好的efi文件 F11选择macos系统盘启动 选择Boot macOS install from macOS Big Sur 选择磁盘工具，将之前的macos分区抹掉，名称为xx(随便你)小写然后选择APFS格式 开始安装系统(ps:重启期间一定要按F11，继续选择Boot macOS install from xxx,不然可能会安装失败) 重启几次，安装完成之后会看到Boot macOS from xx,选择这个进入配置 安装成功 ","date":"2021-05-16","objectID":"/%E9%BB%91%E8%8B%B9%E6%9E%9C_win-%E5%8F%8C%E7%B3%BB%E7%BB%9F-%E5%8D%95%E7%A1%AC%E7%9B%98%E5%AE%89%E8%A3%85/:0:4","tags":["mac","黑苹果"],"title":"黑苹果_win 双系统 单硬盘安装","uri":"/%E9%BB%91%E8%8B%B9%E6%9E%9C_win-%E5%8F%8C%E7%B3%BB%E7%BB%9F-%E5%8D%95%E7%A1%AC%E7%9B%98%E5%AE%89%E8%A3%85/"},{"categories":["mac"],"content":"5.添加引导 使用DiskGenius对win的数据盘右键，比如本地磁盘D，调整分区大小，分区前部空间200M-300M。开始 选择本地磁盘D前的空余分区，右键建立新分区，选择FAT32格式，保存 删除ESP分区下EFI的所有文件 将opencore/EFI下的文件拖动到刚刚的ESP分区下的EFI文件夹 使用windows引导修复工具，选择引导磁盘为我们刚刚添加的分区E盘，系统盘为C盘，选中修复UEFI引导，开始修复。 重启电脑 ","date":"2021-05-16","objectID":"/%E9%BB%91%E8%8B%B9%E6%9E%9C_win-%E5%8F%8C%E7%B3%BB%E7%BB%9F-%E5%8D%95%E7%A1%AC%E7%9B%98%E5%AE%89%E8%A3%85/:0:5","tags":["mac","黑苹果"],"title":"黑苹果_win 双系统 单硬盘安装","uri":"/%E9%BB%91%E8%8B%B9%E6%9E%9C_win-%E5%8F%8C%E7%B3%BB%E7%BB%9F-%E5%8D%95%E7%A1%AC%E7%9B%98%E5%AE%89%E8%A3%85/"},{"categories":["mac"],"content":"6.参考文献 https://github.com/maemual/MSI-B460M-10700-5500XT 分区引导：https://www.bilibili.com/video/BV1nz4y1Q7p6/ Windows环境下UEFI引导修复工具：https://pan.baidu.com/s/10tG7Y-naPAUOkOZ9cs_blQ 提取件码：pcyu 磁盘分区工具DiskGenius: https://pan.baidu.com/s/1GTwzo4v3O6T9P9Ku36IgRg 提取码: av96 ","date":"2021-05-16","objectID":"/%E9%BB%91%E8%8B%B9%E6%9E%9C_win-%E5%8F%8C%E7%B3%BB%E7%BB%9F-%E5%8D%95%E7%A1%AC%E7%9B%98%E5%AE%89%E8%A3%85/:0:6","tags":["mac","黑苹果"],"title":"黑苹果_win 双系统 单硬盘安装","uri":"/%E9%BB%91%E8%8B%B9%E6%9E%9C_win-%E5%8F%8C%E7%B3%BB%E7%BB%9F-%E5%8D%95%E7%A1%AC%E7%9B%98%E5%AE%89%E8%A3%85/"},{"categories":["逆向"],"content":" 记录一下小程序源文件包的获取过程 ","date":"2021-04-18","objectID":"/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91/:0:0","tags":["逆向"],"title":"小程序反编译","uri":"/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91/"},{"categories":["逆向"],"content":"1.所需环境 re文件管理器 反编译脚本wxappUnpacker或微信小程序反编译自动化工具 node.js 安装 ","date":"2021-04-18","objectID":"/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91/:1:0","tags":["逆向"],"title":"小程序反编译","uri":"/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91/"},{"categories":["逆向"],"content":"2.找到小程序的源文件包 /data/data/com.tencent.mm/MicroMsg/{{一串32位的16进制字符串文件夹}}/appbrand/pkg/ 文件夹 会有很多.wxapkg类型的文件，都是微信小程序的包 ","date":"2021-04-18","objectID":"/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91/:2:0","tags":["逆向"],"title":"小程序反编译","uri":"/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91/"},{"categories":["逆向"],"content":"3.反编译 node .\\wuWxapkg.js D:\\_-xxxxxxxx_xx.wxapkg 如果出现某些module未安装可以用npm install xxx安装 如果遇到 __vd_version_info__ is not defined,修改wuWxss.js文件（亲测无效，建议直接使用上文的exe文件） 源文件： function runVM(name,code){ let wxAppCode={},handle={cssFile:name}; let vm=new VM({sandbox:Object.assign(new GwxCfg(),{__wxAppCode__:wxAppCode,setCssToHead:cssRebuild.bind(handle)})}); vm.run(code); for(let name in wxAppCode)if(name.endsWith(\".wxss\")){ handle.cssFile=path.resolve(frameName,\"..\",name); wxAppCode[name](); } } 改为： function runVM(name,code){ let wxAppCode={},handle={cssFile:name}; let gg = new GwxCfg(); let tsandbox ={$gwx:GwxCfg.prototype[\"$gwx\"],__mainPageFrameReady__:GwxCfg.prototype[\"$gwx\"],__wxAppCode__:wxAppCode,setCssToHead:cssRebuild.bind(handle)}; let vm = new VM({sandbox:tsandbox}); vm.run(code); for(let name in wxAppCode)if(name.endsWith(\".wxss\")){ handle.cssFile=path.resolve(frameName,\"..\",name); wxAppCode[name](); } } ","date":"2021-04-18","objectID":"/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91/:3:0","tags":["逆向"],"title":"小程序反编译","uri":"/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91/"},{"categories":["逆向"],"content":"4.调试 打开微信开发者工具，本地调试 关闭ES6转ES5配置 不校验域名和证书 ","date":"2021-04-18","objectID":"/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91/:3:1","tags":["逆向"],"title":"小程序反编译","uri":"/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91/"},{"categories":["mac"],"content":"1.包安装 pip3 install virtualenv pip3 install virtualenvwrapper ","date":"2020-02-09","objectID":"/mac%E8%AE%BE%E7%BD%AEpython%E7%8E%AF%E5%A2%83/:1:0","tags":["mac","python"],"title":"Mac设置python环境","uri":"/mac%E8%AE%BE%E7%BD%AEpython%E7%8E%AF%E5%A2%83/"},{"categories":["mac"],"content":"2.创建目录存放虚拟环境 mkdir ~/.virtualenvs ","date":"2020-02-09","objectID":"/mac%E8%AE%BE%E7%BD%AEpython%E7%8E%AF%E5%A2%83/:2:0","tags":["mac","python"],"title":"Mac设置python环境","uri":"/mac%E8%AE%BE%E7%BD%AEpython%E7%8E%AF%E5%A2%83/"},{"categories":["mac"],"content":"3.修改zsh 通过which virtualenv和which virtualenvwrapper判断位置，在zsh末尾添加 # Setting PATH for Python 3 installed by brew export PATH=/usr/local/share/python:$PATH # Configuration for virtualenv export WORKON_HOME=$HOME/.virtualenvs export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3 export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv source /usr/local/bin/virtualenvwrapper.sh ","date":"2020-02-09","objectID":"/mac%E8%AE%BE%E7%BD%AEpython%E7%8E%AF%E5%A2%83/:3:0","tags":["mac","python"],"title":"Mac设置python环境","uri":"/mac%E8%AE%BE%E7%BD%AEpython%E7%8E%AF%E5%A2%83/"},{"categories":["mac"],"content":"4.基本命令 mkvirtualenv -p python3.9 web_py3.9 //创建环境 deactivate //退出环境 workon //列出环境 workon web_py3.9 //激活 ","date":"2020-02-09","objectID":"/mac%E8%AE%BE%E7%BD%AEpython%E7%8E%AF%E5%A2%83/:4:0","tags":["mac","python"],"title":"Mac设置python环境","uri":"/mac%E8%AE%BE%E7%BD%AEpython%E7%8E%AF%E5%A2%83/"},{"categories":["前端"],"content":"一、自定义组件的步骤 需要在json文件中进行自定义组件声明(将component字段设置为true)可以将这组文件设置为自定义组件 在wxml中编写属于我们组件自己的模板 在wxss中编写相关组件的样式 在js文件中，可以定义数据或组件内部的相关逻辑 注：WXML节点标签名只能是 小写字母、中划线、下划线组合。所以自定义组件标签名只能是这些。不能以”wx-“为前缀。在app.json的usingComponents声明某个组件，就是全局注册，那么所有页面和组件都可以直接使用该组件 ","date":"2020-02-06","objectID":"/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/:0:1","tags":["前端","小程序"],"title":"小程序自定义组件","uri":"/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/"},{"categories":["前端"],"content":"二、自定义组件的样式细节 自定义组件的样式不会干扰引用组件的page的样式 组件内不能使用id选择器、属性选择器、标签选择器 外部使用class的样式只对外部wxml的class生效，对组件不生效 外部使用了id选择器、属性选择器不会对组件内产生影响 外部使用了标签选择器，会对组件内产生影响 组件内的class和组件外的class是有隔离的，官方不推荐使用属性、id、标签选择器 ","date":"2020-02-06","objectID":"/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/:0:2","tags":["前端","小程序"],"title":"小程序自定义组件","uri":"/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/"},{"categories":["前端"],"content":"三、向组件传递数据和样式 1.给组件传递数据： 在组件的js文件中使用properties属性，有两种定义方式，一种是变量名后面加类型；一种是变量名里面详细参数 在组件中通过{{title}}进行接收，在使用组件的地方通过变量名进行传值。 2.给组件传递样式： 在组件的js文件中使用externalClasses属性，在组件内的wxml中使用externalClass属性中的class，在页面中传入对应的class，并且给这个class设置样式 ","date":"2020-02-06","objectID":"/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/:0:3","tags":["前端","小程序"],"title":"小程序自定义组件","uri":"/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/"},{"categories":["前端"],"content":"四、组件向外传递事件 1.在组件中绑定事件 2.在组件的js中将监听事件发射出去 3.page中接收到事件，执行对应的方法 4.在page的js中定义相关的处理方法 页面直接调用组件方法(this.selectComponent) ","date":"2020-02-06","objectID":"/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/:0:4","tags":["前端","小程序"],"title":"小程序自定义组件","uri":"/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/"},{"categories":["前端"],"content":"五、Component构造器 properties：定义传入的属性 properties:{ title:String, content:{ type:String, value:\"\" } } data：定义内部属性 data:{ currentIndex:0, info:{ name:\"haha\", age:18 } } methods：定义方法 methods:{ onBtnClick(){ this.setData({ \"info.name\":\"kobe\" }) } } options：额外配置选项 options:{ styleIsolation:\"shared\", multipleSlots:true } externalClasses：引用外部样式 externnalClasses:['title'], observers：属性和数据监听 observers:{ title:function(newVal){ console.log(newVal) } } pageLifetimes：页面生命周期 pageLifetimes:{ show(){ console.log(\"页面显示出来\") } ... } lefetimes：组件生命周期 lifeimes:{ created(){ console.log(\"组件被创建\") } ... } ","date":"2020-02-06","objectID":"/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/:0:5","tags":["前端","小程序"],"title":"小程序自定义组件","uri":"/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/"},{"categories":["前端"],"content":"一、简介： flex布局又叫弹性布局，只要将最外层的块级元素display设置为flex，就创建了flex布局。可以把他看成一个盒子，盒子里面有很多子项。设置了flex布局的最外层元素被称为flex container，作为容器存在，里面的子项被称为flex items。container和item分别有不同的属性可以设置。 几个基础概念： （图片来自网络） 主轴：main axis（从main-start到main-end）子元素默认排布 交叉轴：cross axis(从cross-start到cross-end) main size：单个项目占据主轴长度大小 cross size：子元素在交叉轴方向上代销 ","date":"2020-02-01","objectID":"/flex%E5%B8%83%E5%B1%80%E7%AC%94%E8%AE%B0/:1:0","tags":["html","css"],"title":"flex布局笔记","uri":"/flex%E5%B8%83%E5%B1%80%E7%AC%94%E8%AE%B0/"},{"categories":["前端"],"content":"二、container的属性 2.1 flex-direction：绝对主轴方向，控制子项的整体布局方向 row：主轴从左到右 row-reverse：主轴从右到左 column：主轴从上到下 column-reverse：主轴从下到上 2.2 justify-content：主轴的对齐方式，控制子项的对齐方式 flex-start:与main start对齐(默认值) flex-end：与main end对齐 center：居中对齐 space-between：item之间距离相等，main start 和main end 两端对齐(两端靠边) space-evenly：item之间和两端距离相等 space-around：item之间距离相等，main start 和main end之间的距离是 items之间距离的一半。 2.3 align-items：item在cross axis上的对齐方式 normal：与stretch一致，item在cross axis方向的size为auto时，会自动拉伸至填充container(意思就是item没有设置高度，会自动填充至container高度) flex-start:与cross start对齐(顶部对齐) flex-end：与cross end对齐(底部对齐) center：居中对齐 baseline：与基准线对齐 2.4 flex-wrap:控制子项整体单行显示还是换行显示 nowarp：默认nowarp，一行放不下时会压缩。 warp：宽度不足换行显示 wrap-reverse：宽度不足换行显示，但是从下往上开始 2.5 align-content：align-content可以看成和justify-content是相似且对立的属性，justify-content指明水平方向flex子项的对齐和分布方式，而align-content则是指明垂直方向每一行flex元素的对齐和分布方式。如果所有flex子项只有一行，则align-content属性是没有任何效果的。 stretch：默认值，与align-items的stretch类似 flex-start：与cross start 对齐，顶部堆砌 flex-end：与cross end 对齐 center：居中对齐 space-between：顶底两端对齐，items之间距离相等 space-around：顶底两端是items距离之间的一半，items之间的距离相等 space-evenly：全部等距。 ","date":"2020-02-01","objectID":"/flex%E5%B8%83%E5%B1%80%E7%AC%94%E8%AE%B0/:2:0","tags":["html","css"],"title":"flex布局笔记","uri":"/flex%E5%B8%83%E5%B1%80%E7%AC%94%E8%AE%B0/"},{"categories":["前端"],"content":"三、flex-items属性 3.1 order： 可以设置任意整数,值越小越排在前面，默认值是0 3.2 align-self: 可以覆盖flex container设置的align-items。参数与align-items一致 3.3 flex-grow： 决定flex items 如何扩展。当flex container 在main axis还有剩余size时，可用。可以设置任意非负数字，默认为0。 所有flex-grow总和超过1，每个item扩展的size为 剩余size*flex-grow/sum 所有flex-grow总和不超过1，每个item扩展的size为 `剩余size*flex-grow 注：flex items扩展后端饿size不能超过width\\height 3.4 flex-shrinnk： 不支持负值，默认值是1，也就是默认所有的flex子项都会收缩。如果设置为0，则表示不收缩，保持原始的fit-content宽度。 如果只有一个flex子项设置了flex-shrink： flex-shrink值小于1，则收缩的尺寸不完全，会有一部分内容溢出flex容器。 flex-shrink值大于等于1，则收缩完全，正好填满flex容器。 如果多个flex子项设置了flex-shrink： flex-shrink值的总和小于1，则收缩的尺寸不完全，每个元素收缩尺寸占“完全收缩的尺寸”的比例就是设置的flex-shrink的值。 flex-shrink值的总和大于1，则收缩完全，每个元素收缩尺寸的比例和flex-shrink值的比例一样。 3.5 flex-basis： 用来设置item的宽度。 决定items宽度的优先级(从高到低)： max-width\\min-width \u003e flex-basis \u003e width \u003e内容的size 参考：https://www.zhangxinxu.com/wordpress/2018/10/display-flex-css3-css/ ","date":"2020-02-01","objectID":"/flex%E5%B8%83%E5%B1%80%E7%AC%94%E8%AE%B0/:3:0","tags":["html","css"],"title":"flex布局笔记","uri":"/flex%E5%B8%83%E5%B1%80%E7%AC%94%E8%AE%B0/"},{"categories":["前端"],"content":" 微信客户端作为小程序的宿主环境，为了能够执行小程序的各种文件(wxml文件、wxss文件、js文件)，提供了双线程模型。 双线程模型： WXML模块和WXSS样式运行与渲染层，渲染层使用WebVIew线程渲染(一个程序有多个页面，会使用多个WebView的线程) JS脚本运行于逻辑层，逻辑层使用jsCore运行JS脚本。 这两个线程都会经由微信客户端(Native)进行中转交互。 界面渲染过程： WXML先转换为js对象，再渲染成DOM树。每当小程序视图有数据需要更新时，逻辑层会调用小程序宿主环境提供的setData方法将数据从逻辑层传递到视图层，经过一系列渲染之后完成UI视图的更新。 小程序逻辑层调用宿主环境的setData方法。 逻辑层执行JSON.stringify将待传输数据转换成字符串并拼接到特定的js脚本，并通过evaluateJavaScript执行脚本将数据传输到渲染层 渲染层接收到后，WebView JS线程会对脚本进行编译，得到待更新数据后进入渲染队列等待WebView线程空闲时进行页面渲染。 WebView 线程开始执行渲染时，待更新数据会合并到视图层保留原始data数据，并将新数据套用在WXML片段中得到新的虚拟节点数。经过新虚拟节点树与当前节点树的diff对比，将差异部分更新到UI视图。同时，将新的节点树替换旧节点树，用于下一次重渲染。 ","date":"2020-01-27","objectID":"/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%8F%8C%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/:0:0","tags":["前端","小程序"],"title":"小程序的双线程模型","uri":"/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%8F%8C%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/"},{"categories":["docker"],"content":"简介： Docker镜像含有启动容器所需要的文件系统及其内容。 采用分层构建机制，最底层为bootfs,其之为rootfs bootfs: 用于系统引导的文件系统，包括bootloader和kernel，容器启动完成后会被卸载以节约内存资源； rootfs: 位于bootfs之上，表现为docker容器的根文件系统； 1.传统模式中，系统启动时，内核挂载rootfs会首先将其挂载为“只读”模式，完整性自检完成后将其重新挂载为读写模式； 2.docker中rootfs由内核挂载为“只读”模式，然后通过“联合挂载”技术额外挂载一个“可写”层 位于下层的镜像称为父镜像，最底层的为基础镜像；最上层为“可读写层”，其下的均为“只读”层 为什么docker镜像要采用分层结构? 好处就是共享资源 多个镜像都是从相同的base镜像构建而来,宿主机只需要在磁盘上保存一份base镜像,同时内存中也只需要加载一份base镜像,就可以为所有容器服务了.而且镜像的每一层都可以被共享 Registry： 启动容器时，docker daemon会先从本地获取相关的镜像，本地镜像不存在会将其从Registry中下载该镜像，并保存到本地。 ","date":"2019-12-17","objectID":"/docker%E5%9F%BA%E7%A1%80/:0:1","tags":["docker"],"title":"docker基础","uri":"/docker%E5%9F%BA%E7%A1%80/"},{"categories":["docker"],"content":"一、基于容器制作镜像(docker commit) // 首先拉取一个镜像并启动容器 docker run --name b1 -it busybox // 在容器上做一些修改 mkdir -p /data/html // 随便输入一些html网页信息 vi /data/html/index.html // 另启动一个终端，加-p是为了让启动的容器先暂停 docker commit 镜像id zfj/busybox:1.1 // docker commit 命令 // docker commit -a=\"作者\" -m=\"描述信息\" -p对外端口:docker对外端口 容器id 要创建的目标镜像名:[标签名] // 这个时候就可以在本地看到多了一个docker镜像了 ","date":"2019-12-17","objectID":"/docker%E5%9F%BA%E7%A1%80/:0:2","tags":["docker"],"title":"docker基础","uri":"/docker%E5%9F%BA%E7%A1%80/"},{"categories":["docker"],"content":"二、容器命令补充: 1.查看容器日志 docker logs 容器id -t:加入时间 -f追加打印 2.docker run命令 -p 对外端口:docker内部端口 -P 随机端口 -d 后台运行 3.查看容器内部细节 docker inspect 容器id 4.进入容器 docker exec -it 容器id bash/shell docker attach 容器id直接进入容器启动终端,不会启动新进程 通过exec进入的容器 使用exit不会退出.因为exec会启动一个新的bash 5.复制docker内部的数据到宿主机 docker cp 容器id:源路径 目标路径 ","date":"2019-12-17","objectID":"/docker%E5%9F%BA%E7%A1%80/:0:3","tags":["docker"],"title":"docker基础","uri":"/docker%E5%9F%BA%E7%A1%80/"},{"categories":["docker"],"content":"三、docker容器数据卷 Docker容器产生的数据，如果不通过docker commit生成新的镜像，使得数据做为镜像的一部分保存下来，那么当容器删除后，数据自然也就没有了。为了能保存数据在docker中我们使用卷。 卷不属于联合文件系统,因此可以持续存储或共享数据,设计的目的就是为了数据的持久化,完全独立于容器的生命周期,因此docker不会在容器删除时删除其挂载的数据卷 特点: 数据卷可在容器之间共享或重用数据 卷中的更改可以直接生效 卷中的更改不会包含在镜像的更新中 数据卷的生命周期一直持续到没有容器使用它为止. 1.容器内添加数据卷: 命令添加: docker run -it -v /宿主机的绝对路径目录:/容器内目录 镜像名(-v 含有新建的功能) 在容器或者宿主机上新建文件,对方都能看到,说明实现了数据共享 docker run -it -v /宿主机的绝对路径目录:/容器内目录:ro 镜像名(ro=read only)容器只允许查看,不允许修改 dockerfile添加(通过VOLUME来添加数据卷): mkdir /mydocker # vim Dockerfile FROM centos VOLUME [\"/dataVolumeContainer1\",\"/dataVolumeContainer2\"] CMD echo \"finished,------success\" CMD /bin/bash ``` \u003e build dockerfile文件 \u003e `docker build -f /mydocker/Dockerfile -t zfj/centos . ` (-f 路径 -t标签) ##### 2.数据卷容器 \u003e 命名的容器挂载数据卷，其它容器通过挂载这个(父容器)实现数据共享，挂载数据卷的容器，称之为数据卷容器 \u003e `docker run -it --name test01 zfj/centos` \u003e `docker run -it --name test02 --volumes-from test02 zfj/centos` \u003e 使用`--volumes-from`从父容器继承(继承后,父子容器资源共享) \u003e 再添加容器`test03 继承 test01` 删除`test01`发现 容器还是共享的 \u003e 结论:容器之间配置信息的传递,数据卷的生命周期一直持续到没有容器使用它为止. ### 四、Dockerfile ##### 1.简介: \u003e Dockerfile是用来构建docker镜像的构建文件,是由一系列命令和参数构成的脚本 构建三步骤: * 编写Dockerfile文件 * `docker build` * `docker run` ##### 2.Dockerfile语法: * 每条保留字指令必须**大写字母**,而且后面**至少跟随一个**参数 * 指令从上到下,顺序执行 * #表示注释 * 每条指令都会创建一个新的镜像层,并对镜像进行提交 ##### 3.Dockerfile的执行流程: 1. docker从基础镜像运行一个容器 2. 执行一条指令对容器做出修改 3. 执行类似docker commit的操作提交一个新的镜像层 4. docker再基于上一次提交的镜像运行一个新容器 5. 执行Dockerfile中的下一条指令直到所有指令都执行完成. ##### 4.docker保留字指令 * `FROM`:基础镜像,当前镜像是继承哪个镜像的 * `MAINTAINER`:镜像维护者的姓名和邮箱 * `RUN`:容器构建时需要运行的命令 * `EXPOSE`:暴露对外的端口 * `WORKDIR`:指定创建容器后,终端默认登录的工作目录,落脚点 * `ENV`:构建镜像过程中设置环境变量 * `ADD`:将宿主机目录下的文件拷贝到镜像,ADD会自动处理URL和解压tar压缩包 * `COPY`:类似ADD命令 但只有拷贝功能. `COPY src dest` 或者`COPY [\"src\",\"dest\"]` * `VOLUME`:容器数据卷,用于数据保存和持久化工作 * `CMD` 指定一个容器启动时要执行的命令,但是只有**最后一个生效**,CMD会被`docker run` 之后的参数替换 * `ENTRYPOINT`:与CMD类似,但是`docker run` 之后的参数是追加 * `ONBUILD`:当构建一个被继承的Dockerfile时运行命令,父镜像在被子继承后,父的onbuild被触发 Base镜像(scratch):Docker Hub 中99% 的镜像都是通过在base镜像中安装配置需要的软件构建出来的 案例: 自定义centos镜像(修改WORKDIR，安装vim，和net-tool) 1. 新建Dockerfile文件`touch Dockerfile1` 2. 编写Dockerfile文件 ````shell FROM centos ENV mypath /tmp WORKDIR $mypath RUN yum -y install vim RUN yum -y install net-tools EXPOSE 80 CMD /bin/bash ``` 3.构建 `docker build -f /mydocker/Dockerfile1 -t mycentos:1.3 .`(-t 新镜像名 -f dockerfile路径) 4.运行新镜像产生的容器 `rocker run -it mycentos:1.3` 5.列出镜像历史:`docker history 镜像名` ","date":"2019-12-17","objectID":"/docker%E5%9F%BA%E7%A1%80/:0:4","tags":["docker"],"title":"docker基础","uri":"/docker%E5%9F%BA%E7%A1%80/"},{"categories":["Linux"],"content":"一、linux目录处理命名 1.建立目录 mkdir -p [目录名] -p 递归创建(在下级目录不存在时可以创建) 2.切换目录 cd [目录] cd - 回到上次目录 cd ..回到上级目录 3.显示当前所在位置 pwd 4.删除目录 rmdir [目录名] 只能删除空白目录 rm -rf [文件或目录] -r 删除目录；-f强制 5.复制命名 cp [选项] [原文件或目录] [目标目录] -r 复制目录；-p连带文件属性；-d若原文件是链接文件，复制链接属性； -a相当于-pdr(与源文件一模一样) 6.剪切或改名 mv [原文件或目录] [目标目录] 不需要加 -r 原文件和目标文件在同一个目录下就是改名命令 ","date":"2019-11-25","objectID":"/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:0:1","tags":["Linux"],"title":"Linux常用命令","uri":"/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["Linux"],"content":"二、常见目录 /根目录 /bin 系统命令保存目录(普通用户就可以读取的命令) /sbin(root用户) /boot 启动目录，启动相关文件 /dev 设备文件保存目录 /etc 配置文件保存目录 /home 普通用户的家目录 /lib 系统库保存目录 /mnt 系统挂载目录(一般用这个) /media 挂载目录 /root 超级用户家目录 /tmp 临时目录 /proc 直接写入内存 /sys 直接写入内存 /usr 系统软件支援目录 /var 系统相关文档内容 ","date":"2019-11-25","objectID":"/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:0:2","tags":["Linux"],"title":"Linux常用命令","uri":"/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["Linux"],"content":"三、链接命令 1.ln命令 ln -s [原文件] [目标文件] 生成链接文件 -s 创建软链接 类似windows的快捷方式 软链接有自己的I节点和Block块，但是只有文件的文件名和I节点号，没有实际的文件数据 lrwxrwxrwx l软链接 文件权限都为这个 修改任意文件，另一个都会改变 删除原文件，软链接不能使用 ","date":"2019-11-25","objectID":"/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:0:3","tags":["Linux"],"title":"Linux常用命令","uri":"/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["Linux"],"content":"四、文件搜索命令 1. 文件搜索命名locate locate 文件名 在后台数据库中按文件名进行搜索，速度更快 /var/lib/mlocate 数据库所在位置 updatedb 新建立的文件可能没在数据库中，可以更新数据库 2. 命令搜索命令whereis与which whereis 命令名 搜索命令所在路径及帮助文档所在位置 -b 只查找可执行文件 -m 只查找帮助文件 which 的区别在于 可以看到别名 3. 文件搜索find(完全匹配) find [搜索范围] [搜索条件] find / -name test.log find是系统中搜索符合条件的文件名。如果需要匹配，使用通配符，通配符是完全匹配 find /root -iname test.log 不区分大小写 find /root -user root 按照所有者搜索 find /root -nouser 查找没有所有者的文件 find /log/ -mtime +10 atime文件访问时间;ctime改变文件属性，mtime修改文件内容 -10 十天内 10 十天当天 +10 10天前修改 find . -size 25k 根据文件大小查找(k小写,M大写) find . -size +20k -a -size -50k -a==and;-o==or find . -size -20k -exec ls -lh {} \\; 在搜索出来的结果后面接第二条语句，能处理第一个结果的才行 示例：find . -size -20k -exec rm -rf {} \\ 删除找到的文件 4.搜索字符串命令grep(包含匹配) grep [选项] 字符串 文件名：在文件当中匹配符合条件的字符串 -i 忽略大小写； -v 排除指定字符串(取反) ","date":"2019-11-25","objectID":"/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:0:4","tags":["Linux"],"title":"Linux常用命令","uri":"/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["Linux"],"content":"五、帮助命令 man 命令 获取指定命令的帮助 man -f 命令 相当于whatis 命令 man -k 命令 相当于apropos 包含有关键字的命令 命令 --help 获取命令选项的帮助 info 命令 详细文档 ","date":"2019-11-25","objectID":"/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:0:5","tags":["Linux"],"title":"Linux常用命令","uri":"/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["Linux"],"content":"六、压缩命令 1.zip格式文件 zip 压缩文件名 源文件名 压缩文件 zip -r 压缩文件名 源目录 压缩目录 unzip 压缩文件 解压缩.zip文件 2.gz格式文件 gzip 源文件 压缩为.gz格式的压缩文件，源文件消失 gzip -c 源文件 \u003e 压缩文件 压缩为.gz格式，保留源文件 gzip -r 目录 压缩目录下所有子文件，但不能压缩目录 3.bz2格式文件 bzip2 源文件 压缩为.bz2格式，不保留源文件 bzip2 -k 源文件压缩后保留源文件 注：不能压缩目录 4.tar.gz格式 打包命令tar tar -cvf 打包文件名 源文件 示例:tar -cvf test.tar test -c:打包;-v:显示过程;-f:指定打包后的文件名 其实.tar.gz格式是先打包为.tar格式，再压缩为.gz格式 tar -zcvf 压缩包名.tar.gz 源文件 -z:压缩为.tar.gz格式 tar -zxvf 压缩包名.tar.gz 解压缩 -x:解压缩.tar.gz格式 5.tar.bz2格式 tar -jcvf 压缩包名.tar.bz2 源文件 -z 压缩为.tar.bz2格式 tar -jxvf 压缩包名.tar.bz2 -x:解压缩.tar.bz2格式 ","date":"2019-11-25","objectID":"/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:0:6","tags":["Linux"],"title":"Linux常用命令","uri":"/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["Linux"],"content":"六、关机与重启 shutdown [选项] 时间 会正确保存状态 -c:取消前一个关机命令;-h:关机;-r:重启 其他关机命令(不推荐使用)： halt poweroff init 0 其他重启命令： reboot init 6(尽量不用) 补充：系统运行级别 0:关机 1:单用户(类似Windows中的安全模式) 2:不完全多用户，不含NFS服务 3:完全多用户 4:未分配 5:图像界面 6.重启 ","date":"2019-11-25","objectID":"/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:0:7","tags":["Linux"],"title":"Linux常用命令","uri":"/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["Linux"],"content":"七、挂载命令 1.查询与自动挂载 mount 查询系统中已经挂载的设备 mount -a 根据配置文件/etc/fstab的内容，自动挂载 2.挂载命令格式 mount \\[-t 文件系统] [-o 特殊选项] 设备文件名 挂载点 -t 文件系统:加入文件系统类型来指定挂载的类型，可以ext3、ext4、iso9660等文件系统 -o 特殊选项:可以指定挂载的额外选项 3.挂载光盘 mkdir /mnt/cdrom/ 建立挂载点 mount /dev/sr0 /mnt/cdrom/ 挂载光盘 4.卸载命令 umount 设备文件名或挂载点 umount /mnt/cdrom 5.挂载u盘 fdisk -l 查看设备文件名 mount -t vfat /dev/sdb1 /mnt/usb/ Linux默认不支持NTFS文件系统 ","date":"2019-11-25","objectID":"/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:0:8","tags":["Linux"],"title":"Linux常用命令","uri":"/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["Linux"],"content":"八、登录查看命令 w 查看登录用户信息 who 只能查看用户名 登录终端 登录时间(登录来源ip地址) last 查看当前登录 和以前登录用户的信息。 ","date":"2019-11-25","objectID":"/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:0:9","tags":["Linux"],"title":"Linux常用命令","uri":"/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["python"],"content":" 背景：目前表中只有5G(后期持续增长)，但是其中一个字段(以下称为detail字段)存了2M(不一定2M，部分为0，平均下来就是2M)，字段中存的是一个数组，数组中存N个json数据。这个字段如下： [{\"A\": \"A\", \"B\": \"B\", \"C\": \"C\", \"D\": \"D\"}...] 要是拆表的话，可能要拆好多个，要是存多行根据阿里巴巴《Java 开发手册》提出单表行数超过 500 万行，也不是很建议。希望有大佬能指教一下。 回到正题，一开始是分两个表存储，一个表存基本信息(A表)，一个表(B表)存关联字段，及detail字段。貌似没有啥用，按需求现要将两张表合在一起供BI去处理。直接复制了那张基础字段的A表，通过遍历B表根据关联字段进行更新。但是在select的时候内存读入的数据太大直接卡死(狗头)。于是在网上查找如何通过pymysql处理大数据的问题。解决方案如下： ","date":"2019-11-20","objectID":"/pymysql-%E8%AF%BB%E5%8F%96%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%86%85%E5%AD%98%E5%8D%A1%E6%AD%BB%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/:0:0","tags":["MySql","python"],"title":"pymysql 读取大数据内存卡死的解决方案","uri":"/pymysql-%E8%AF%BB%E5%8F%96%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%86%85%E5%AD%98%E5%8D%A1%E6%AD%BB%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"categories":["python"],"content":"1.通过limit分批次读取数据进行操作： import pymysql up_db = pymysql.connections.Connection(host=MYSQL_HOST, port=MYSQL_PORT, user=MYSQL_USER, password=MYSQL_PASSWORD, db=MYSQL_DB, charset='utf8mb4',) count = 0 while True: # if count == 2: # break select_sql = \"select sec_report_id,detail from sec_report_original_data_detail limit %s,2\"%(count) up_cursor = up_db.cursor() up_cursor.execute(select_sql) result = up_cursor.fetchall() for data in result: sec_report_id = data[0] detail = data[1] update_sql = \"update `sec_report_original_data_intact` set detail = '%s' where `sec_report_id` = '%s' \" % ( db.escape_string(detail), sec_report_id) print(update_sql) res = up_cursor.execute(update_sql) if res: print(res) up_db.commit() print(f'{sec_report_id}插入成功') count+=2 可以解决问题，不过只是拿了几条做测试(我用的是第二种)，这里没写终止条件，有朋友要用的话自己加上。 ","date":"2019-11-20","objectID":"/pymysql-%E8%AF%BB%E5%8F%96%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%86%85%E5%AD%98%E5%8D%A1%E6%AD%BB%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/:0:1","tags":["MySql","python"],"title":"pymysql 读取大数据内存卡死的解决方案","uri":"/pymysql-%E8%AF%BB%E5%8F%96%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%86%85%E5%AD%98%E5%8D%A1%E6%AD%BB%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"categories":["python"],"content":"2.通过pymysql的SSCursor没有缓存的游标 pymysql.cursors.SSCursor代替默认的cursor会从数据库中一条一条的读取记录，从而不会造成内存卡死，但是也有需要注意的地方： 这个游标对象只能读完所有行之后才能处理其他sql。如果你需要并行执行sql，需要重新生成一个连接 必须一次性读完所有行，每次读取后处理数据要快，不能超过60s，否则mysql将会断开这次连接(没有遇到这个问题，遇到的可以讨论一下) import pymysql db = pymysql.connections.Connection(host=MYSQL_HOST, port=MYSQL_PORT, user=MYSQL_USER, password=MYSQL_PASSWORD, db=MYSQL_DB, charset='utf8mb4', cursorclass=pymysql.cursors.SSDictCursor) up_db = pymysql.connections.Connection(host=MYSQL_HOST, port=MYSQL_PORT, user=MYSQL_USER, password=MYSQL_PASSWORD, db=MYSQL_DB, charset='utf8mb4',) up_cursor = up_db.cursor() cursor = pymysql.cursors.SSCursor(db) select_sql = \"select sec_report_id,detail from sec_report_original_data_detail\" cursor.execute(select_sql) result = cursor.fetchone() try: while result is not None: sec_report_id = result[0] detail = result[1] update_sql = \"update `sec_report_original_data_intact` set detail = '%s' where `sec_report_id` = '%s'\"%(db.escape_string(detail),sec_report_id) res = up_cursor.execute(update_sql) if res: print(res) up_db.commit() print(f'{sec_report_id}插入成功') result = cursor.fetchone() except Exception as e: print(e) finally: up_cursor.close() cursor.close() db.close() 解决了一次性读取大数据的方法，但是没找到特别好的存储那个detail字段中数据的办法，有朋友了解的可以沟通一下。 ","date":"2019-11-20","objectID":"/pymysql-%E8%AF%BB%E5%8F%96%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%86%85%E5%AD%98%E5%8D%A1%E6%AD%BB%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/:0:2","tags":["MySql","python"],"title":"pymysql 读取大数据内存卡死的解决方案","uri":"/pymysql-%E8%AF%BB%E5%8F%96%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%86%85%E5%AD%98%E5%8D%A1%E6%AD%BB%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"categories":["docker"],"content":"一、安装docker # SET UP THE REPOSITORY # 配置 Docker 的官方软件源（并默认使用稳定版，其它版本请参考官方文档） sudo yum -y install device-mapper-persistent-data lvm2 yum-utils yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo # INSTALL DOCKER ENGINE - COMMUNITY # 安装 Docker CE - 社区版 sudo yum -y install docker-ce docker-ce-cli containerd.io # 将当前用户加入 Docker 用户组 # 加入 Docker 用户组的用户，在执行 Docker 相关命令时，不再需要键入 sudo 以提权 sudo usermod -aG docker ${USER} # Start Docker - 启动 Docker sudo systemctl start docker # 设置 Docker CE 开机自启（可选） sudo systemctl enable docker # 安装 Dokcer Compose 编排工具(如果没有安装的话) sudo yum -y install epel-release sudo yum -y install python-pip sudo pip install docker-compose MacOS可以通过brew安装brew cask install docker ","date":"2019-11-12","objectID":"/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/:1:0","tags":["docker"],"title":"docker简单使用","uri":"/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"},{"categories":["docker"],"content":"二、配置镜像加速器 sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json \u003c\u003c-'EOF' { \"registry-mirrors\": [ \"https://dockerhub.azk8s.cn\", \"https://reg-mirror.qiniu.com\" ] } EOF sudo systemctl daemon-reload sudo systemctl restart docker ","date":"2019-11-12","objectID":"/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/:2:0","tags":["docker"],"title":"docker简单使用","uri":"/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"},{"categories":["docker"],"content":"三、下载使用镜像 1.搭建一个web服务器，拉取一个centos镜像 docker run -p 80 --name web -i -t centos /bin/bash Docker 通过 run 命令来启动一个新容器。Docker 首先在本机中寻找该镜像，如果没有安装，Docker 在 Docker Hub 上查找该镜像并下载安装到本机，最后 Docker 创建一个新的容器并启动该程序。 当第二次执行docker run时，因为Docker在本机中已经安装该镜像，所以 Docker 会直接创建一个新的容器并启动该程序。 注:docker run 每次使用都会创建一个新的容器，因此，我们以后再次启动这个容器时，只需要使用命令 docker start 即可。这里， docker start 的作用在用重新启动已存在的镜像，而docker run 包含将镜像放入容器中 docker create ，然后将容器启动 docker start Docker 容器重启后会沿用 docker run 命令指定的参数来运行，所以还是在后台运行的。可以通过docker attach命令切换到运行交互式容器 2.安装nginx服务器 执行rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm 再执行yum install -y nginx 启动nginxnginx 如果出现无法安装的情况试试systemctl restart docker 可以执行ctrl+P+Q切换到后台,通过docker ps -a查看随机分配的端口，通过浏览器访问即可。 ","date":"2019-11-12","objectID":"/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/:3:0","tags":["docker"],"title":"docker简单使用","uri":"/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"},{"categories":["docker"],"content":"四、构建镜像 1.创建Dokcerfile文件 Dockerfile是Docker用来构建镜像的文本文件，包含自定义的指令和格式, 可以通过docker build命令从Dockerfile中构建镜像。 mkdir dockerfile_test cd dockerfile_test/ touch Dockerfile nano Dockerfile 编写Dockerfile文件 FROM centos:7 MAINTAINER test \"test@gmail.com\" RUN rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm RUN yum install -y nginx EXPOSE 80 2.构建镜像 # docker build -t registry.cn-hangzhou.aliyuncs.com/\u003c命名空间\u003e/\u003c应用镜像名\u003e:\u003c镜像版本\u003e . docker build -t=\"test/docker_demo:v1\" . # 这个时候查看本地已经有镜像了 docker images 3.将镜像推送到远程仓库 # 登录到阿里云控制台 https://cr.console.aliyun.com/cn-hangzhou/instances/repositories # 创建命名空间 https://cr.console.aliyun.com/cn-hangzhou/instances/namespaces # 获取访问凭证 https://cr.console.aliyun.com/cn-hangzhou/instances/credentials # 登录阿里云的镜像仓库 docker login --username=\u003c阿里云登录账号\u003e registry.cn-hangzhou.aliyuncs.com # 推送镜像 docker push registry.cn-hangzhou.aliyuncs.com/\u003c命名空间\u003e/\u003c应用镜像名\u003e:\u003c镜像版本\u003e ","date":"2019-11-12","objectID":"/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/:4:0","tags":["docker"],"title":"docker简单使用","uri":"/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"},{"categories":["docker"],"content":"五、停止、删除docker容器和镜像 学习的时候经常下载很多镜像搞的环境有点多，可以试试下面的命令整理环境 # 列出所有的容器ID docker ps -aq # 停止所有的容器 docker stop $(docker ps -aq) # 删除所有的容器 docker rm $(docker ps -aq) # 删除所有的镜像 docker rmi $(docker images -q) 参考： https://juejin.im/post/5cacbfd7e51d456e8833390c#heading-12 https://yeasy.gitbooks.io/docker_practice/content/ ","date":"2019-11-12","objectID":"/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/:5:0","tags":["docker"],"title":"docker简单使用","uri":"/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"},{"categories":["前端"],"content":"一、简介 webpack:JavaScript应用的静态模块打包工具 grunt/gulp（其它打包工具） grunt/gulp的核心是配置一系列的task，定义task要处理的事务（es6、ts转换，图片压缩，scss转css） 让grunt/gulp执行这些task，让整个流程自动化 grunt/gulp也被称为前端自动化任务管理工具。 当工程模块依赖非常简单是可以通过grunt/gulp进行简单的合并、压缩。 gurnt/gulp重点在于前端流程的自动化，webpack强调的是模块化开发管理，文件压缩合并只是附加功能。 ","date":"2019-10-23","objectID":"/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:0","tags":["webpack"],"title":"webpack学习笔记","uri":"/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["前端"],"content":"二、简单使用 安装webpack 首先安装好node环境， npm install webpack@3.6.0 -g 安装低版本方便学习webpack 1.CommonJS的打包方式 // mathUtils.js function add(num1, num2) { return num1 + num2; } function mul(num1, num2) { return num1 * num2; } module.exports = { add, mul, } //main.js const {add,mul} require('mathUtils.js') console.log(add(1, 2)) console.log(mul(1, 2)) 通过webpack进行打包,执行下面的命令 webpack main.js bundle.js \u003cbody\u003e \u003c/body\u003e \u003cscript src=\"./dist/bundle.js\"\u003e\u003c/script\u003e \u003c/html\u003e 2.ES6的打包方式 //info.js export const name = 'outFile'; export const age = 18; export const height = 1.88; const { add, mul } = require('.mathUtils.js') console.log(add(1, 2)) console.log(mul(1, 2)) import { name, age, height } from '.info' console.log(name, age) console.log(height) 重新执行打包命令 ","date":"2019-10-23","objectID":"/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:2:0","tags":["webpack"],"title":"webpack学习笔记","uri":"/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["前端"],"content":"三、webpack配置 1.简单配置 在项目目录下新建一个webpack.config.js文件 const path = require('path') module.export = { //输入，入口 entry: '/src/main.js', //输出 output: { // 需要动态获取 path: './dist/', filename: 'bundle.js' }, } 注：path需要动态获取，不能写死也不能写相对路径，这个时候就需要用的node的path了 依赖node的环境，需要先进行初始化npm init,会生成一个package.json的文件（npm包管理）。如果有依赖需要再执行npm install，最后再执行webpack 2.与npm build做映射 修改package.json { \"name\": \"meetwebpack\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"index.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\", //添加命令，优先从本地查找命令，如果是终端运行是先从全局查找 \"build\": \"webpack\" }, \"author\": \"\", \"license\": \"ISC\" } 要保证局部的webpack版本与使用的一致，安装webpack时一般npm install webpack@3.6.0 --save-dev，表示开发时依赖，项目打包后不再继续使用。 ","date":"2019-10-23","objectID":"/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:3:0","tags":["webpack"],"title":"webpack学习笔记","uri":"/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["前端"],"content":"四、loader 当我们将css样式也当做模块化开发时，就不能像以前一样再通过一个个链接引用了，而应该使用模块化的思想，新建一个样式，并在入口js中引用，通过webpack进行打包，首先查看目录。 1.简单使用 /* normal.css */ body{ background-color: red } ... //main.js中引用 require('./css/normal.css') 通过webpack进行打包 提示You may need an appropriate loader to handle this file type报错信息。 我们需要将ES6转换为ES5的代码，typescript转成ES5，或者是将scss、less转成css等等，就需要给webpack扩展对应的loader。 首先需要通过npm安装需要使用的loader，然后在webpack.config.js中的modules关键字下进行配置 webpack中文网 1.安装对应的loader npm install --save-dev css-loader 2.在webpack.config.js中配置 const path = require('path') module.exports = { entry: './src/main.js', output: { // 需要动态获取 path: path.resolve(__dirname, 'dist'), filename: 'bundle1.js' }, module:{ rules: [ { test: /\\.css$/, use: 'css-loader' }, ] } } 注:css-loader只负责文件加载,所以还需要安装style-loader将样式添加到dom中，执行命令npm install --save-dev style-loader 在规则中继续配置 ... module: { rules: [ // 使用多个loader时，从右往左 { test: /\\.css$/, use: ['style-loader', 'css-loader'] }, ] } 要是需要使用less，可以参考webpack官网，配置less-lader 2.在css中添加图片 body{ background: url(\"../img/2.jpg\") } 直接通过webpack打包发现，需要安装loader，于是我们先安装url-loader 配置webpack_config.js: module.exports = { module: { rules: [ { test: /\\.(png|jpg|gif)$/, use: [ { loader: 'url-loader', options: { //当图片小于limit时，会将图片编译成base64字符串形式。 //当图片大于limit时，需要使用file-loader模块进行加载，通过npm安装 limit: 8192 } } ] } ] } } 再次打包，访问网页会发现图片没有加载，发现dist文件夹下慧多一个图片， 需要在webpackconfig.js中的output中配置publicPath: 'dist/'，这个代表在路径前加入dist/ 图片的命名规则为32位hash值，目的是防止名字重复。但是实际开发中需要使用原来的名字，还要防止重复。所以我们可以在option中添加以下参数 img：文件要打包到的文件夹 name：获取图片原来的名字，放在该位置 hash:8：为了防止图片名称冲突，依然使用hash，但是我们只保留8位 ext：使用图片原来的扩展名 { loader: 'url-loader', options: { limit: 6000, // 变量名要使用中括号,hash取八位 name: 'img/[name].[hash:8].[ext]' }, } 3.ES6转ES5(babel) 安装： npm install --save-dev babel-loader@7 babel-core babel-preset-es2015 // webpackconfig.js配置规则 { test: /\\.js$/, exclude: /(node_modules|bower_components)/, use: { loader: 'babel-loader', options: { presets: ['es2015'] } } } ","date":"2019-10-23","objectID":"/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:4:0","tags":["webpack"],"title":"webpack学习笔记","uri":"/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["前端"],"content":"五、webpack配置Vue 1.简单使用 安装vue： npm install vue --save 装好之后在 main.js中引入，index.html中使用 //main.js ... import Vue from 'vue' const app = new Vue({ el: '#app', data: { message: 'webpack' } }) \u003cbody\u003e \u003cdiv id=\"app\"\u003e \u003ch2\u003e{{message}}\u003c/h2\u003e \u003c/div\u003e \u003c/body\u003e 编译运行,控制台报错，报错信息显示使用的runtime-only版本的vue runtime-only 代码中不可以有任何的template runtime-compiler可以有template，因为compiler可以编译template 修改webpack的配置信息。 module:{...}, resolve: { //alias别名,指定使用哪个版本的vue alias: { 'vue$': 'vue/dist/vue.esm.js' } } 2.el和template的区别 1.同时有el和template时，会将el替换成template的内容。 //main.js new Vue({ el: '#app', // 同时有el有template会自动替换vue挂载的地方 template: `\u003cdiv\u003e \u003ch2\u003e{{message}}\u003c/h2\u003e \u003cbutton\u003e按钮\u003c/button\u003e \u003c/div\u003e` , data: { message: 'webpack' } }) ","date":"2019-10-23","objectID":"/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:5:0","tags":["webpack"],"title":"webpack学习笔记","uri":"/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["前端"],"content":"六、plugin webpack现有功能的扩展，比如打包优化，文件压缩等等。 与loader的区别： loader主要用于转换类型，是一个转换器 plugin是扩展器。 使用步骤与loader类似，通过npm安装，再在webpack.config.js中配置即可。 1.版权声明插件 const webpack = require('webpack') module.exports = { ... plugins:[ new webpack.BannerPlugin('最终版权归xx所有') ] } 重新打包即可看到信息。 2.打包html的plugin 自动生成index.html文件(可以指定模板来生成)，将打包的js文件，通过script插入到body中 npm install html-webpack-plugin --save-dev //webpack.config.js const HtmlWebpackPlugin = require('html-webpack-plugin') //plugins中添加 plugin:[ new HtmlWebpackPlugin({ template:'index.html' //根据index.html模板生成index.html文件 }) ] 注：这个时候需要注释之前的publicPath:'dist/' 3.js压缩 npm insall uglifyjs-webpack-plugin --save-dev //webpack.config.js cost uglifyjsPlugin = require('uglifyJsPlugin-webpack-plugin') plugins:[ new uglifyJsPlugin() ] ","date":"2019-10-23","objectID":"/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:6:0","tags":["webpack"],"title":"webpack学习笔记","uri":"/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["python"],"content":"前景描述: 需要获取某APP的全国订单量，及抢单量。由于没有全国的选项所以只能分别对每一个城市进行订单的遍历。爬虫每天运行一次，一次获取48小时内的订单，从数据库中取出昨天的数据进行对比，有订单被抢则更新，无则不操作。(更新逻辑在这里不重要，重要的是爬取逻辑)。每个订单有发布时间，根据发布时间判断，在48小时外的就停止爬取，开始爬取下一个城市。 先看第一版: #spider # 构造一些请求参数，此处省略 # 从配置中读取所有城市列表 cities = self.settings['CITY_CH'] # end_signal为某个城市爬取完毕的信号， self.end_signal = False for city in cities: # 通过for循环对每个城市进行订单爬取 post_data.update({'locationName':city}) count = 1 while not self.end_signas: post_data.update({'pageNum':str(count)}) data = ''.join(json.dumps(post_data, ensure_ascii=False).split()) sign = MD5Util.hex_digest(api_key + data + salt).upper() params = { 'apiKey':api_key, 'data':data, 'system':system, 'sign':sign } meta = {'page':count} yield scrapy.Request(url=url, method='POST', body=json.dumps(params, ensure_ascii=False), headers=self.headers, callback=self.parse,meta=meta, dont_filter=True) count+=1 self.end_signal = False def parse(self,response): # 略 # 在spiderMiddleware中根据返回的item中的订单时间进行判断(此处不详写) def process_spider_output(self, response, result, spider): result_bkp = [] for res in result: if res['order_time'] \u003c before_date(2): #before_date为自定义的时间函数 logger.info(\"{%s}爬取完毕，开始爬取下一个城市\" % (res['city_name'])) spider.end_signal = True break result_bkp.append(res.copy()) return result_bkp 乍一看没有问题，遍历每个城市，再到解析 解析完后返回item到spiderMiddleware中进行判断订单是否超过48小时，超过就设置self.end_signal为True跳出spider中的while循环，注意while循环后面又将这个参数设置False然后下个城市的循环就开始了。 问题来了： spider中将request返回出去添加到队列中，这里有一个队列，当response下载好返回回来通过parse函数去处理的时候也有一个队列，众所周知运气不好的人总会偶尔遇到一点网络问题，来举个栗子就清楚了 栗子：spider中将城市A的1、2、3订单页(2、3为超过48小时的订单页)，添加到队列中，下载器去下载的时候可能第2页代理挂了，第三页超过48小时，中间件判断成功设置self.end_signal=True进行下一个城市的爬取。城市B添加了1、2、3(都在48小时内)，这个时候城市A的第二页订单下载完成了在中间件中判断又将self.end_signal=True ，于是城市B后面的订单也就都没了，都没了。。。，直接开始了下一个城市的订单！ 一版总结: 不要在一个异步的程序中通过一个全局变量去控制整个程序的流程。(总结的不好，可以帮我总结一下) 第二版: 既然不能通过全局变量来控制，那能不能让每个城市带一个标识来指明订单爬取结束。 先看代码 #spider cities = self.settings['CITY_CH'] # end_signal为某个城市爬取完毕的信号， self.end_signal = False for city in cities: # 通过for循环对每个城市进行订单爬取 post_data.update({'locationName':city}) count = 1 print(cities) print(city) while in cities: post_data.update({'pageNum':str(count)}) data = ''.join(json.dumps(post_data, ensure_ascii=False).split()) sign = MD5Util.hex_digest(api_key + data + salt).upper() params = { 'apiKey':api_key, 'data':data, 'system':system, 'sign':sign } meta = {'page':count} yield scrapy.Request(url=url, method='POST', body=json.dumps(params, ensure_ascii=False), headers=self.headers, callback=self.parse,meta=meta, dont_filter=True) count+=1 self.end_signal = False def parse(self,response): # 略 # 在spiderMiddleware中根据返回的item中的订单时间进行判断(此处不详写) def process_spider_output(self, response, result, spider): result_bkp = [] for res in result: if res['order_time'] \u003c before_date(2): #before_date为自定义的时间函数 if res['city_name'] in spider.cities: spider.cities.remove(res['city_name']) logger.info(\"{%s}爬取完毕，开始爬取下一个城市\" % (res['city_name'])) break result_bkp.append(res.copy()) return result_bkp 看逻辑也有点意思，判断这个城市是否在列表中，在的话说明还没爬取完毕，爬取完毕了就删除这个城市。嗯！运行一下！ 有意思的来了，第一个城市爬取正常，第二个城市不见了,上诉代码中打印的城市没有显示第二个城市，直接跳到了最后一个(设就三个城市) 怎么被吞了呢。 敏感数据就不截图了。 可以看到 打印的城市列表中明明还有北京的没有被删除，为啥直接到最后一个城市了呢？ 可能有大佬已经看出来了，我是生生打断点调试了半天，甚至怀疑是for循环内部有什么bug。 最后灵机一动(滑稽)，难倒是因为城市列表的问题？我for循环它，然后又在他内部去删除它里面的元素，可以这样吗？ 写个demo测试一下 cities = ['鞍山', '北京', '昆玉',] for city in cities: cities.remove('鞍山') print(city) # 错误就来了！ 果然不能在循环它的时候再对它进行删除操作 ValueError: list.remove(x): x not in list 至于在运行scrapy的时候为什么没有报这个错误，可能是在别的地方做了异常处理，但是有这个问题在，我们先去修复它一下。 将for city in cities改为for city in cities.copy(),完美解决！！！ 还有一个小点就是python的值传递和地址传递，在处理item的时候要注意。 ","date":"2019-09-12","objectID":"/%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8scrapy%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:0:0","tags":["爬虫","python"],"title":"一次使用scrapy的问题记录","uri":"/%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8scrapy%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":["python"],"content":"表数据： from django.db import models class Province(models.Model): name = models.CharField(max_length=10) def __str__(self): return self.name class City(models.Model): name = models.CharField(max_length=5) province = models.ForeignKey(Province) def __str__(self): return self.name class Person(models.Model): firstname = models.CharField(max_length=10) lastname = models.CharField(max_length=10) visitation = models.ManyToManyField(City, related_name = \"visitor\") hometown = models.ForeignKey(City, related_name = \"birth\") living = models.ForeignKey(City, related_name = \"citizen\") def __str__(self): return self.firstname + self.lastname ","date":"2019-09-07","objectID":"/django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/:0:0","tags":["python","django"],"title":"Django-查询优化","uri":"/django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"},{"categories":["python"],"content":"一、select_related 对于一对一字段（OneToOneField）和外键字段（ForeignKey），可以使用select_related 来对QuerySet进行优化 在对QuerySet使用select_related()函数后，Django会获取相应外键对应的对象，从而在之后需要的时候不必再查询数据库了。 ","date":"2019-09-07","objectID":"/django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/:1:0","tags":["python","django"],"title":"Django-查询优化","uri":"/django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"},{"categories":["python"],"content":"简单查询： citys = City.objects.all() for c in citys: print (c.province) 执行上面的语句会导致SQL多次查询 SQL SELECT `QSOptimize_city`.`id`, `QSOptimize_city`.`name`, `QSOptimize_city`.`province_id` FROM `QSOptimize_city` SELECT `QSOptimize_province`.`id`, `QSOptimize_province`.`name` FROM `QSOptimize_province` WHERE `QSOptimize_province`.`id` = 1 ; SELECT `QSOptimize_province`.`id`, `QSOptimize_province`.`name` FROM `QSOptimize_province` WHERE `QSOptimize_province`.`id` = 2 ; SELECT `QSOptimize_province`.`id`, `QSOptimize_province`.`name` FROM `QSOptimize_province` WHERE `QSOptimize_province`.`id` = 1 ; ","date":"2019-09-07","objectID":"/django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/:1:1","tags":["python","django"],"title":"Django-查询优化","uri":"/django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"},{"categories":["python"],"content":"使用select_related: citys = City.objects.select_related().all() for c in citys: print (c.province) 只有一次SQL查询，大大减少了SQL查询的次数 SQL SELECT `QSOptimize_city`.`id`, `QSOptimize_city`.`name`, `QSOptimize_city`.`province_id`, `QSOptimize_province`.`id`, `QSOptimize_province`.`name` FROM`QSOptimize_city` INNER JOIN `QSOptimize_province` ON (`QSOptimize_city`.`province_id` = `QSOptimize_province`.`id`) ; Django使用了INNER JOIN来完成请求 ","date":"2019-09-07","objectID":"/django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/:1:2","tags":["python","django"],"title":"Django-查询优化","uri":"/django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"},{"categories":["python"],"content":"多外键查询 select_related() 接受可变长参数，每个参数是需要获取的外键的字段名，以及外键的外键的字段名、外键的外键的外键…。若要选择外键的外键需要使用两个下划线“__”来连接。 注：未指定的外键则不会被添加到结果中 1.7以前 zhangs=Person.objects.select_related('hometown__province','living__province') .get(firstname=\"张\",lastname=\"三\") zhangs.hometown.province zhangs.living.province 1.7以后支持链式操作 zhangs=Person.objects.select_related('hometown__province') .select_related('living__province').get(firstname=\"张\",lastname=\"三\") zhangs.hometown.province zhangs.living.province ","date":"2019-09-07","objectID":"/django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/:1:3","tags":["python","django"],"title":"Django-查询优化","uri":"/django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"},{"categories":["python"],"content":"深度查询depth Django会递归遍历指定深度内的所有的OneToOneField和ForeignKey。以本例说明： zhangs = Person.objects.select_related(depth = d) # d=1 相当于 select_related('hometown','living') # d=2 相当于 select_related('hometown__province','living__province') ","date":"2019-09-07","objectID":"/django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/:1:4","tags":["python","django"],"title":"Django-查询优化","uri":"/django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"},{"categories":["python"],"content":"无参数 这样表示要求Django尽可能深的select_related() 注：Django并不知道你实际要用的字段有哪些，所以会把所有的字段都抓进来，从而会造成不必要的浪费而影响性能 ","date":"2019-09-07","objectID":"/django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/:1:5","tags":["python","django"],"title":"Django-查询优化","uri":"/django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"},{"categories":["python"],"content":"小结： 主要针一对一和多对一关系进行优化 使用SQL的JOIN语句进行优化，通过减少SQL查询的次数来进行优化、提高性能。 通过可变长参数指定需要select_related的字段名。也可以通过使用双下划线“__”连接字段名来实现指定的递归查询。 没有指定的字段不会缓存，没有指定的深度不会缓存，如果要访问的话Django会再次进行SQL查询。 也可以通过depth参数指定递归的深度，Django会自动缓存指定深度内所有的字段。如果要访问指定深度外的字段，Django会再次进行SQL查询。 接受无参数的调用，Django会尽可能深的递归查询所有的字段。但注意有Django递归的限制和性能的浪费。 Django \u003e= 1.7，链式调用的select_related相当于使用可变长参数。Django \u003c 1.7，链式调用会导致前边的select_related失效，只保留最后一个。 ","date":"2019-09-07","objectID":"/django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/:1:6","tags":["python","django"],"title":"Django-查询优化","uri":"/django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"},{"categories":["python"],"content":"二、prefetch_related 对于多对多字段（ManyToManyField）和一对多字段，可以使用prefetch_related()来进行优化。或许你会说，没有一个叫OneToManyField的东西啊。实际上 ，ForeignKey就是一个多对一的字段，而被ForeignKey关联的字段就是一对多字段了。 prefetch_related()和select_related()都是为了减少SQL查询的数量，但是实现的方式不一样。后者是通过JOIN语句，在SQL查询内解决问题。但是对于多对多关系，使用SQL语句JOIN得到的表将会很长，会导致SQL语句运行时间的增加和内存占用的增加。prefetch_related()的解决方法是，分别查询每个表，然后用Python处理他们之间的关系 zhangs = Person.objects.prefetch_related('visitation').get(firstname=\"张\",lastname=\"三\") for city in zhangs.visitation.all() : print(city) ","date":"2019-09-07","objectID":"/django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/:2:0","tags":["python","django"],"title":"Django-查询优化","uri":"/django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"},{"categories":["python"],"content":"Prefetch 对象 一个Prefetch对象只能指定一项prefetch操作。 Prefetch对象对字段指定的方式和prefetch_related中的参数相同，都是通过双下划线连接的字段名完成的。 可以通过 queryset 参数手动指定prefetch使用的QuerySet。 可以通过 to_attr 参数指定prefetch到的属性名。 Prefetch对象和字符串形式指定的lookups参数可以混用。 ","date":"2019-09-07","objectID":"/django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/:2:1","tags":["python","django"],"title":"Django-查询优化","uri":"/django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"},{"categories":["python"],"content":"小结： prefetch_related主要针一对多和多对多关系进行优化。 prefetch_related通过分别获取各个表的内容，然后用Python处理他们之间的关系来进行优化。 可以通过可变长参数指定需要select_related的字段名。指定方式和特征与select_related是相同的。 在Django \u003e= 1.7可以通过Prefetch对象来实现复杂查询。 作为prefetch_related的参数，Prefetch对象和字符串可以混用。 prefetch_related的链式调用会将对应的prefetch添加进去，而非替换，似乎没有基于不同版本上区别。 可以通过传入None来清空之前的prefetch_related。 参考：https://blog.csdn.net/cugbabybear/article/details/38342793 ","date":"2019-09-07","objectID":"/django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/:2:2","tags":["python","django"],"title":"Django-查询优化","uri":"/django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"},{"categories":["树莓派"],"content":"一、硬盘挂载 由于之前硬盘(NTFS格式)里有数据不想格式化想直接挂载，就没有格式化成ext4文件格式的。 安装ntfs-3g sudo apt-get install ntfs-3g 加载内核模块 modprobe fuse 查看硬盘情况 fdis -l 将硬盘挂载到/mnt下 ntfs-3g /dev/sda1 /mnt 实现开机自动挂载 vim /etc/fsta# 最后一行添加，重启生效/dev/sda1 /mnt ntfs-3g defaults,noexec,umask=0000 0 0 查看挂载情况 cd /mntls ","date":"2019-09-06","objectID":"/%E6%A0%91%E8%8E%93%E6%B4%BE4b-nas%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA/:0:1","tags":["树莓派"],"title":"树莓派4B NAS系统搭建","uri":"/%E6%A0%91%E8%8E%93%E6%B4%BE4b-nas%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA/"},{"categories":["树莓派"],"content":"安装samba apt install samba samba-common-bin# 过程中需要安装额外的包 确定即可# 在/mnt下 创建一个文件 设置权限mkdir datachown -R root:users /mnt/datachmod -R ug=rwx,o=rx /mnt/data# 修改samba配置vim /etc/samba/smb.conf#修改Authentication security = user# 修改home下的read read only = no# 最后[public] # 说明信息 comment = public storage # 共享文件的路径 path = /mnt/data # 可以访问的用户 valid users = @users force group = users # 新建文件权限 create mask = 0660 # 新建目录权限 directory mask = 0771 read only = no# 保存退出 重启smb服务 /etc/init.d/samba-ad-dc restart 有问题可以试试这个： # 重启服务: sudo /etc/init.d/smbd restart# 重启服务: sudo /etc/init.d/nmbd restart 添加用户 smbpasswd -a pi#输入密码即可 在添加用户的时候一开始不是pi是别的用户名，碰到了Failed to add entry for user 原因是因为没有加相应的系统账号，只要添加账号即可。 现在电脑就可以连接树莓派的ip地址了。 ","date":"2019-09-06","objectID":"/%E6%A0%91%E8%8E%93%E6%B4%BE4b-nas%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA/:0:2","tags":["树莓派"],"title":"树莓派4B NAS系统搭建","uri":"/%E6%A0%91%E8%8E%93%E6%B4%BE4b-nas%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA/"},{"categories":["树莓派"],"content":"安装qBittorrent下载器 # 安装sudo apt-get update \u0026\u0026 sudo apt-get install qbittorrent-nox 创建系统服务，新建/etc/systemd/system/qbittorrent.service文件，写入以下内容 [Unit]Description=qBittorrent Daemon ServiceAfter=network.target[Service]User=piExecStart=/usr/bin/qbittorrent-noxExecStop=/usr/bin/killall -w qbittorrent-nox[Install]WantedBy=multi-user.target 更新systemctl sudo systemctl daemon-reload 直接启动服务：qbittorrent-nox，默认端口是8080，如果想指定端口运行的话，则加上参数–webui-port=x，其中x就是端口号，比如指定端口为8088：qbittorrent-nox –webui-port=8088 后台运行后面加个\u0026 最后 #开启qbt服务systemctl start qbittorrent#查看服务状态systemctl status qbittorrent#服务开机自启systemctl enable qbittorrent 如果下载没有速度可以修改用户为root ","date":"2019-09-06","objectID":"/%E6%A0%91%E8%8E%93%E6%B4%BE4b-nas%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA/:0:3","tags":["树莓派"],"title":"树莓派4B NAS系统搭建","uri":"/%E6%A0%91%E8%8E%93%E6%B4%BE4b-nas%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA/"},{"categories":["树莓派"],"content":"一、系统安装 官网下载好系统解压，使用SD Card Formatter格式化内存卡 # 查看内存卡状态,通过内存卡大小判断是哪个df -lh# 卸载内存卡diskutil unmount /dev/disk2s1# 确认设备号diskutil list# 烧写系统 ，进入解压镜像所在目录sudo dd bs=4m if=rpi_35_v6_1_2_3_jessie_kernel_4_4_50.img of=/dev/disk2# if = 镜像名称，of = sd卡# 等待一段时间烧写完毕会有提示# 卸载sd卡diskutil unmountDisk /dev/disk2 插入到树莓派，试验是否成功 ","date":"2019-09-06","objectID":"/%E6%A0%91%E8%8E%93%E6%B4%BE4b%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/:0:1","tags":["树莓派"],"title":"树莓派4B基本配置","uri":"/%E6%A0%91%E8%8E%93%E6%B4%BE4b%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"},{"categories":["树莓派"],"content":"二、开启ssh连接 sudo raspi-config 选择第五个选项(interfacing options) 选择开启ssh这个选项 修改默认的远程连接密码 第一个选项就是 ","date":"2019-09-06","objectID":"/%E6%A0%91%E8%8E%93%E6%B4%BE4b%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/:0:2","tags":["树莓派"],"title":"树莓派4B基本配置","uri":"/%E6%A0%91%E8%8E%93%E6%B4%BE4b%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"},{"categories":["树莓派"],"content":"三、开启root远程登录权限 设置root用户密码 sudo passwd root 启用root用户 sudo passwd --unlock root 设置ssh允许登录 sudo sed -i \"s/^#PermitRootLogin.*/PermitRootLogin yes/g\" /etc/ssh/sshd_config 重启ssh服务 sudo systemctl restart ssh 为root用户应用于当前用户相同的bash配置 sudo cp ~/.bashrc /root/.bashrc ","date":"2019-09-06","objectID":"/%E6%A0%91%E8%8E%93%E6%B4%BE4b%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/:0:3","tags":["树莓派"],"title":"树莓派4B基本配置","uri":"/%E6%A0%91%E8%8E%93%E6%B4%BE4b%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"},{"categories":["树莓派"],"content":"四、更新软件源 更新sources.list sudo cp /etc/apt/sources.list /etc/apt/sources.list.bksudo nano /etc/apt/sources.listdeb http://mirrors.aliyun.com/raspbian/raspbian/ buster main contrib non-free rpi 更新raspi.list sudo cp /etc/apt/sources.list.d/raspi.list /etc/apt/sources.list.d/raspi.list.bksudo nano /etc/apt/sources.list.d/raspi.listdeb http://mirrors.aliyun.com/raspbian/raspbian/ buster main ","date":"2019-09-06","objectID":"/%E6%A0%91%E8%8E%93%E6%B4%BE4b%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/:0:4","tags":["树莓派"],"title":"树莓派4B基本配置","uri":"/%E6%A0%91%E8%8E%93%E6%B4%BE4b%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"},{"categories":["逆向"],"content":" 首先声明只是Android studio使用中遇到的问题纯属个人学习笔记，有什么不对的可以留言。 将脱壳后的java文件拖入到Android studio android studio 首先提示是ERROR: Gradle version 2.2 is required. Current version is 5.1.1 首先，确认Bild,Execution,Deployment\u003eBuild Tools\u003eGradle中的配置 选中第三个，配置Gradle home为本地安卓中的gradle版本，macOS可以在 应用程序中右击Android studio 显示包内容，在gradle目录下就可以看到。 再次build 提示Could not find com.android.tools.build:gradle:2.2.3. 再次查看当前系统的gradle的版本，这次指的是仓库中的gradle编译工具版本，不是之前的gradle版本， 我的路径在/Applications/Android Studio.app/Contents/gradle/m2repository/com/android/tools/build/gradle 修改build.gradle里的classpath dependencies { classpath 'com.android.tools.build:gradle:3.4.1' } 还是不行的话，在gradle中添加 allprojects { repositories { google() jcenter() } } 再次build碰到了The specified Android SDK Build Tools version (23.0.1) is ignored, as it is 大致意思是目前使用的build工具版本26.0.2不合适， 修改buildToolsVersion为指定的版本(错误提示中有) 要是遇到编译的时候碰到了Error:Failed to open zip file,可以执行以下操作 首先删除下面的文件 macOS: ~/.gradle/wrapper/dists Linux: ~/.gradle/wrapper/dists Windows: C:\\Users\\your-username.gradle\\wrapper\\dists 然后重启File Invalidate Caches / Restart 参考:https://stackoverflow.com/questions/44071080/could-not-find-com-android-tools-buildgradle3-0-0-alpha1-in-circle-ci ","date":"2019-09-02","objectID":"/android-studio%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/:0:0","tags":["逆向"],"title":"Android studio中遇到的问题","uri":"/android-studio%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":["python"],"content":" 背景介绍：之前写过通过通过scrapy的扩展发送邮件，在爬虫关闭的时候发送邮件。那个时候有个问题就是MailSender对象需要return出去。这次需要在中间件中发送邮件，但是中间件中不能随便使用return了。 import json import random import scrapy from scrapy.http import Response from scrapy.mail import MailSender from scrapy.exceptions import IgnoreRequest from order_spider.databases.connections import redis_db class LoginTokenMiddleware(object): def __init__(self,mailer): self.mailer = mailer @classmethod def from_crawler(cls, crawler): smtphost = crawler.settings.get('MAIL_HOST') # 发送邮件的服务器 mail_port = crawler.settings.get('MAIL_PORT') # 邮件发送者 mailfrom = crawler.settings.get('MAIL_USER') # 邮件发送者 smtppass = crawler.settings.get('MAIL_PASS') # 发送邮箱的密码不是你注册时的密码，而是授权码！！！切记！ mailer = MailSender(smtphost, mailfrom, mailfrom, smtppass, smtpport=mail_port) return cls(mailer) def _send_mail(self,subject,body): return self.mailer.send(to={'feijun.zheng@huijie-inc.com'}, subject=subject, body=body) def process_request(self, request:scrapy.Request, spider): #从数据库获取所有的用户session tokens = redis_db.hgetall(\"order:xxx\") users = [] for k,v in tokens.items(): #如果用户value有0，代表过期 if \"0\" not in v: users.append(k) if not users: try: #通过end_signal判断爬虫是否继续执行 if spider.end_signal: raise IgnoreRequest # 设置为True，避免重复发送邮件 spider.end_signal = True spider.logger.warning(\"session全部过期请重新添加\") body = 'xxxxx全部过期' subject = '没有可用的账号，请重新添加' #mail添加回调，避免出现`exceptions.AttributeError: 'NoneType' object has no attribute 'bio_read'` self._send_mail(body,subject).addCallback(lambda x: x) except Exception as e: spider.logger.exception(e) finally: # 没有可用账号，关闭爬虫 spider.crawler.engine.close_spider(spider, \"爬虫关闭\") # 忽略后续的请求 raise IgnoreRequest session_id = random.choice(users) request.cookies = {\"JSESSIONID\":session_id} return None def process_response(self, request, response:Response, spider): res = json.loads(response.text) if res['code'] != 1: session_id = request.cookies['JSESSIONID'] user = redis_db.hmget(\"order:xxxx\",session_id)[0] redis_db.hset(\"order:xxxx\",session_id,user+'_0') spider.logger.info(\"登录失败，失败原因:%s\" %(res['msg'])) body = 'session[%s] 可能已过期\\n失败原因%s'%(session_id,res['msg']) subject = '账号登录失败提醒' self._send_mail(body,subject).addCallback(lambda x: x) return response 推荐还是在扩展中使用发送邮件的功能，可以参考： scrapy通过扩展发送邮件 还有一个小问题就是：阿里云上默认不能使用25端口，所以你需要使用456端口进行发送，456端口需要使用SSL，需要在原来的基础上做个小修改： mailer = MailSender(mail_host, mail_user, mail_user, mail_pass, mail_port, smtptls=True, smtpssl=True) 具体参数参考官方文档： scrapy文档 ","date":"2019-08-05","objectID":"/scrapy%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%AD%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/:0:0","tags":["scrapy","python","爬虫"],"title":"scrapy中间件中发送邮件","uri":"/scrapy%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%AD%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"},{"categories":["python"],"content":"Python重试模块retrying 工作中经常碰到的问题就是，某个方法出现了异常，重试几次。循环重复一个方法是很常见的。比如爬虫中的获取代理，对获取失败的情况进行重试。 刚开始搜的几个博客讲的有点问题，建议看官方文档，还有自己动手实验。 参考： https://segmentfault.com/a/1190000004085023 https://pypi.org/project/retrying/ 最初的版本 import requests class ProxyUtil: def __init__(self): self._get_proxy_count = 0 def get_proxies(self): try: r = requests.get('代理服务器地址') # print('正在获取') # raise Exception(\"异常\") # print('获取到最新代理 = %s' % r.text) params = dict() if r and r.status_code == 200: proxy = str(r.content, encoding='utf-8') params['http'] = 'http://' + proxy params['https'] = 'https://' + proxy else: raise Exception(\"获取代理失败,状态码%s\"%(r.status_code)) return params except Exception: if self._get_proxy_count \u003c 5: print('第%d次获取代理失败，准备重试' % self._get_proxy_count) self._get_proxy_count += 1 self.get_proxies() else: print('第%d次获取代理失败，退出' % self._get_proxy_count) self._get_proxy_count = 0 return dict() if __name__ == '__main__': proxy = ProxyUtil() proxy.get_proxies() 以上代码通过try...except...捕获异常，并通过一个计数器判断获取代理的次数，获取失败递归调用自己，直到达到最大次数为止。 为了模拟失败，可以解开抛出异常的注释 下面来试试retrying模块 安装 pip install retrying retrying提供一个装饰器函数retry，被装饰的函数会在运行失败的情况下重新执行，默认一直报错就一直重试。 import requests from retrying import retry class ProxyUtil: def __init__(self): self._get_proxy_count = 0 @retry def get_proxies(self): r = requests.get('代理地址') print('正在获取') raise Exception(\"异常\") print('获取到最新代理 = %s' % r.text) params = dict() if r and r.status_code == 200: proxy = str(r.content, encoding='utf-8') params['http'] = 'http://' + proxy params['https'] = 'https://' + proxy if __name__ == '__main__': proxy = ProxyUtil() proxy.get_proxies() 结果： 正在获取 正在获取 正在获取 … 正在获取(一直重复下去) 没有添加任何参数，默认情况下会一直重试，没有等待时间 # 设置最大重试次数 @retry(stop_max_attempt_number=5) def get_proxies(self): r = requests.get('代理地址') print('正在获取') raise Exception(\"异常\") print('获取到最新代理 = %s' % r.text) params = dict() if r and r.status_code == 200: proxy = str(r.content, encoding='utf-8') params['http'] = 'http://' + proxy params['https'] = 'https://' + proxy # 设置方法的最大延迟时间，默认为100毫秒(是执行这个方法重试的总时间) @retry(stop_max_attempt_number=5,stop_max_delay=50) # 通过设置为50，我们会发现，任务并没有执行5次才结束！ # 添加每次方法执行之间的等待时间 @retry(stop_max_attempt_number=5,wait_fixed=2000) # 随机的等待时间 @retry(stop_max_attempt_number=5,wait_random_min=100,wait_random_max=2000) # 每调用一次增加固定时长 @retry(stop_max_attempt_number=5,wait_incrementing_increment=1000) # 根据异常重试，先看个简单的例子 def retry_if_io_error(exception): return isinstance(exception, IOError) @retry(retry_on_exception=retry_if_io_error) def read_a_file(): with open(\"file\", \"r\") as f: return f.read() read_a_file函数如果抛出了异常，会去retry_on_exception指向的函数去判断返回的是True还是False，如果是True则运行指定的重试次数后，抛出异常，False的话直接抛出异常。 当时自己测试的时候网上一大堆抄来抄去的，意思是retry_on_exception指定一个函数，函数返回指定异常，会重试，不是异常会退出。真坑人啊！ 来看看获取代理的应用(仅仅是为了测试retrying模块) # 定义一个函数用于判断返回的是否是IOError def wraper(args): return isinstance(args,IOError) class ProxyUtil: def get_proxies(self): r = requests.get('http://47.98.163.40:17000/get?country=local') print('正在获取') raise IOError # raise IndexError print('获取到最新代理 = %s' % r.text) params = dict() if r and r.status_code == 200: proxy = str(r.content, encoding='utf-8') params['http'] = 'http://' + proxy params['https'] = 'https://' + proxy # @retry_handler(retry_time=2, retry_interval=5, retry_on_exception=[IOError,IndexError]) @retry(stop_max_attempt_number=5,retry_on_exception=wraper) def retry_test(self): self.get_proxies() print('io') 这种方法只能判断单一的异常，而且扩展性不够高 # 通过返回值判断是否重试 def retry_if_result_none(result): \"\"\"Return True if we should retry (in this case when result is None), False otherwise\"\"\" # return result is None if result ==\"111\": return True @retry(stop_max_attempt_number=5,retry_on_result=retry_if_result_none) def might_return_none(): print(\"Retry forever ignoring Exceptions with no wait if return value is None\") return \"111\" might_return_none() might_return_none函数的返回值传递给retry_if_result_none的result，通过判断result,返回Treu或者None表示需要重试，重试结束后抛出RetryError，返回False表示不重试。 扩展默认的retry装饰器： def retry_handler(retry_time: int, retry_interval: float, retry_on_exception: [BaseException], ","date":"2019-07-18","objectID":"/python%E9%87%8D%E8%AF%95%E6%A8%A1%E5%9D%97retrying/:0:0","tags":["python"],"title":"Python重试模块retrying","uri":"/python%E9%87%8D%E8%AF%95%E6%A8%A1%E5%9D%97retrying/"},{"categories":["python"],"content":"通过TimedRotatingFileHandler按时间切割日志 线上跑了一个定时脚本，每天生成的日志文件都写在了一个文件中。但是日志信息不可能输出到单一的一个文件中。 原因有二：1.日志文件越来越大会影响系统的性能。2.日志文件格式不够清晰，比如我想看今天的日志，不太方便找到的今天的日志信息(即使对日志输出做了时间提示) 通过设置TimedRotatingFileHandler进行日志按周(W)、天(D)、时(H)、分(M)、秒(S)切割。 先看一个简单例子： import time import logging import os from logging import handlers def _logging(**kwargs): level = kwargs.pop('level', None) filename = kwargs.pop('filename', None) datefmt = kwargs.pop('datefmt', None) format = kwargs.pop('format', None) if level is None: level = logging.DEBUG if filename is None: filename = 'default.log' if datefmt is None: datefmt = '%Y-%m-%d%H:%M:%S' if format is None: format = '%(asctime)s[%(module)s] %(levelname)s[%(lineno)d] %(message)s' log = logging.getLogger(filename) format_str = logging.Formatter(format, datefmt) # backupCount 保存日志的数量，过期自动删除 # when 按什么日期格式切分(这里方便测试使用的秒) th = handlers.TimedRotatingFileHandler(filename=filename, when='S', backupCount=3, encoding='utf-8') th.setFormatter(format_str) th.setLevel(logging.INFO) log.addHandler(th) log.setLevel(level) return log os.makedirs(\"./logs\", exist_ok=True) logger = _logging(filename='./logs/default.log') if __name__ == '__main__': while True: time.sleep(0.1) logger.info('哈哈哈') 结果如下： 上述代码可以正常运行，而且也可以生成固定的日志个数，但是有一个问题，生成的日志文件格式是你的文件名+时间的格式，没有设置时间的话默认设置到了秒(这里是按秒切割) 修改日志格式后缀名称： # 在上述代码中加入 def namer(filename): return filename.split('default.') th.namer = namer # 设置为S，默认的suffix为 Y-%m-%d_%H-%M-%S th.suffix = \"%Y-%m-%d_%H-%M-%S.log\" # 为了看的更视觉效果，可以显示在控制台答应 cmd = logging.StreamHandler() cmd.setFormatter(format_str) cmd.setLevel(level) log.addHandler(cmd) 运行结果： 名字好像可以了，但是日志好像没有起到自动删除的目的啊，而且也没在之前的log文件夹了。 来看看源码： def getFilesToDelete(self): \"\"\" Determine the files to delete when rolling over. More specific than the earlier method, which just used glob.glob(). \"\"\" dirName, baseName = os.path.split(self.baseFilename) fileNames = os.listdir(dirName) result = [] prefix = baseName + \".\" plen = len(prefix) for fileName in fileNames: if fileName[:plen] == prefix: suffix = fileName[plen:] if self.extMatch.match(suffix): result.append(os.path.join(dirName, fileName)) if len(result) \u003c self.backupCount: result = [] else: result.sort() result = result[:len(result) - self.backupCount] return result 这是它的删除逻辑，关键是通过.前面的字段判断是否重复，当有特定的重复数后开始删除。 所以问题来了，要么自己去重写源码，要么就只能用default.日期.log这种格式了。 附上平时使用的日志代码 import logging import os from logging import handlers def _logging(**kwargs): level = kwargs.pop('level', None) filename = kwargs.pop('filename', None) datefmt = kwargs.pop('datefmt', None) format = kwargs.pop('format', None) if level is None: level = logging.DEBUG if filename is None: filename = 'default.log' if datefmt is None: datefmt = '%Y-%m-%d%H:%M:%S' if format is None: format = '%(asctime)s[%(module)s] %(levelname)s[%(lineno)d] %(message)s' log = logging.getLogger(filename) format_str = logging.Formatter(format, datefmt) def namer(filename): return filename.split('default.')[1] # cmd = logging.StreamHandler() # cmd.setFormatter(format_str) # cmd.setLevel(level) # log.addHandler(cmd) os.makedirs(\"./debug/logs\", exist_ok=True) th_debug = handlers.TimedRotatingFileHandler(filename=\"./debug/\" + filename, when='D', backupCount=3, encoding='utf-8') # th_debug.namer = namer th_debug.suffix = \"%Y-%m-%d.log\" th_debug.setFormatter(format_str) th_debug.setLevel(logging.DEBUG) log.addHandler(th_debug) th = handlers.TimedRotatingFileHandler(filename=filename, when='D', backupCount=3, encoding='utf-8') # th.namer = namer th.suffix = \"%Y-%m-%d.log\" th.setFormatter(format_str) th.setLevel(logging.INFO) log.addHandler(th) log.setLevel(level) return log os.makedirs('./logs', exist_ok=True) logger = _logging(filename='./logs/default') ","date":"2019-07-17","objectID":"/python%E9%80%9A%E8%BF%87timedrotatingfilehandler%E6%8C%89%E6%97%B6%E9%97%B4%E5%88%87%E5%89%B2%E6%97%A5%E5%BF%97/:0:0","tags":["python"],"title":"python通过TimedRotatingFileHandler按时间切割日志","uri":"/python%E9%80%9A%E8%BF%87timedrotatingfilehandler%E6%8C%89%E6%97%B6%E9%97%B4%E5%88%87%E5%89%B2%E6%97%A5%E5%BF%97/"},{"categories":["python"],"content":"APScheduler定时任务 APScheduler 支持三种调度任务：固定时间间隔，固定时间点（日期），Linux 下的 Crontab 命令。同时，它还支持异步执行、后台执行调度任务。 ","date":"2019-07-15","objectID":"/python%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1apscheduler/:1:0","tags":["APScheduler","python"],"title":"python定时任务APScheduler","uri":"/python%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1apscheduler/"},{"categories":["python"],"content":"一、基本架构 触发器 triggers：设定触发任务的条件 描述一个任务何时被触发，按日期或按时间间隔或按 cronjob 表达式三种方式触发 任务存储器 job stores：存放任务，可以放内存(默认)或数据库 注：调度器之间不能共享任务存储器 执行器 executors：用于执行任务，可设定执行模式 将指定的作业提交到线程池或者进程池中运行，任务完成通知调度器触发相应的事件。 调度器 schedulers：将上方三个组件作为参数，创建调度器实例执行。 协调三个组件的运行。 ","date":"2019-07-15","objectID":"/python%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1apscheduler/:1:1","tags":["APScheduler","python"],"title":"python定时任务APScheduler","uri":"/python%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1apscheduler/"},{"categories":["python"],"content":"二、调度器组件(schedulers) BlockingScheduler阻塞式调度器 调度程序是进程中唯一运行的进程，调用start函数会阻塞当前线程，不能立即返回。 from apscheduler.schedulers.blocking import BlockingScheduler import time scheduler = BlockingScheduler() def job1(): print \"%s: 执行任务\" % time.asctime() scheduler.add_job(job1, 'interval', seconds=3) scheduler.start() BackgroundScheduler后台调度器 当前线程不会阻塞，调度器后台执行 from apscheduler.schedulers.background import BackgroundScheduler import time scheduler = BackgroundScheduler() def job1(): print \"%s: 执行任务\" % time.asctime() scheduler.add_job(job1, 'interval', seconds=3) scheduler.start() time.sleep(10) 注：10秒执行完后，程序结束。 AsyncIOSchedulerAsyncIO调度器 适用于使用了asyncio的情况 from apscheduler.schedulers.asyncio import AsyncIOScheduler import asyncio ... ... try: asyncio.get_event_loop().run_forever() except (KeyboardInterrupt, SystemExit): pass GeventSchedulerGevent调度器 使用了Gevent的情况 from apscheduler.schedulers.gevent import GeventScheduler ... ... g = scheduler.start() try: g.join() except (KeyboardInterrupt, SystemExit): pass TornadoSchedulerTornado调度器 适用于构建Tornado应用 TwistedScheduler Twisted调度器 适用于构建Twisted应用 QtScheduler Qt调度器 适用于构建Qt应用 ","date":"2019-07-15","objectID":"/python%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1apscheduler/:1:2","tags":["APScheduler","python"],"title":"python定时任务APScheduler","uri":"/python%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1apscheduler/"},{"categories":["python"],"content":"三、触发器组件(trigger) date：只在某个时间点执行一次，具体日期 run_date(datetime|str) scheduler.add_job(my_job, 'date', run_date=datetime(2019, 7, 12, 15, 30, 5), args=[]) scheduler.add_job(my_job, 'date', run_date=\"2019-07-12\", args=[]) timezone 指定时区 interval：每隔一段时间允许一次，时间间隔 weeks=0 | days=0 | hours=0 | minutes=0 | seconds=0, start_date=None, end_date=None, timezone=None scheduler.add_job(my_job, 'interval', hours=2) scheduler.add_job(my_job, 'interval', hours=2, start_date='2017-9-8 21:30:00', end_date='2018-06-15 21:30:00) cron：任务的运行周期 (year=None, month=None, day=None, week=None, day_of_week=None, hour=None, minute=None, second=None, start_date=None, end_date=None, timezone=None) 除了week和 day_of_week，它们的默认值是* 例如day=1, minute=20，这就等于year='*', month='*', day=1, week='*', day_of_week='*', hour='*', minute=20, second=0，工作将在每个月的第一天以每小时20分钟的时间执行 表达式类型 表达式 参数类型 描述 * 所有 通配符。例：minutes=*即每分钟触发 */a 所有 可被a整除的通配符。 a-b 所有 范围a-b触发 a-b/c 所有 范围a-b，且可被c整除时触发 xth y 日 第几个星期几触发。x为第几个，y为星期几 last x 日 一个月中，最后个星期几触发 last 日 一个月最后一天触发 x,y,z 所有 组合表达式，可以组合确定值或上方的表达式 注：当设置的时间间隔小于，任务的执行时间，线程会阻塞住，等待执行完了才能执行下一个任务，可以设置max_instance指定一个任务同一时刻有多少个实例在运行，默认为1 ","date":"2019-07-15","objectID":"/python%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1apscheduler/:1:3","tags":["APScheduler","python"],"title":"python定时任务APScheduler","uri":"/python%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1apscheduler/"},{"categories":["python"],"content":"四、配置调度器 转自：https://www.jianshu.com/p/4f5305e220f0 线程池执行器默认为10，内存任务存储器为memoryjobstore,如果想自己配置的话可以执行以下操作 需求： 两个任务储存器分别搭配两个执行器；同时，还要修改任务的默认参数；最后还要改时区 名称为“mongo”的MongoDBJobStore 名称为“default”的SQLAlchemyJobStore 名称为“ThreadPoolExecutor ”的ThreadPoolExecutor，最大线程20个 名称“processpool”的ProcessPoolExecutor，最大进程5个 UTC时间作为调度器的时区 默认为新任务关闭合并模式（） 设置新任务的默认最大实例数为3 方法一： from pytz import utc from apscheduler.schedulers.background import BackgroundScheduler from apscheduler.jobstores.mongodb import MongoDBJobStore from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore from apscheduler.executors.pool import ThreadPoolExecutor, ProcessPoolExecutor jobstores = { 'mongo': MongoDBJobStore(), 'default': SQLAlchemyJobStore(url='sqlite:///jobs.sqlite') } executors = { 'default': ThreadPoolExecutor(20), 'processpool': ProcessPoolExecutor(5) } job_defaults = { 'coalesce': False, 'max_instances': 3 } scheduler = BackgroundScheduler(jobstores=jobstores, executors=executors, job_defaults=job_defaults, timezone=utc) 方法二： from apscheduler.schedulers.background import BackgroundScheduler # The \"apscheduler.\" prefix is hard coded scheduler = BackgroundScheduler({ 'apscheduler.jobstores.mongo': { 'type': 'mongodb' }, 'apscheduler.jobstores.default': { 'type': 'sqlalchemy', 'url': 'sqlite:///jobs.sqlite' }, 'apscheduler.executors.default': { 'class': 'apscheduler.executors.pool:ThreadPoolExecutor', 'max_workers': '20' }, 'apscheduler.executors.processpool': { 'type': 'processpool', 'max_workers': '5' }, 'apscheduler.job_defaults.coalesce': 'false', 'apscheduler.job_defaults.max_instances': '3', 'apscheduler.timezone': 'UTC', }) 方法三： from pytz import utc from apscheduler.schedulers.background import BackgroundScheduler from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore from apscheduler.executors.pool import ProcessPoolExecutor jobstores = { 'mongo': {'type': 'mongodb'}, 'default': SQLAlchemyJobStore(url='sqlite:///jobs.sqlite') } executors = { 'default': {'type': 'threadpool', 'max_workers': 20}, 'processpool': ProcessPoolExecutor(max_workers=5) } job_defaults = { 'coalesce': False, 'max_instances': 3 } scheduler = BackgroundScheduler() # ..这里可以添加任务 scheduler.configure(jobstores=jobstores, executors=executors, job_defaults=job_defaults, timezone=utc) ","date":"2019-07-15","objectID":"/python%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1apscheduler/:1:4","tags":["APScheduler","python"],"title":"python定时任务APScheduler","uri":"/python%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1apscheduler/"},{"categories":["python"],"content":"五、启动调度器 除了BlockingScheduler外，其他非阻塞的调度器都会立即返回，运行之后的代码。 BlockingScheduler需要将运行的代码放在start()之前 1.添加任务 1.调用add_job() #可以传参max_instance,同一任务的运行实例个数 当有任务中途中断，后面恢复后，有N个任务没有执行 coalesce：true ，恢复的任务会执行一次 coalesce：false，恢复后的任务会执行N次配合misfire_grace_time使用 misfire_grace_time设置时间差值，由于某些原因没有运行，再次提交时，大于设置的时间，实例不会运行。 2.装饰器scheduled_job() 立即运行可以不设置trigger参数 2.移除任务 # 根据任务实例删除 job = scheduler.add_job(myfunc, 'interval', minutes=2) job.remove() # 根据任务id删除 scheduler.add_job(myfunc, 'interval', minutes=2, id='my_job_id') scheduler.remove_job('my_job_id') 3.暂停任务 job = scheduler.add_job(myfunc, 'interval', minutes=2) # 根据任务实例 job.pause() #暂停 job.resume() #继续 # 根据任务id暂停 scheduler.add_job(myfunc, 'interval', minutes=2, id='my_job_id') scheduler.pause_job('my_job_id') scheduler.resume_job('my_job_id') 4.调度器操作 scheduler.start() #开启 scheduler.shotdown(wait=True|False) #关闭 False 无论任务是否执行，强制关闭 异常捕获 # 可以添加apscheduler日志至DEBUG级别，这样就能捕获异常信息 import logging logging.basicConfig() logging.getLogger('apscheduler').setLevel(logging.DEBUG) ","date":"2019-07-15","objectID":"/python%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1apscheduler/:1:5","tags":["APScheduler","python"],"title":"python定时任务APScheduler","uri":"/python%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1apscheduler/"},{"categories":["git"],"content":"GIT常用操作 ","date":"2019-07-12","objectID":"/git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:1:0","tags":["git"],"title":"GIT常用操作","uri":"/git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["git"],"content":"git本地仓库与远程建立连接 1.在本地初始化仓库 git init git add . git commit -m 'add files' 2.在github上新建一个仓库 3.本地与远程仓库建立连接 git remote add origin 你远程仓库的地址 4.合并本地代码 git pull origin master --allow-unrelated-histories //合并不相关的历史内容 5.将本地代码推导远程仓库 git push origin master 6.新建本地分支，并推送到远程 git checkout -b dev //b 表示创建并切换 git push origin dev:dev 7.查看所有分支 git branch -al 8.合并某分支到当前分支 git merge dev 9.删除分支 git push origin --delete dev //删除远程分支 或者 git push origin :dev //推送本地空分支到远程dev分支 ","date":"2019-07-12","objectID":"/git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:1:1","tags":["git"],"title":"GIT常用操作","uri":"/git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["git"],"content":"git基本命令 1.查看状态 git status #显示工作目录和暂存区的状态，不显示已经commit的信息 git log #显示提交日志 2.add添加文件 git add . #将所有修改添加到暂存区，不包括被删除的文件 git add abc.py #添加某个文件 git add abc.py cde.py #添加多个文件时，中间用空格分开 git add ab* #将以ab开头的文件添加到暂存区 git add *.py #将以py结尾的文件添加到暂存区 git add -u \u003cpath\u003e #只添加\u003cpath\u003e中已跟踪的文件信息，省略\u003cpath\u003e即当前目录 git add -A #提交所有变化，包括被删除的文件 3.撤销add操作 git reset HEAD #撤销上一次的add操作 HEAD～2 代表倒数第二个 git reset HEAD abc.py #对某个文件进行撤销 4.commit提交到本地版本库 git commit -m \"注释信息\" git commit --amend #增补提交，使用当前节点相同节点进行一次新提交，就的提交被取消 5.撤销commit操作 git reset --soft HEAD^ #不删除工作空间改动代码，撤销commit，不撤销git add git reset --hard HEAD^ #删除工作空间改动代码，撤销commit和add 6.撤销本地的修改 #本地做了一些操作，想撤销到上一次commit的版本 git checkout 7.暂存工作区文件 本地进行了修改添加，这个时候需要切分支，或者更新本地代码，可以先将本地代码暂存，暂存后工作目录就是干净的，可以切分支或者更新代码，更新或者操作完别的分支后，再从暂存区取出之前的代码。 git stash # 添加到暂存区 git stash save \"注释\" #多了注释内容 git stash list # 查看存储的列表 git stash show #显示做了哪些改动，默认第一个,还可以git stash show stash@{2} git stash apply stash@{1} #应用某个存储，但不会从存储列表删除 git stash drop stash@{1} #从栈中移除暂存的内容 git stash clear #删除所有缓存 注：没有在git版本控制中的文件是不能被stash存起来的 8.删除文件 git rm a.py #将a.py从git仓库管理系统中删除 # 下次提交 远程仓库的a.py 也会被删除 git rm -r mydir #将mydir文件夹从仓库管理系统中删除 普通的本地删除文件，远程仓库还是会有的。 9.branch的基本操作 git branch #查看本地分支 git branch -al#查看所有分支(包括远程) git bracnh dev #创建dev分支 git checkout dev #切换到dev分支 git branch -m dev test #修改分支名字 git push origin --delete dev #删除分支 git merge dev #合并某个分支到当前分支 ","date":"2019-07-12","objectID":"/git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/:1:2","tags":["git"],"title":"GIT常用操作","uri":"/git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"categories":["python"],"content":"清理特殊文本 unicodedata.normalize(form, unistr) 把一串UNICODE字符串转换为普通格式的字符串，具体格式支持NFC、NFKC、NFD和NFKD格式。 Unicode标准定义了四种规范化形式： Normalization Form D (NFD)，Normalization Form KD (NFKD)，Normalization Form C (NFC)，和Normalization Form KC (NFKC)。大约来说，NFD和NFKD将可能的字符进行分解，而NFC和NFKC将可能的字符进行组合。 import unicodedata a = 'pýtĥöñ is awesome\\n' b = unicodedata.normalize('NFD',a) b.encode('ascii', 'ignore').decode('ascii') ","date":"2019-07-08","objectID":"/%E6%B8%85%E7%90%86%E7%89%B9%E6%AE%8A%E6%96%87%E6%9C%AC/:1:0","tags":["python"],"title":"清理特殊文本","uri":"/%E6%B8%85%E7%90%86%E7%89%B9%E6%AE%8A%E6%96%87%E6%9C%AC/"},{"categories":["mac"],"content":"多SSH key配置 工作的时候碰到SSH配置的问题，就是公司用的是gittea的仓库，而本人的github平常也要使用，这个时候就需要配置不同的SSH key了。将同一个公钥分配配置给github和gittea的话并不可行。个人认为是你在操作的时候他不知道你是操作哪个git。 ","date":"2019-07-05","objectID":"/mac%E5%A4%9Assh-key%E9%85%8D%E7%BD%AE/:1:0","tags":["git","mac"],"title":"Mac多SSH Key配置","uri":"/mac%E5%A4%9Assh-key%E9%85%8D%E7%BD%AE/"},{"categories":["mac"],"content":"1.切换到系统的SSH目录下。 cd ~/.ssh ","date":"2019-07-05","objectID":"/mac%E5%A4%9Assh-key%E9%85%8D%E7%BD%AE/:1:1","tags":["git","mac"],"title":"Mac多SSH Key配置","uri":"/mac%E5%A4%9Assh-key%E9%85%8D%E7%BD%AE/"},{"categories":["mac"],"content":"2.生成自己的github的SSH key(默认这里你已经配置好了一个SSH key) ssh-keygen -t rsa -C \"自己Github账号\" -f github_rsa #-f表示保存的文件名 一路回车 ","date":"2019-07-05","objectID":"/mac%E5%A4%9Assh-key%E9%85%8D%E7%BD%AE/:1:2","tags":["git","mac"],"title":"Mac多SSH Key配置","uri":"/mac%E5%A4%9Assh-key%E9%85%8D%E7%BD%AE/"},{"categories":["mac"],"content":"3.将对应的SSH key添加到相应的平台 ","date":"2019-07-05","objectID":"/mac%E5%A4%9Assh-key%E9%85%8D%E7%BD%AE/:1:3","tags":["git","mac"],"title":"Mac多SSH Key配置","uri":"/mac%E5%A4%9Assh-key%E9%85%8D%E7%BD%AE/"},{"categories":["mac"],"content":"4.配置config文件 # github Host github.com HostName github.com PreferredAuthentications publickey IdentityFile ~/.ssh/github_rsa # gitlab Host gitlab.com HostName gitlab.com PreferredAuthentications publickey IdentityFile ~/.ssh/company_rsa 注：host名称没有关系，HostName是网站的地址，配置相应的地址就好了。不知道是哪个，可以看你clone的地址，@后面到项目名之间的就是了。 ","date":"2019-07-05","objectID":"/mac%E5%A4%9Assh-key%E9%85%8D%E7%BD%AE/:1:4","tags":["git","mac"],"title":"Mac多SSH Key配置","uri":"/mac%E5%A4%9Assh-key%E9%85%8D%E7%BD%AE/"},{"categories":["mac"],"content":"5.测试是否添加成功 ssh -T git@github.com ","date":"2019-07-05","objectID":"/mac%E5%A4%9Assh-key%E9%85%8D%E7%BD%AE/:1:5","tags":["git","mac"],"title":"Mac多SSH Key配置","uri":"/mac%E5%A4%9Assh-key%E9%85%8D%E7%BD%AE/"},{"categories":["mac"],"content":"SSH key参数选项 -b：指定密钥长度； -e：读取openssh的私钥或者公钥文件； -C：添加注释； -f：指定用来保存密钥的文件名； -i：读取未加密的ssh-v2兼容的私钥/公钥文件，然后在标准输出设备上显示openssh兼容的私钥/公钥； -l：显示公钥文件的指纹数据； -N：提供一个新密语； -P：提供（旧）密语； -q：静默模式； -t：指定要创建的密钥类型。 ","date":"2019-07-05","objectID":"/mac%E5%A4%9Assh-key%E9%85%8D%E7%BD%AE/:1:6","tags":["git","mac"],"title":"Mac多SSH Key配置","uri":"/mac%E5%A4%9Assh-key%E9%85%8D%E7%BD%AE/"},{"categories":["逆向"],"content":"一、原理 Android运行的核心是zygote进程，所有app的进程都是通过zygote fork出来的。通过替换system/bin/下面的app_process等文件，相当于替换了zygote进程，实现了控制手机上的所有APP。基本原理是修改了ART/Davilk虚拟机，将需要hook的函数注册为Native层函数，当执行到该函数时，虚拟机会先执行Native层函数，然后执行Java层函数，这样完成hook。 更详细的可以参考：https://blog.csdn.net/wxyyxc1992/article/details/17320911 ","date":"2019-06-19","objectID":"/xposed%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/:1:0","tags":["逆向"],"title":"xposed的基本使用","uri":"/xposed%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"},{"categories":["逆向"],"content":"二、Xposed安装 环境：网易mumu、Android Studio3.3.1 github地址：https://github.com/rovo89/XposedInstaller Xposedinstaller的apk：https://repo.xposed.info/module/de.robv.android.xposed.installer 在网易mumu中安装好xposedinstaller apk后，关闭应用兼容性(不关闭的话安装xposed框架会出错)，进去之后点击小云彩即可安装完成。 ","date":"2019-06-19","objectID":"/xposed%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/:2:0","tags":["逆向"],"title":"xposed的基本使用","uri":"/xposed%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"},{"categories":["逆向"],"content":"三、Xposed代码编写 新建项目，选择empty activity，创建成功后，在AndroidManifest.xml中添加如下代码 \u003cmeta-data android:name=\"xposedmodule\" android:value=\"true\" /\u003e \u003c!--告诉xposed框架这是一个xposed模块--\u003e \u003cmeta-data android:name=\"xposeddescription\" android:value=\"这是一个Xposed例程\" /\u003e \u003c!--模块描述--\u003e \u003cmeta-data android:name=\"xposedminversion\" \u003c!--模块支持的最低版本--\u003e android:value=\"30\" /\u003e 在gradle中配置XposedbridgeApi，build.gradle中配置 repositories { jcenter() } dependencies { ... compileOnly 'de.robv.android.xposed:api:82' compileOnly 'de.robv.android.xposed:api:82:sources' ... } 这是在网络通畅的情况下进行的， 网络不通畅的话，可以手动下载XposedBridgeApi-82.jar，拖动到/app/libs中，删除上述gradle中配置的 jcenter，右键\"Add As Library\"添加这个jar包。 在界面上画个按钮，并在MainAcitiviy中编写如下代码(单纯写hook的话前面新建项目的时候可以add no activity) package com.example.myapplication; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.widget.Button; import android.widget.Toast; import android.view.View; public class MainActivity2 extends AppCompatActivity { private Button button; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); button = (Button) findViewById(R.id.button); button.setOnClickListener(new View.OnClickListener() { public void onClick(View v) { Toast.makeText(MainActivity2.this, toastMessage(), Toast.LENGTH_SHORT).show(); } }); } public String toastMessage() { return \"我未被劫持\"; } } 编写Hook代码，在MainActivity同级目录下新建HookTest.java，并且继承接口IXposedHookLoadPackage和重写handleLoadPackage方法 package com.example.myapplication; import java.lang.reflect.Array; import java.security.PublicKey; import java.util.Arrays; import java.util.Map; import de.robv.android.xposed.IXposedHookLoadPackage; import de.robv.android.xposed.XC_MethodHook; import de.robv.android.xposed.XposedBridge; import de.robv.android.xposed.XposedHelpers; import de.robv.android.xposed.callbacks.XC_LoadPackage; public class HookTest implements IXposedHookLoadPackage { private static final String HOOK_APP_NAME = \"APP名字\"; public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpparam) throws Throwable { //性能优化，避免操作无关app if (!lpparam.packageName.equals(HOOK_APP_NAME)) return; if (lpparam.packageName.equals(\"HOOK_APP_NAME\")) { XposedBridge.log(\" 劫持成功！！!\"); XposedBridge.log(\"XposedMainInit handleLoadPackage 执行\"); XposedBridge.log(\"Loaded app: \" + lpparam.packageName); XposedHelpers.findAndHookMethod(\"APP名字.MainActivity\",//hook的类 lpparam.classLoader, \"toastMessage\", // 被Hook的函数 //Map.class, 被Hook函数的第一个参数 (此处没有，只是举个例子) //String.class, 被Hook函数的第二个参数String new XC_MethodHook() { protected void beforeHookedMethod(MethodHookParam param) throws Throwable { super.beforeHookedMethod(param); // 参数获取 XposedBridge.log(\"入口函数执行\"); //参数1 XposedBridge.log(\"beforeHookedMethod map:\" + param.args[0]); //参数2 XposedBridge.log(\"beforeHookedMethod hash_key:\" + param.args[1]); //函数返回值 XposedBridge.log(\"beforeHookedMethod result:\" + param.getResult()); } protected void afterHookedMethod(MethodHookParam param) throws Throwable { XposedBridge.log(\"afterHookedMethod result:\" + param.getResult()); param.setResult(\"你已被劫持\"); } }); } } } 在src/mian目录下添加一个assets目录，目录下添加一个xposed_init文件，里面的代码是你的Hook类的包名+类名。 com.example.myapplication.HookTest 最后选择禁用 Instant Run： 单击 File -\u003e Settings -\u003e Build, Execution, Deployment -\u003e Instant Run，把勾全部去掉。 这个时候钩子已经执行了，具体想钩什么，就看自己的需求了。 注：实际操作中，需要对APP先进行反编译(反编译了才能知道要钩那个函数)，反编译工具有很多，这里就不细说了。 ","date":"2019-06-19","objectID":"/xposed%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/:3:0","tags":["逆向"],"title":"xposed的基本使用","uri":"/xposed%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"},{"categories":["逆向"],"content":"四、面对加了壳的APP 直接用反编译工具打开apk，查看加的是哪种壳，寻找对应的函数，类似attachBaseContext这样的方法。 参考链接：https://www.cnblogs.com/xiaobaiyey/p/6442417.html public class EncryptHook implements IXposedHookLoadPackage { public void handleLoadPackage(LoadPackageParam loadPackageParam) throws Throwable { if (!loadPackageParam.packageName.equals(\"app包名\")) { return; } XposedBridge.log(\"Start hook \" + loadPackageParam.packageName); XposedHelpers.findAndHookMethod(\"com.stub.StubApp\", loadPackageParam.classLoader, //com.stub.StubApp 加壳的类 \"attachBaseContext\", Context.class, new XC_MethodHook() { // attachBaseContext 加壳的方法 @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable { super.afterHookedMethod(param); Context context = (Context) param.args[0]; ClassLoader classLoader = context.getClassLoader(); XposedBridge.log(\"Enter stubApp\"); XposedHelpers.findAndHookMethod(\"com.huijiemanager.utils.t\", classLoader, \"a\", byte[].class, PublicKey.class, new XC_MethodHook() { @Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable { XposedBridge.log(\"rsa before params: \" + new String( (byte[]) param.args[0]) + \",\" + param.args[1]); } @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable { XposedBridge.log(\"rsa after params: \" + new String( (byte[]) param.args[0]) + \",\" + param.args[1]); } }); } }); } } 注：反编译的代码不一定准确，逆向的时候最好对每个关键函数都挂上钩子，查看参数是否正确。 附上xposedAPI文档：https://api.xposed.info/reference/packages.html ","date":"2019-06-19","objectID":"/xposed%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/:4:0","tags":["逆向"],"title":"xposed的基本使用","uri":"/xposed%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"},{"categories":["python"],"content":"scrapy发送邮件 应用场景：在爬虫关闭或者爬虫空闲时可以通过发送邮件的提醒。 通过twisted的非阻塞IO实现,可以直接写在spider中，也可以写在中间件或者扩展中，看你具体的需求。 在网上找了很多教程，都是很多年前的或者就是官网搬运的，一点实际的代码都没有，所以就自己尝试了一下，由于本人也是爬虫新手，轻喷，轻喷！ 看下面的示例代码前，先看下官网，熟悉基本的属性。 官网地址sending e-mail：\u003chttps://docs.scrapy.org/en/latest/topics/email.html?highlight=MailSender\u003e 首先在settings同级的目录下创建extendions(扩展)文件夹， 代码如下： import logging from scrapy import signals from scrapy.exceptions import NotConfigured from scrapy.mail import MailSender logger = logging.getLogger(__name__) class SendEmail(object): def __init__(self,sender,crawler): self.sender = sender crawler.signals.connect(self.spider_idle, signal=signals.spider_idle) crawler.signals.connect(self.spider_closed, signal=signals.spider_closed) @classmethod def from_crawler(cls,crawler): if not crawler.settings.getbool('MYEXT_ENABLED'): raise NotConfigured mail_host = crawler.settings.get('MAIL_HOST') # 发送邮件的服务器 mail_port = crawler.settings.get('MAIL_PORT') # 邮件发送者 mail_user = crawler.settings.get('MAIL_USER') # 邮件发送者 mail_pass = crawler.settings.get('MAIL_PASS') # 发送邮箱的密码不是你注册时的密码，而是授权码！！！切记！ sender = MailSender(mail_host,mail_user,mail_user,mail_pass,mail_port) #由于这里邮件的发送者和邮件账户是同一个就都写了mail_user了 h = cls(sender,crawler) return h def spider_idle(self,spider): logger.info('idle spider %s' % spider.name) def spider_closed(self, spider): logger.info(\"closed spider %s\", spider.name) body = 'spider[%s] is closed' %spider.name subject = '[%s] good!!!' %spider.name # self.sender.send(to={'zfeijun@foxmail.com'}, subject=subject, body=body) return self.sender.send(to={'zfeijun@foxmail.com'}, subject=subject, body=body) 这里为什么是return self.sender.send，是因为直接用sender.send会报builtins.AttributeError: 'NoneType' object has no attribute 'bio_read'的错误（邮件会发送成功），具体原因不是很懂，有大牛知道的可以指导一下。 解决方法参考：\u003chttps://github.com/scrapy/scrapy/issues/3478\u003e 在sender.send前加return就好了。 在扩展中写好代码后，需要在settings中启用 EXTENSIONS = { # 'scrapy.extensions.telnet.TelnetConsole': 300, 'bukalapak.extendions.sendmail.SendEmail': 300, } MYEXT_ENABLED = True 转载请注明出处！ ","date":"2019-04-29","objectID":"/scrapy%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/:1:0","tags":["scrapy","python","爬虫"],"title":"scrapy发送邮件","uri":"/scrapy%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"},{"categories":["python"],"content":"auth组件 ","date":"2018-11-26","objectID":"/django-auth%E7%BB%84%E4%BB%B6/:0:0","tags":["python","django"],"title":"django-auth组件","uri":"/django-auth%E7%BB%84%E4%BB%B6/"},{"categories":["python"],"content":"一、auth模块简介 auth模块是django自带的用户认证模块，包含了身份验证和权限管理两部分。 身份验证用于核实某个用户是否合法，权限管理用于决定一个合法用户有哪些权限 默认情况下，使用django-admin startproject命令后，认证模块已经添加到settings文件中，如果没有请手动添加 INSTALLED_APPS中添加 `django.contrib.auth` 包含认证框架的核心以及默认模型 `django.contrib.contenttypes` 内容类型系统，用于给模型关联许可 ------------------------------------------------------------------- MIDDLEWARE中添加 `SessionMiddleware` 通过请求管理会话 `AuthenticationMiddleware` 将会话和用户关联 ","date":"2018-11-26","objectID":"/django-auth%E7%BB%84%E4%BB%B6/:1:0","tags":["python","django"],"title":"django-auth组件","uri":"/django-auth%E7%BB%84%E4%BB%B6/"},{"categories":["python"],"content":"二、用户对象 在django中用户对象是用户认证系统的核心，只有一个用户模型就是User模型，它位于django.contrib.auth.models，使用auth_user表来存储用户数据 ","date":"2018-11-26","objectID":"/django-auth%E7%BB%84%E4%BB%B6/:2:0","tags":["python","django"],"title":"django-auth组件","uri":"/django-auth%E7%BB%84%E4%BB%B6/"},{"categories":["python"],"content":"1.创建用户 create_user(username、password)——-普通用户 from django.contrib.auth.models import User user = User.objects.create_user（username='用户名',password='密码',email='邮箱',...） user是一个User类的实例，已经保存在了数据库内，你可以随时修改它的属性，例如： user.last_name='fj' user.save() create_superuser(username、password)———–超级用户 from django.contrib.auth.models import User user = User.objects.create_superuser（username='用户名',password='密码',email='邮箱',...） ","date":"2018-11-26","objectID":"/django-auth%E7%BB%84%E4%BB%B6/:2:1","tags":["python","django"],"title":"django-auth组件","uri":"/django-auth%E7%BB%84%E4%BB%B6/"},{"categories":["python"],"content":"2.修改密码 注：Django默认会对密码进行加密，因此，不要对密码进行直接操作 set_password(password)——设置密码 user.set_password(password='') user.save() check_password(password)—–检查密码是否正确 ok=user.check_password('密码') 需要提供当前请求用户的密码，正确返回True，错误返回False ","date":"2018-11-26","objectID":"/django-auth%E7%BB%84%E4%BB%B6/:2:2","tags":["python","django"],"title":"django-auth组件","uri":"/django-auth%E7%BB%84%E4%BB%B6/"},{"categories":["python"],"content":"3.用户验证 authenticate() 验证用户名以及密码是否正确，一般需要username 、password两个关键字参数。 如果认证成功（用户名和密码正确有效），便会返回一个 User 对象。 from django.contrib import auth user = authenticate(username='usernamer',password='password') if user: #认证成功 else: #认证失败 is_authenticated()用来判断是否通过了认证 def my_view(request): if not request.user.is_authenticated(): return redirect('%s?next=%s' % (settings.LOGIN_URL, request.path)) ","date":"2018-11-26","objectID":"/django-auth%E7%BB%84%E4%BB%B6/:2:3","tags":["python","django"],"title":"django-auth组件","uri":"/django-auth%E7%BB%84%E4%BB%B6/"},{"categories":["python"],"content":"4.User对象的属性 is_staff：用户是否拥有网站的管理权限 is_active：是否允许用户登录，设置为False可以在不删除用户的前提下禁止用户登录 ","date":"2018-11-26","objectID":"/django-auth%E7%BB%84%E4%BB%B6/:2:4","tags":["python","django"],"title":"django-auth组件","uri":"/django-auth%E7%BB%84%E4%BB%B6/"},{"categories":["python"],"content":"三、在视图中认证用户 django使用session和中间件关联请求对象中和认证系统，每一次请求都包含一个request.user属性，表示当前用户，如果用户未登录，该值为AnonymousUser实例**(匿名用户)**，如果登录它就是一个User模型的实例。 ","date":"2018-11-26","objectID":"/django-auth%E7%BB%84%E4%BB%B6/:3:0","tags":["python","django"],"title":"django-auth组件","uri":"/django-auth%E7%BB%84%E4%BB%B6/"},{"categories":["python"],"content":"1.登录用户 login(HttpRequest,user)—会将用户的ID保存在django的session中 from django.contrib.auth import authenticate,login def my_view(request): username = request.POST['username'] password = request.POST['password'] user = authenticate(username=username, password=password) if user: login(request,user) return HttpResponse('登录成功') else: return HttpResponse('用户名或密码错误') ","date":"2018-11-26","objectID":"/django-auth%E7%BB%84%E4%BB%B6/:3:1","tags":["python","django"],"title":"django-auth组件","uri":"/django-auth%E7%BB%84%E4%BB%B6/"},{"categories":["python"],"content":"2.注销用户 logout(request)—-无返回值 from django.contrib.auth import logout def logout_view(request): logout(request) 当前请求的session信息会被全部删除，如果用户没有登录也不会报错 ","date":"2018-11-26","objectID":"/django-auth%E7%BB%84%E4%BB%B6/:3:2","tags":["python","django"],"title":"django-auth组件","uri":"/django-auth%E7%BB%84%E4%BB%B6/"},{"categories":["python"],"content":"3.登录认证装饰器 login_requierd(redirect_field_name='next’,login_url=’/login/') 用于给视图添加登录校验 from django.contrib.auth.decorators import login_required @login_required def other_view(request): ... redirect_field_name:修改的是浏览器 ? 后面的key值 login_url='/login/' 如果没有登录跳转到的页面 (局部设置) 在settings.LOGIN_URL设置没有登录跳转的页面，传递当前路径为url字符串的参数**(全局设置)** 如果已经登录，执行正常的视图 ","date":"2018-11-26","objectID":"/django-auth%E7%BB%84%E4%BB%B6/:3:3","tags":["python","django"],"title":"django-auth组件","uri":"/django-auth%E7%BB%84%E4%BB%B6/"},{"categories":["python"],"content":"四、扩展默认的auth_user表 默认的auth_user表字段是固定的几个，需要扩展的话可以通过下面的方法 ","date":"2018-11-26","objectID":"/django-auth%E7%BB%84%E4%BB%B6/:4:0","tags":["python","django"],"title":"django-auth组件","uri":"/django-auth%E7%BB%84%E4%BB%B6/"},{"categories":["python"],"content":"1.定义一个表模型，和User一对一管理 class UserDetail(models.Model): phone=models.CharField(max_length=32) # 一对一跟auth_user表做关联 # 如果是从外部引入的表模型,是不能加引号的 # 如果加引号,只是在当前model找 user=models.OneToOneField(to=User) ","date":"2018-11-26","objectID":"/django-auth%E7%BB%84%E4%BB%B6/:4:1","tags":["python","django"],"title":"django-auth组件","uri":"/django-auth%E7%BB%84%E4%BB%B6/"},{"categories":["python"],"content":"2.定义一个表模型，继承(AbstractUser类) from django.contrib.auth.models import AbstractUser class UserInfo(AbstractUser): \"\"\" 用户信息表 \"\"\" nid = models.AutoField(primary_key=True) phone = models.CharField(max_length=11, null=True, unique=True) def __str__(self): return self.username 建好模型后需要在settings中配置， AUTH_USER_MODEL='app名.UserInfo' 注：一旦指定了新的表模型，之前的表模型就不能用了。 ","date":"2018-11-26","objectID":"/django-auth%E7%BB%84%E4%BB%B6/:4:2","tags":["python","django"],"title":"django-auth组件","uri":"/django-auth%E7%BB%84%E4%BB%B6/"},{"categories":["python"],"content":"django会话 可以把会话理解为客户端与服务器之间的一次会晤，在一次会话过程中有多次请求和响应，但是由于HTTP协议的特性–\u003e无状态，每次浏览器的请求都是无状态的，无法保存状态信息，也就是说后台服务器不知道当前请求是否和上一次的请求是来自同一个用户的，试想一下，淘宝京东，无法识别用户并保存用户的状态是致命的。 ","date":"2018-11-22","objectID":"/django%E4%BC%9A%E8%AF%9D/:0:0","tags":["python","django"],"title":"django会话","uri":"/django%E4%BC%9A%E8%AF%9D/"},{"categories":["python"],"content":"一、cookie的原理 为了保持连接状态，便有了cookie的由来，cookie是存储在本地服务器上的一个key-value结构的数据，类似于python中的字典，通过cookie除了可以保存连接状态，还可以保存用户信息等数据。 客户端发起请求，服务端生成cookie响应浏览器，这时客户端会将cookie保存起来，当下一次访问服务器的时候会将cookie一起发送给服务器，服务器通过cookie判断是谁的访问 注：如果服务端发送重复的cookie，会覆盖原有的cookie ","date":"2018-11-22","objectID":"/django%E4%BC%9A%E8%AF%9D/:1:0","tags":["python","django"],"title":"django会话","uri":"/django%E4%BC%9A%E8%AF%9D/"},{"categories":["python"],"content":"二、django中操作cookie ","date":"2018-11-22","objectID":"/django%E4%BC%9A%E8%AF%9D/:2:0","tags":["python","django"],"title":"django会话","uri":"/django%E4%BC%9A%E8%AF%9D/"},{"categories":["python"],"content":"1.启用会话 Django通过一个内置中间件来实现会话功能 编辑settings.py中的MIDDLEWARE设置 django.contrib.sessions.middleware.SessionMiddlewar ","date":"2018-11-22","objectID":"/django%E4%BC%9A%E8%AF%9D/:2:1","tags":["python","django"],"title":"django会话","uri":"/django%E4%BC%9A%E8%AF%9D/"},{"categories":["python"],"content":"2.配置会话引擎 1. 数据库Session SESSION_ENGINE = 'django.contrib.sessions.backends.db' # 引擎（默认） 然后运行 manage.py migrate 在数据库内创建sessions表 2. 缓存Session SESSION_ENGINE = 'django.contrib.sessions.backends.cache' # 引擎 SESSION_CACHE_ALIAS = 'default' # 使用的缓存别名（默认内存缓存，也可以是memcache），此处别名依赖缓存的设置 3. 文件Session SESSION_ENGINE = 'django.contrib.sessions.backends.file' # 引擎 SESSION_FILE_PATH = None # 缓存文件路径，如果为None，则使用tempfile模块获取一个临时地址tempfile.gettempdir() 4. 缓存+数据库 SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db' # 引擎 5. 加密Cookie Session SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies' # 引擎 其他公用设置项： SESSION_COOKIE_NAME ＝ \"sessionid\" # Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认） SESSION_COOKIE_PATH ＝ \"/\" # Session的cookie保存的路径（默认） SESSION_COOKIE_DOMAIN = None # Session的cookie保存的域名（默认） SESSION_COOKIE_SECURE = False # 是否Https传输cookie（默认） SESSION_COOKIE_HTTPONLY = True # 是否Session的cookie只支持http传输（默认） SESSION_COOKIE_AGE = 1209600 # Session的cookie失效日期（2周）（默认） SESSION_EXPIRE_AT_BROWSER_CLOSE = False # 是否关闭浏览器使得Session过期（默认） SESSION_SAVE_EVERY_REQUEST = False # 是否每次请求都保存Session，默认修改之后才保存（默认） ","date":"2018-11-22","objectID":"/django%E4%BC%9A%E8%AF%9D/:2:2","tags":["python","django"],"title":"django会话","uri":"/django%E4%BC%9A%E8%AF%9D/"},{"categories":["python"],"content":"3.在视图中操作cookie 3.1设置cookie def set_cookie(request): obj = HttpResponse('ok') #obj=render(request,...) obj.set_cookie('name', 'ABC') # obj.set_signed_cookie(key,value,salt='加密盐') obj.set_signed_cookie('name','lqz',salt='123')#加盐,123是个密码,解cookie的时候需要它, return obj 参数： key—\u003e键 value—\u003e值 max_age=None—\u003e超时时间，cookie延续的时间，以秒为单位， 超时时间expires,传一个datatime对象 path=’/',可以设置路径,设置路径之后,path=’/index/',只有访问index的时候,才会携带cookie过来 domain 设置域名下有效domain='map.baidu.com’ secure=False, (默认是false,设置成True浏览器将通过HTTPS来回传cookie) httponly=True 只能https协议传输，阻止javascript对会话数据的访问，提高安全性。（不是绝对，底层抓包可以获取到也可以被覆盖) 3.2获取cookie def get_cookie(request): print(type(request.COOKIES)) # 取cookie的值 print(request.COOKIES) name=request.COOKIES.get('name') #加盐,123是个密码,解cookie的时候需要它, # request.get_signed_cookie(key, default=RAISE_ERROR, salt='123', max_age=None) obj = HttpResponse('get_cookie') return obj 3.3删除cookie def logout(request): rep = redirect(\"/login/\") rep.delete_cookie(\"user\") # 删除用户浏览器上之前设置的usercookie值 return rep ","date":"2018-11-22","objectID":"/django%E4%BC%9A%E8%AF%9D/:2:3","tags":["python","django"],"title":"django会话","uri":"/django%E4%BC%9A%E8%AF%9D/"},{"categories":["python"],"content":"三、session cookie本身保存在客户端，可能被拦截或窃取，所以网站设计通常将Cookie用来保存一些不重要的内容，实际的用户数据和状态还是以Session会话的方式保存在服务器端。 Session就是在服务器端的‘Cookie’，Session依赖Cookie！ 给每个客户端的Cookie分配一个唯一的id，这样用户在访问时，通过Cookie，服务器就知道来的人是“谁”。然后我们再根据不同的Cookie的id，在服务器上保存一段时间的私密资料，如“账号密码”等等。 ","date":"2018-11-22","objectID":"/django%E4%BC%9A%E8%AF%9D/:3:0","tags":["python","django"],"title":"django会话","uri":"/django%E4%BC%9A%E8%AF%9D/"},{"categories":["python"],"content":"1.设置session def set_session(request): # 写session,干了三件事(每个浏览器会生成一个随机字符串) # 随机字符串是跟浏览器相关的,数据是跟账号相关的 request.session['name']='ABC' request.session['age']='18' request.session['sex']='男' ''' 非django的步骤(django已经封装了下面的操作) 1 生成随机字符串:dfasfasdfa 2 去数据库存储 随机字符串 值 (字典形式) 超时时间 dfasfasdfa {'name':'ABC','age':18,'sex':'男'} 超时时间 3 写入set_cookie(set_cookie('sessionid','dfasfasdfa')) 发送给客户端 ''' return HttpResponse('ok') ","date":"2018-11-22","objectID":"/django%E4%BC%9A%E8%AF%9D/:3:1","tags":["python","django"],"title":"django会话","uri":"/django%E4%BC%9A%E8%AF%9D/"},{"categories":["python"],"content":"2.获取session def get_session(request): # 取session 取name这个字段对应的值 name=request.session['name'] # 正常流程 非django的步骤(django已经封装了下面的操作) # 去cookie中取出随机字符串 # 去session那个表去查询,取出session_data的数据,解密成字典,然后取name的值返回 # print(name) ","date":"2018-11-22","objectID":"/django%E4%BC%9A%E8%AF%9D/:3:2","tags":["python","django"],"title":"django会话","uri":"/django%E4%BC%9A%E8%AF%9D/"},{"categories":["python"],"content":"3.删除session # 删除当前会话的所有Session数据(只删数据库) request.session.delete() # 删除当前的会话数据并删除会话的Cookie（数据库和cookie都删）。 request.session.flush() 这用于确保前面的会话数据不可以再次被用户的浏览器访问 例如，django.contrib.auth.logout() 函数中就会调用它。 ","date":"2018-11-22","objectID":"/django%E4%BC%9A%E8%AF%9D/:3:3","tags":["python","django"],"title":"django会话","uri":"/django%E4%BC%9A%E8%AF%9D/"},{"categories":["python"],"content":"四、session的相关方法 # 所有 键、值、键值对 request.session.keys() request.session.values() request.session.items() request.session.iterkeys() request.session.itervalues() request.session.iteritems() # 会话session的key request.session.session_key # 将所有Session失效日期小于当前日期的数据删除 request.session.clear_expired() # 检查会话session的key在数据库中是否存在 request.session.exists(\"session_key\") # 设置会话Session和Cookie的超时时间 request.session.set_expiry(value) * 如果value是个整数，session会在些秒数后失效。 * 如果value是个datatime或timedelta，session就会在这个时间后失效。 * 如果value是0,用户关闭浏览器session就会失效。 * 如果value是None,session会依赖全局session失效策略。 ","date":"2018-11-22","objectID":"/django%E4%BC%9A%E8%AF%9D/:4:0","tags":["python","django"],"title":"django会话","uri":"/django%E4%BC%9A%E8%AF%9D/"},{"categories":["python"],"content":"序列化会话 Django默认使用JSON序列化会话数据。你可以在SESSION_SERIALIZER设置中自定义序列化格式，甚至写入警告说明。但是强烈建议你还是使用JSON，尤其是以cookie的方式进行会话时。 ","date":"2018-11-22","objectID":"/django%E4%BC%9A%E8%AF%9D/:4:1","tags":["python","django"],"title":"django会话","uri":"/django%E4%BC%9A%E8%AF%9D/"},{"categories":["python"],"content":"多表操作 数据准备 class Publish(models.Model): id = models.AutoField(primary_key=True) name = models.CharField(max_length=32) addr=models.CharField(max_length=64) email=models.EmailField def __str__(self): return self.name class Author(models.Model): id = models.AutoField(primary_key=True) name=models.CharField(max_length=32) sex=models.IntegerField() authordetail=models.OneToOneField(to='AuthorDetail',to_field='id') def __str__(self): return self.name class AuthorDetail(models.Model): id=models.AutoField(primary_key=True) phone = models.CharField(max_length=32) addr = models.CharField(max_length=64) class Book(models.Model): id = models.AutoField(primary_key=True) name = models.CharField(max_length=32) price = models.DecimalField(max_digits=5, decimal_places=2) create_time = models.DateField(null=True) publish=models.ForeignKey(to='Publish',to_field='id') authors=models.ManyToManyField(to='Author') def __str__(self): return self.name ------------------------------------------------------- # 一对一的关系:OneToOneField 模型表的字段,后面会自定加_id # 一对多的关系:ForeignKey 模型表的字段,后面会自定加_id # 多对多的关系:ManyToManyField ManyToManyField会自动创建第三张表 ","date":"2018-11-14","objectID":"/%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/:1:0","tags":["python","django"],"title":"多表操作","uri":"/%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/"},{"categories":["python"],"content":"一、一对多 1.添加数据 方式一： pub=Publish.objects.get(pk=1) #publish=出版社的对象,存到数据库,是一个id Book.objects.create(name='金庸群侠传',price=100,create_time='2018-1-1',publish=pub) 方式二： book=Book.objects.create(name='红楼梦',price=34.5,create_time='2017-1-1',publish_id=1) #用了OneToOneField和ForeignKey,模型表的字段,后面会自定加_id 2.修改数据 方式一： #修改出版社 book=Book.object.get(pk=1) book.publish_id=2 book.save() 方式二： book=Book.objects.filter(pk=1).update(publish_id=2) 或 pub=Publish.objects.get(pk=2) book=Book.objects.filter(pk=1).update(publish=pub) 3.删除数据 同单表删除 方式一： ret=models.Book.objects.filter(name='红楼梦').delete() # ret返回的是被影响行数，queryset对象的.delete()方法 如果存在多本红楼梦将会被全部删除 方式二： ret=models.Book.objects.filter(name='红楼梦').first() ret.delete() 只删除一个 ","date":"2018-11-14","objectID":"/%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/:1:1","tags":["python","django"],"title":"多表操作","uri":"/%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/"},{"categories":["python"],"content":"二、多对多 1.添加数据 a=Author.objects.filter(name='虚竹').first() b=Author.objects.filter(name='段誉').first() book=Book.objects.filter(name='天龙八部').first() #添加过个作者对象 book.authors.add(a,b) #或者 添加多个作者id book.authors.add(1,2) 2.删除remove,可以传对象，可以传id，可以传多个，不要混着用 book.authors.remove(a) book.authors.remove(1,2) 3.clear清空所有 book.authors.clear() 4.set,先清空所有，再新增，要传一个列表，列表内可以是id，也可以是对象 book.authors.set([a,b]) ","date":"2018-11-14","objectID":"/%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/:1:2","tags":["python","django"],"title":"多表操作","uri":"/%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/"},{"categories":["python"],"content":"三、基于对象的跨表查询 基于对象的查询是子查询也就是多次查询 1.一对一 正向 author-----关联字段在author-----\u003eauthordetail------\u003e按字段 反向 authordetail-----\u003e关联字段在author----\u003eauthor------\u003e按表名小写 例子 正向查询：查询abc作者的手机号 author=Author.objects.filter(name='abc').first() authordetail=author.authordetail # author.authordetail 就是作者详情的对象----这里的authordetail是字段名 print(authordetail.phone) 反向查询：查询地址在上海的作者名字 authordetail=AuthorDetail.objects.filter(addr='上海').first() author=authordetail.author # authordetail.author 这是作者对象 print(author.name) 2.一对多 正向： book----关键字段在book---\u003epublish----\u003e按字段 反向: publish----\u003e关键字段在book---\u003ebook----\u003e按表名小写_set.all() 正向查询：查询红楼梦这本书的出版社地址 book=Book.objects.filter(name='红楼梦').first() pub=book.publish #book.publish 出版社对象 print(pub.addr) 反向查询：查询地址是上海的出版社的出版图书 pub=Publish.objects.filter(addr='上海').first() books=pub.book_set.all() 3.多对多 正向： book---关联字段在book---\u003eauthor---\u003e按字段.all() 反向： author---关联字段在book---\u003ebook----\u003e按表名小写_set.all() 正向查询：查询红楼梦这本书的所有作者 book=Book.objects.filter(name='红楼梦').first() authors=book.authors.all() 反向查询：查询B写的所有书 b=Author.objects.filter(name='B').first() books=b.book_set.all() 4.连续跨表 查询红楼梦这本书所有的作者的手机号 book=Book.objects.filter(name='红楼梦') authors=book.author.all() for author in authors: author_detail=author.authordetail print(authordetail.phone) ","date":"2018-11-14","objectID":"/%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/:1:3","tags":["python","django"],"title":"多表操作","uri":"/%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/"},{"categories":["python"],"content":"四、基于双下划线查询 1.一对一 -正向:按字段,跨表可以在filter,也可以在values中 按字段 -反向:按表名小写,跨表可以在filter,也可以在values中 按表名小写 正向查询：查询作者B的手机号 （以author表作为基表） ret=Author.object.filter(name='B').values('authordetail__phone') print(ret) 反向查询： ret=AuthorDetail.object.filter(author__name='B').values('phone') 2.一对多 正向查询： #查询出版社为北京出版社出版的所有图书的名字,价格 Book.objects.filter(publish_name='北京出版社').values('name','price') 反向查询： Publish.objects.filter(name='北京出版社').values('book_name','book_price') 3.多对多 正向查询： 查询红楼梦的所有作者名字 Book.objects.filter(name='红楼梦').values('authors_name') 反向查询： Author.objects.filter(book__name='红楼梦').values('name') 4.连续跨表 查询北京出版社出版过的所有书籍的名字以及作者的姓名 Publish.objects.filter('北京出版社').values('book__name','book_author__name') Book.object.filter(publish__name='北京出版社').values('name','author__name') ","date":"2018-11-14","objectID":"/%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/:1:4","tags":["python","django"],"title":"多表操作","uri":"/%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/"},{"categories":["python"],"content":"五、聚合查询 aggregate(*args, **kwargs) aggregate()是QuerySet 的一个终止子句,返回一个包含一些键值对的字典 可以向aggregate()子句中添加另一个参数,生成不止一个聚合 from django.db.models import Avg,Count,Max,Min,Sum #1.计算所有图书的平均价格 Book.objects.all().aggregate(Avg('price'),Max('price')) ","date":"2018-11-14","objectID":"/%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/:1:5","tags":["python","django"],"title":"多表操作","uri":"/%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/"},{"categories":["python"],"content":"六、分组查询 annotate()为调用的QuerySet中每个对象生成独立的统计值。跨表分组查询本质就是将关联表join成一张表，再按单表的思路进行分组查询 #统计每一本书作者个数 Book.objects.all().annotate(s=Count('author')).values('name','c') #查询所有作者写的书的总价格大于30的作者 Author.objects.value('pk')annotate(s=Sum('book_price')).filter(s_gt=30).values('name','s') 或者 Author.objects.annotate(s=Sum('book_price)).filter(s_gt=30).values('name''s') #默认按id主键分组 注： values在annotate前表示分组，在后表示取值 filter在annotate前表示where条件，在后表示having ","date":"2018-11-14","objectID":"/%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/:1:6","tags":["python","django"],"title":"多表操作","uri":"/%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/"},{"categories":["python"],"content":"七、F查询 对两个字段的值做比较 F() 的实例可以在查询中引用字段，来比较同一个 model 实例中两个不同字段的值。 例如book的model中再添加两个字段，评论数和阅读数. 查询评论数大于阅读数的书 ret=Book.objects.all().filter(commit_num__gt=read_num) #错误 正确如下： ret=Book.objects.all().filter(commit_num_gt=F('read_num')) 把所有书的评论数加1 ret=Book.objects.all().update(commit_num=F('commit_num')+1) ","date":"2018-11-14","objectID":"/%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/:1:7","tags":["python","django"],"title":"多表操作","uri":"/%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/"},{"categories":["python"],"content":"八、Q查询 filter()等方法进行的是'AND'，更复杂的查询需要Q查询 表示与\u0026 ,或 | ,非 ~ #查询是作者A也或者是作者B的书 Book.object.all().filter(Q(author_name='A')|Q(author_name='B')) 补充： Blog.objects.filter(entry__headline__contains='Lennon').filter(entry__pub_date__year=2008) 把两个参数拆开，放在两个filter调用里面，Django在这种情况下，将两个filter之间的关系设计为-或“or” ","date":"2018-11-14","objectID":"/%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/:1:8","tags":["python","django"],"title":"多表操作","uri":"/%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/"},{"categories":["python"],"content":"ORM字段参数及单表操作 ","date":"2018-11-12","objectID":"/django-orm-%E5%8D%95%E8%A1%A8%E6%93%8D%E4%BD%9C/:1:0","tags":["python","django"],"title":"Django-ORM-单表操作","uri":"/django-orm-%E5%8D%95%E8%A1%A8%E6%93%8D%E4%BD%9C/"},{"categories":["python"],"content":"一、字段参数 1.字段 AutoField(Field) #当model中如果没有自增列，则会自动创建一个列名为id的列 -int 自增列，必须填入参数primary_key=True SmallIntegerField(IntegerField): - 小整数 -32768 ～ 32767 PositiveSmallIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField) - 正小整数 0 ～ 32767 IntegerField(Field) - 整数列(有符号的) -2147483648 ～ 2147483647 PositiveIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField) - 正整数 0 ～ 2147483647 BigIntegerField(IntegerField): - 长整型(有符号的) -9223372036854775808 ～ 9223372036854775807 BooleanField(Field) - 布尔值类型 NullBooleanField(Field): - 可以为空的布尔值 CharField(Field) - 字符类型 - 必须提供max_length参数， max_length表示字符长度 TextField(Field) - 文本类型 EmailField(CharField)： - 字符串类型，Django Admin以及ModelForm中提供验证机制 IPAddressField(Field) - 字符串类型，Django Admin以及ModelForm中提供验证 IPV4 机制 GenericIPAddressField(Field) - 字符串类型，Django Admin以及ModelForm中提供验证 Ipv4和Ipv6 - 参数： protocol，用于指定Ipv4或Ipv6， 'both',\"ipv4\",\"ipv6\" unpack_ipv4， 如果指定为True，则输入::ffff:192.0.2.1时候，可解析为192.0.2.1，开启刺功能，需要protocol=\"both\" URLField(CharField) - 字符串类型，Django Admin以及ModelForm中提供验证 URL SlugField(CharField) - 字符串类型，Django Admin以及ModelForm中提供验证支持 字母、数字、下划线、连接符（减号） CommaSeparatedIntegerField(CharField) - 字符串类型，格式必须为逗号分割的数字 UUIDField(Field) - 字符串类型，Django Admin以及ModelForm中提供对UUID格式的验证 FilePathField(Field) - 字符串，Django Admin以及ModelForm中提供读取文件夹下文件的功能 - 参数： path, 文件夹路径 match=None, 正则匹配 recursive=False, 递归下面的文件夹 allow_files=True, 允许文件 allow_folders=False, 允许文件夹 FileField(Field) - 字符串，路径保存在数据库，文件上传到指定目录 - 参数： upload_to = \"\" 上传文件的保存路径 storage = None 存储组件，默认django.core.files.storage.FileSystemStorage ImageField(FileField) - 字符串，路径保存在数据库，文件上传到指定目录 - 参数： upload_to = \"\" 上传文件的保存路径 storage = None 存储组件，默认django.core.files.storage.FileSystemStorage width_field=None, 上传图片的高度保存的数据库字段名（字符串） height_field=None 上传图片的宽度保存的数据库字段名（字符串） DateTimeField(DateField) - 日期+时间格式 YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ] DateField(DateTimeCheckMixin, Field) - 日期格式 YYYY-MM-DD TimeField(DateTimeCheckMixin, Field) - 时间格式 HH:MM[:ss[.uuuuuu]] DurationField(Field) - 长整数，时间间隔，数据库中按照bigint存储，ORM中获取的值为datetime.timedelta类型 FloatField(Field) - 浮点型 DecimalField(Field) - 10进制小数 - 参数： max_digits，小数总长度 decimal_places，小数位长度 BinaryField(Field) - 二进制类型 2.参数 1.null 如果未True,Django将用NULL来在数据库中存储空值，默认为false 2.blank 如果未True，该字段允许为空，默认为False。 注：与null不同。null是数据库范畴，blank是数据验证 3.default 字段默认值 4.primary_key 如果未True，那么这个字段就是模型的主键。如果没有指定，Django会自动添加一个IntegerField字段作为主键 5.unique 该字段的值在表中唯一 6.choices 由二元组组成的一个可迭代对象（例如，列表或元组），用来给字段提供选择项。 如果设置了choices ，默认的表单将是一个选择框而不是标准的文本框，\u003cbr\u003e而且这个选择框的选项就是choices 中的选项。 补充： 数据库迁移记录都在 app下的migrations里 使用showmigrations命令可以查看没有执行migrate的文件 makemigrations是生成一个文件，migrate是将更改提交到数据量 ","date":"2018-11-12","objectID":"/django-orm-%E5%8D%95%E8%A1%A8%E6%93%8D%E4%BD%9C/:1:1","tags":["python","django"],"title":"Django-ORM-单表操作","uri":"/django-orm-%E5%8D%95%E8%A1%A8%E6%93%8D%E4%BD%9C/"},{"categories":["python"],"content":"二、单表操作 1.添加表记录 方式一：返回结果是一个对象 # create方法的返回值book_obj就是插入book表中的红楼梦这本书籍纪录对象 book_obj=models.Book.objects.create(name='红楼梦',price=23.8,publish='人民出版社',author='曹雪芹',create_data='2018-09-17') 方式二：先实例化产生对象，然后调用save方法保存 book_obj=models.Book(name='水浒传',price=99,publish='清华出版社',author='施耐庵',create_data='2017-09-17') book_obj.save() 2.删除表记录 删除前要先查询 方式一： ret=models.Book.objects.filter(name='红楼梦').delete() # ret返回的是被影响行数，queryset对象的.delete()方法 如果存在多本红楼梦将会被全部删除 方式二： ret=models.Book.objects.filter(name='红楼梦').first() ret.delete() 只删除一个 3.修改表记录 方式一： ret=models.Book.objects.filter(name='红楼梦').update(price=20.9) 方式二： 对象没有update方法，但是可以用save来修改 book=models.Book.objects.filter(name='红楼梦').first() book.price=33 book.save() 4.查询表记录 1.all() 查询所有结果 models.Book.objects.all() 2.filter(**kwargs) 指定条件查询 filter内可传多个参数，逗号分隔，他们之间是and关系 models.Book.objects.filter(name='红楼梦').first() 或者models.Book.objects.filter(name='红楼梦')[0] 注：不支持负数 3.get(**kwargs) 有且只有一个结果,返回的是对象，不是queryset对象，通常使用id查询 ret=Book.objects.get(name='红楼梦') 不存在或超过一个会报错 4.exclude(**kwargs) 返回与筛选对象不匹配的对象 models.Book.objects.exclude(price\u003e40) 5.order_by() 对查询结果排序 models.Book.objects.all().order_by('price') 默认升序 倒序：models.Book.objects.all().order_by('-price') 可以传多个参数，逗号隔开。 6.reverse() 对查询结果反向排序 7.count()查询结果的个数 8.first()返回第一条记录 last()返回最后一条记录 9.exists()如果queryset包含数据就返回True，否则返回False models.Book.objects.filter(name='红楼梦').exists() 10.values() queryset对象里套字典 11.values_list() 返回元组序列，values返回的是一个字典序列 12.distinct()从结果中剔除重复记录 ----------------------------------------------------------- 基于双下划线的模糊查询 1.大于__gt models.Book.objects.filter(price__gt='89') 2.小于__lt= models.Book.objects.filter(price__lt='99') 3.小于等于__lte= models.Book.objects.filter(price__lte='99') 4.大于等于__gte models.Book.objects.filter(price__gte='89') 5.in在XX中 ret=models.Book.objects.filter(price__in=['23.8','89','100']) 6.range 在xx范围内 between and ret=models.Book.objects.filter(price__range=[50,100]) 7.contains 查询名字带有 红 字的书 models.Book.objects.filter(name__contains='红') 8.icontains 查询名字带p的书，忽略大小写 models.Book.objects.filter(name__icontains='P') 9.startswith 以XX开头 models.Book.objects.filter(name__startswith='红') 10.endwith 以xx结尾 models.Book.objects.filter(name__endwith='梦') 11.__year按年查询 models.Book.objects.filter(create_data_year='2018') ","date":"2018-11-12","objectID":"/django-orm-%E5%8D%95%E8%A1%A8%E6%93%8D%E4%BD%9C/:1:2","tags":["python","django"],"title":"Django-ORM-单表操作","uri":"/django-orm-%E5%8D%95%E8%A1%A8%E6%93%8D%E4%BD%9C/"},{"categories":["python"],"content":"模板层 将Python嵌入到HTML中。 ","date":"2018-11-12","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/:1:0","tags":["python","django"],"title":"django学习笔记-模板层","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/"},{"categories":["python"],"content":"模板简介 将HTML硬解码到视图并不是那么完美原因如下： 对页面设计时也需要对python代码进行相应的修改，模板可以不就行python代码修改的情况下变更设计。 编写python和HTML设计是两项不同的工作，应该明确分工。 两项同时进行效率最高。 模板：HTML代码+模板语法 def current_time(req): # ================================原始的视图函数 # import datetime # now=datetime.datetime.now() # html=\"\u003chtml\u003e\u003cbody\u003e现在时刻：\u003ch1\u003e%s.\u003c/h1\u003e\u003c/body\u003e\u003c/html\u003e\" %now # return HttpResponse(html) #另一种写法(推荐) import datetime now=datetime.datetime.now() return render(req, 'current_datetime.html', {'current_date':str(now)[:19]}) 模板语法的重点： 变量：{{ 变量名 }} 1.深度查询用句点符 2.过滤器 标签：{% %} ","date":"2018-11-12","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/:1:1","tags":["python","django"],"title":"django学习笔记-模板层","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/"},{"categories":["python"],"content":"二、模板语言的注释 {# this won't be rendered #} 单行注释 注释多行使用comment标签 ","date":"2018-11-12","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/:2:0","tags":["python","django"],"title":"django学习笔记-模板层","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/"},{"categories":["python"],"content":"三、模板语法之变量 在django模板中遍历复杂数据结构的关键是句点字符，语法：{{ 变量名 }}。变量类似于python中的变量。 变量的命名包括任何字母数字以及下划线(\"_\")的组合。点(\".\")也有可能会在变量名中出现，不过它有特殊的含义。最重要的是，变量名称中不能有空格或标点符号。 views.py: name='abc' age=18 li=[1,2,'3','4'] dic={'name':'abc','age':18,''li:[1,2,4]} def test(): #函数 print('abc') return 'abchahahah' class Person(): def __init__(self,name,age) self.name=name self.age=age def get_name(self): return self.name @classmethod def cls_test(cls): return 'cls' @staticmethod def static_test(): return 'static' --------- # 模板里不支持带参数 def get_name_cs(self,ttt): return self.name ---------- zfj=Person('zfj',18) qer=Person('qwe',28) person_list=[zfj,qwe] html： 相当于print了该变量 \u003cp\u003e字符串:{{ name }}\u003c/p\u003e \u003cp\u003e数字:{{ age }}\u003c/p\u003e \u003cp\u003e列表:{{ li }}\u003c/p\u003e \u003cp\u003e元祖:{{ tu }}\u003c/p\u003e \u003cp\u003e字典:{{ dic }}\u003c/p\u003e \u003cp\u003e函数:{{ test }}\u003c/p\u003e {#只写函数名:相当于函数名(),返回函数执行结果#} \u003cp\u003e对象:{{ zfj }}\u003c/p\u003e {#对象内存地址#} 深度查询： \u003cp\u003e列表第1个值:{{ ll.0 }}\u003c/p\u003e \u003cp\u003e列表第4个值:{{ ll.3 }}\u003c/p\u003e \u003cp\u003e字典取值:{{ dic.name }}\u003c/p\u003e \u003cp\u003e字典取列表值:{{ dic.li }}\u003c/p\u003e \u003cp\u003e对象取数据属性:{{ zfj.name }}\u003c/p\u003e \u003cp\u003e对象取绑定给对象的函数属性:{{ zfj.get_name }}\u003c/p\u003e \u003cp\u003e对象取绑定给类的函数属性:{{ zfj.cls_test }}\u003c/p\u003e \u003cp\u003e对象取静态方法:{{ zfj.static_test }}\u003c/p\u003e ","date":"2018-11-12","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/:3:0","tags":["python","django"],"title":"django学习笔记-模板层","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/"},{"categories":["python"],"content":"四、模板语言之过滤器 语法： {{变量名|过滤器名称：属性值}} 过滤器可以“链接”，一个过滤器的输出应用于下一个过滤器{{text|escape|linebreaks}},先转移文本内容，然后把文本转成\u003cp\u003e标签。 注：过滤器参数包含空格，必须用引号抱起来。 ","date":"2018-11-12","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/:4:0","tags":["python","django"],"title":"django学习笔记-模板层","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/"},{"categories":["python"],"content":"1.过滤器总览 过滤器 说明 add 加法 addslashes 添加斜杠 capfirst 首字母大写 center 文本居中 cut 切除字符 date 日期格式化 default 设置默认值 default_if_none 为None设置默认值 dictsort 字典排序 dictsortreversed 字典反向排序 divisibleby 整除判断 escape 转义 escapejs 转义js代码 filesizeformat 文件尺寸人性化显示 first 第一个元素 floatformat 浮点数格式化 force_escape 强制立刻转义 get_digit 获取数字 iriencode 转换IRI join 字符列表链接 last 最后一个 length 长度 length_is 长度等于 linebreaks 行转换 linebreaksbr 行转换 linenumbers 行号 ljust 左对齐 lower 小写 make_list 分割成字符列表 phone2numeric 电话号码 pluralize 复数形式 pprint 调试 random 随机获取 rjust 右对齐 safe 安全确认 safeseq 列表安全确认 slice 切片 slugify 转换成ASCII stringformat 字符串格式化 striptags 去除HTML中的标签 time 时间格式化 timesince 从何时开始 timeuntil 到何时多久 title 所有单词首字母大写 truncatechars 截断字符 truncatechars_html 截断字符 truncatewords 截断单词 truncatewords_html 截断单词 unordered_list 无序列表 upper 大写 urlencode 转义url urlize url转成可点击的链接 urlizetrunc urlize的截断方式 wordcount 单词计数 wordwrap 单词包裹 yesno 将True，False和None，映射成字符串‘yes’，‘no’，‘maybe’ ","date":"2018-11-12","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/:4:1","tags":["python","django"],"title":"django学习笔记-模板层","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/"},{"categories":["python"],"content":"2.常用过滤器 default 如果变量是false或者为空，则使用给定的默认值。 {{ value|default:'nothing'}} length 返回值的长度，对字符串和列表都起作用 {{ value|length}} 如果value是[1,2,3,4],那么输出是4 filesizeformat 将值格式化成'人类可读的'文件尺寸。例如： {{1024|filesizeformat}} 输出为1kb date 如果value=datetime.datetime.now() {{ value|date:\"Y-m-d\"}} slice 切片 {{ name|slice:'0:3:3' }} truncatechars 如果字符串多余指定字符数量，多余会被截断，替换成(\"…\")结尾。 {{ value|truncatechars:9}} safe Django模板为了安全默认会对HTML标签和js等语法标签进行转义，有时候我们不希望这些元素被转义，可以通过设置过滤器。 script=\"'\u003cscript\u003ealert(111)\u003c/script\u003e\" {{ script|safe }} ","date":"2018-11-12","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/:4:2","tags":["python","django"],"title":"django学习笔记-模板层","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/"},{"categories":["python"],"content":"五、模板之标签 一些在输出中创建文本，一些通过循环或逻辑来控制流程，一些加载其后的变量将使用到的额外信息到模版中。一些标签需要开始和结束标签 （例如{% tag %} ...标签 内容 ... {% endtag %}）。 {% tag %} ","date":"2018-11-12","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/:5:0","tags":["python","django"],"title":"django学习笔记-模板层","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/"},{"categories":["python"],"content":"1.内置标签总览 标签 说明 autoescape 自动转义开关 block 块引用 comment 注释 csrf_token CSRF令牌 cycle 循环对象的值 debug 调试模式 extends 继承模版 filter 过滤功能 firstof 输出第一个不为False的参数 for 循环对象 for … empty 带empty说明的循环 if 条件判断 ifequal 如果等于 ifnotequal 如果不等于 ifchanged 如果有变化，则.. include 导入子模版的内容 load 加载标签和过滤器 lorem 生成无用的废话 now 当前时间 regroup 根据对象重组集合 resetcycle 重置循环 spaceless 去除空白 templatetag 转义模版标签符号 url 获取url字符串 verbatim 禁用模版引擎 widthratio 宽度比例 with 上下文变量管理器 ","date":"2018-11-12","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/:5:1","tags":["python","django"],"title":"django学习笔记-模板层","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/"},{"categories":["python"],"content":"2.常用标签 for标签 遍历每一个元素 {% for person in person_list %}\u003cp\u003e{{ person }}\u003c/p\u003e {% end for%} 遍历一个字典： {% for k,v in dic.items %} \u003cp\u003e{{ k }}:{{ v }}\u003c/p\u003e 下面是Django为for标签内置的一些属性，可以当作变量一样使用{{ }}在模版中使用。 forloop.counter：循环的当前索引值，从1开始计数；常用于生成一个表格或者列表的序号！ forloop.counter0：循环的当前索引值，从0开始计数； forloop.revcounter： 循环结束的次数（从1开始） forloop.revcounter0 循环结束的次数（从0开始） forloop.first：判断当前是否循环的第一次，是的话，该变量的值为True。我们经常要为第一行加点特殊的对待，就用得上这个判断了，结合if。 forloop.last：如果这是最后一次循环，则为真 forloop.parentloop：对于嵌套循环，返回父循环所在的循环次数。某些场景下，这是个大杀器，能解决你很多头疼的问题。 for…empty for标签带有一个可选的{% empty %}从句，在给出的组是空的或者没有被找到时执行的操作 注：循环的对象是空，才会走到empty,而不是对象里面的东西为空 {% for person in person_list %}\u003cp\u003e{{ person.name }}\u003c/p\u003e {% empty %}\u003cp\u003esorry,no person here\u003c/p\u003e {% endfor %} if {% if %}会对一个变量求值，如果它的值是“True”（存在、不为空、且不是boolean类型的false值），对应的内容块会输出。 {% if num \u003e 100 or num \u003c 0 %}\u003cp\u003e无效\u003c/p\u003e {% elif num \u003e 80 and num \u003c 100 %}\u003cp\u003e优秀\u003c/p\u003e {% else %}\u003cp\u003e凑活吧\u003c/p\u003e {% endif %} 注：在if标签中使用括号是错误的语法，这点不同于Pythonif语句支持 ，优先级可以使用if嵌套。if支持and 、or、==、\u003e、\u003c、!=、\u003c=、\u003e=、in、not in、is、is not判断。 with 使用一个简单地名字缓存一个复杂的变量，当你需要使用一个“昂贵的”方法（比如访问数据库）很多次的时候是非常有用的 {% with total=business.employees.count %}{{ total }}employee{{ total|pluralize }}{% endwith %} ","date":"2018-11-12","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/:5:2","tags":["python","django"],"title":"django学习笔记-模板层","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/"},{"categories":["python"],"content":"六、自定义标签和过滤器 Django为我们提供了自定义的机制，可以通过使用Python代码，自定义标签和过滤器来扩展模板引擎，然后使用{% load %}标签。 ","date":"2018-11-12","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/:6:0","tags":["python","django"],"title":"django学习笔记-模板层","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/"},{"categories":["python"],"content":"（一）、前置步骤 在settings中的INSTALLED_APPS配置当前app，不然django无法找到自定义的simple_tag. 在app中新建一个templatetags包(名字固定)，与views.py、models.py等文件在同一目录下 注：添加templatetags包后，需要重新启动服务器，然后才能在模板中使用标签或过滤器 创建任意 .py 文件，如：my_tags.py 要在模块内自定义标签，首先，这个模块必须包含一个名为register的变量，它是template.Library的一个实例，所有的标签和过滤器都是在其中注册的。 所以把如下的内容放在你的模块的顶部： from django.template import Library register = Library() templatetags包中放多少个模块没有限制。只需要记住{% load xxx %}将会载入给定模块名中的标签/过滤器，而不是app中所有的标签和过滤器。 ","date":"2018-11-12","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/:6:1","tags":["python","django"],"title":"django学习笔记-模板层","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/"},{"categories":["python"],"content":"（二）、自定义模板过滤器 1.编写过滤器 自定义过滤器就是一个带有一个或两个参数的python函数 注：函数的第一个参数是要过滤的对象，第二个是自定义参数，函数一共只能有两个参数。 变量的值：不一定是字符串形式 可以有一个初始值，或者不需要这个参数 例子： def filter_multi(v1,v2): return v1 * v2 2.注册过滤器 定义好过滤器函数之后，需要注册，方法是调用register.filter register.filter('filter_multi',filter_multi) Library.filter()方法需要两个参数： 过滤器的名称：一个字符串对象 编译的函数 :你刚才写的过滤器函数 还可以把register.filter()用作装饰器，以如下的方式注册过滤器： @register.filter(name='yyy') 注：没有声明name参数，Django将使用函数名作为过滤器的名字。 3.过滤器的使用方法 在要使用自定义过滤器的模板中导入创建的py文件。 语法：{% load 文件名 %} 要使用的地方。{{'abc'|yyy:'qwe'}} 结果输出abcqwe ","date":"2018-11-12","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/:6:2","tags":["python","django"],"title":"django学习笔记-模板层","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/"},{"categories":["python"],"content":"（三）、自定义模板标签 除了装饰器，其它步骤与自定义过滤器相似。 @register.simple_tag() 过滤器只能有两个参数，自定义标签可以传多个值，空格传值。 注：过滤器可以用在if判断中，标签不能 ","date":"2018-11-12","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/:6:3","tags":["python","django"],"title":"django学习笔记-模板层","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/"},{"categories":["python"],"content":"七、模板继承 模版继承可以让您创建一个基本的“骨架”模版，它包含您站点中的全部元素，并且可以定义能够被子模版覆盖的 blocks 。 ","date":"2018-11-12","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/:7:0","tags":["python","django"],"title":"django学习笔记-模板层","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/"},{"categories":["python"],"content":"1.模板导入 语法：{% include'模板名称’ %} 如：{% include ‘base.html’ %} \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003clink rel=\"stylesheet\" href=\"style.css\"/\u003e \u003ctitle\u003e{% block title %}My amazing site{% endblock %}\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id=\"sidebar\"\u003e {% block sidebar %} \u003cul\u003e \u003cli\u003e\u003ca href=\"/\"\u003eHome\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/blog/\"\u003eBlog\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e {% endblock %} \u003c/div\u003e \u003cdiv id=\"content\"\u003e {% block content %}{% endblock %} \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e 它定义了一个可以用于两列排版页面的简单HTML骨架。“子模版”的工作是用它们的内容填充空的blocks。 ","date":"2018-11-12","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/:7:1","tags":["python","django"],"title":"django学习笔记-模板层","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/"},{"categories":["python"],"content":"2.子模板中使用 语法: {% block名字 %} 子模板的内容 {% endblock %} {% block content %} \u003cp\u003e这是子的区域\u003c/p\u003e \u003cp\u003e这是子的区域\u003c/p\u003e \u003cp\u003e这是子的区域\u003c/p\u003e \u003cp\u003e这是子的区域\u003c/p\u003e {% endblock content%} 注： 如果在模板中使用{% extends %}标签，它必须是模板中的第一个标签 在base模板中设置越多的{% block %}标签越好，子模板不必定义全部父模板中的blocks 如果发现有大量的模板存在重复内容，可以定义在父模板的{% block %}中。 不能再一个模板中定义多个相同名字的block标签 为了更好的可读性，可以给{% endblock %}设置一个名字 {% block content %}{% endblock content%} ","date":"2018-11-12","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/:7:2","tags":["python","django"],"title":"django学习笔记-模板层","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/"},{"categories":["python"],"content":"八、静态文件相关 写死静态文件: 使用 static标签函数: {% load static %} \u003clink rel=\"stylesheet\" href=\"{% static 'css/mycss.css' %}\"\u003e 使用get_static_prefix 标签 {% load static %} \u003clink rel=\"stylesheet\" href=\"{% get_static_prefix %}css/mycss.css\"\u003e ","date":"2018-11-12","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/:8:0","tags":["python","django"],"title":"django学习笔记-模板层","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/"},{"categories":["python"],"content":"视图层(view) ​ 视图函数，简称视图，本质上是一个简单的Python函数，它接受Web请求并且返回Web响应。响应的内容可以是HTML网页，重定向，404错误，图片等任何东西，但本质是返回响应对象HttpResponse。 ​ 视图函数的代码写哪里都可以，但一般约定俗成设置在项目或应用程序目录中的views.py文件中 视图案例： from django.shortcuts import render, HttpResponse, HttpResponseRedirect, redirect import datetime def current_datetime(request): now = datetime.datetime.now() html = \"\u003chtml\u003e\u003cbody\u003eIt is now %s.\u003c/body\u003e\u003c/html\u003e\" % now return HttpResponse(html) 解析： 从 django.shortcuts模块导入了HttpResponse类，以及Python的datetime库。 定义了current_datetime函数。它就是视图函数。每个视图函数都使用HttpRequest对象作为第一个参数，并且通常称之为request。 视图函数的名字能反映除它的功能即可 视图函数最后返回HttpResponse对象，其中包含生成的响应。每个视图函数都负责返回一个HttpResponse对象。 ","date":"2018-11-08","objectID":"/django-%E8%A7%86%E5%9B%BE%E5%B1%82view/:1:0","tags":["python","django"],"title":"Django-视图层(view)","uri":"/django-%E8%A7%86%E5%9B%BE%E5%B1%82view/"},{"categories":["python"],"content":"一、HttpRequest对象 请求对象(request)的属性： django将请求报文中的请求行、首部信息、内容主题封装成HttpRequest类中的属性。除特殊说明外，其他均为只读 1. request.POST # 前台Post传过来的数据,包装到POST字典中 2. request.GET # 前台浏览器窗口里携带的数据,包装到GET字典中 3. request.method # 前台请求的方式 4. request.body # post提交的数据,body体的内容,前台会封装成:name=lqz\u0026age=18\u0026sex=1 5. request.path # 取出请求的路径,取不到数据部分 6. request.encoding #一个字符串，表示提交的数据的编码方式,默认'utf-8' 7. request.META #一个标准的Python 字典，包含所有的HTTP 首部 CONTENT_LENGTH —— 请求的正文的长度（是一个字符串）。 CONTENT_TYPE —— 请求的正文的MIME 类型。 HTTP_ACCEPT —— 响应可接收的Content-Type。 HTTP_ACCEPT_ENCODING —— 响应可接收的编码。 HTTP_ACCEPT_LANGUAGE —— 响应可接收的语言。 HTTP_HOST —— 客服端发送的HTTP Host 头部。 HTTP_REFERER —— Referring 页面。 HTTP_USER_AGENT —— 客户端的user-agent 字符串。 QUERY_STRING —— 单个字符串形式的查询字符串（未解析过的形式）。 REMOTE_ADDR —— 客户端的IP 地址。 REMOTE_HOST —— 客户端的主机名。 REMOTE_USER —— 服务器认证后的用户。 REQUEST_METHOD —— 一个字符串，例如\"GET\" 或\"POST\"。 SERVER_NAME —— 服务器的主机名。 SERVER_PORT —— 服务器的端口（是一个字符串）。 -------------------------------- 除CONTENT_LENGTH 和 CONTENT_TYPE 之外，请求中的任何 HTTP 首部转换为 META 的键时， 都会将所有字母大写并将连接符替换为下划线最后加上 HTTP_ 前缀。 --------------------------------- 8. request.FILES #包含所有的上传文件信息。 9. request.COOKIES #字典格式，键和只都是字符串，包含所有的cookie 10. request.session #当前会话，只有当django启用会话时才可用 11. request.user(用户认证组件) 一个 AUTH_USER_MODEL 类型的对象，表示当前登录的用户。 如果用户当前没有登录，user 将设置为 django.contrib.auth.models.AnonymousUser 的一个实例。 你可以通过 is_authenticated() 区分它们。 例如： if request.user.is_authenticated(): # Do something for logged-in users. else: # Do something for anonymous users. user 只有当Django 启用 AuthenticationMiddleware 中间件时才可用。 ----------------------------------------------------------------------------- 匿名用户 class models.AnonymousUser django.contrib.auth.models.AnonymousUser 类实现了django.contrib.auth.models.User 接 口，但具有下面几个不同点： id 永远为None。 username 永远为空字符串。 get_username() 永远返回空字符串。 is_staff 和 is_superuser 永远为False。 is_active 永远为 False。 groups 和 user_permissions 永远为空。 is_anonymous() 返回True 而不是False。 is_authenticated() 返回False 而不是True。 set_password()、check_password()、save() 和delete() 引发 NotImplementedError。 New in Django 1.8: 新增 AnonymousUser.get_username() 以更好地模拟 django.contrib.auth.models.User。 **注：**FILES 只有在请求的方法为POST 且提交的 带有enctype=\"multipart/form-data” 的情况下才会 包含数据。否则，FILES 将为一个空的类似于字典的对象。 request的常用方法： 1. request.get_full_path() 取出请求的路径,能取到数据部分,request.path取不到数据 2. request.is_ajax() 如果请求是通过XMLHttpRequest生成的，则返回True。这个方法的作用就是判断，当前请求是否通过ajax机制发送过来的。 3. request.is_secure() 如果使用的是Https，则返回True，表示连接是安全的。 ","date":"2018-11-08","objectID":"/django-%E8%A7%86%E5%9B%BE%E5%B1%82view/:1:1","tags":["python","django"],"title":"Django-视图层(view)","uri":"/django-%E8%A7%86%E5%9B%BE%E5%B1%82view/"},{"categories":["python"],"content":"二、HttpResponse对象 响应对象主要有三种形式： HttpResponse() render() redirect() 1.HttpResponse HttpResponse()括号内直接跟一个具体的字符串作为响应体。 2.render render(request,template_name,[,context]) 结合一个 参数： request：用于生成响应的请求对象。 template_name：要使用的模板名称。 context：添加到模板上下文的一个字典。默认空字典，如果字典中某个值是可调用的，视图将在渲染模板前调用它。 render方法就是将一个模板页面中的模板语法进行渲染，最终渲染成一个html页面作为响应体。 3.redirect 传递要重定向的一个硬编码的URL def my_view(request): ... return redirect('some/url') 也可以是一个完整的URL： def my_view(request): ... return redirect('http://www.baidu.com') 重定向301和302的区别 1）301和302的区别。 301和302状态码都表示重定向，就是说浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址，这个地址可以从响应的Location首部中获取 （用户看到的效果就是他输入的地址A瞬间变成了另一个地址B）——这是它们的共同点。 他们的不同在于。301表示旧地址A的资源已经被永久地移除了（这个资源不可访问了），搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址； 302表示旧地址A的资源还在（仍然可以访问），这个重定向只是临时地从旧地址A跳转到地址B，搜索引擎会抓取新的内容而保存旧的网址。 SEO302好于301 2）重定向原因： （1）网站调整（如改变网页目录结构）； （2）网页被移到一个新地址； （3）网页扩展名改变(如应用需要把.php改成.Html或.shtml)。 这种情况下，如果不做重定向，则用户收藏夹或搜索引擎数据库中旧地址只能让访问客户得到一个404页面错误信息，访问流量白白丧失；再者某些注册了多个域名的 网站，也需要通过重定向让访问这些域名的用户自动跳转到主站点等。 ","date":"2018-11-08","objectID":"/django-%E8%A7%86%E5%9B%BE%E5%B1%82view/:1:2","tags":["python","django"],"title":"Django-视图层(view)","uri":"/django-%E8%A7%86%E5%9B%BE%E5%B1%82view/"},{"categories":["python"],"content":"三、JsonResponse对象 向前端返回一个json格式字符串的两种方式 # 第一种方式 # import json # data={'name':'lqz','age':18} # data1=['lqz','egon'] # return HttpResponse(json.dumps(data1)) # 第二种方式 from django.http import JsonResponse # data = {'name': 'lqz', 'age': 18} data1 = ['lqz', 'egon'] # return JsonResponse(data) return JsonResponse(data1,safe=False) ","date":"2018-11-08","objectID":"/django-%E8%A7%86%E5%9B%BE%E5%B1%82view/:1:3","tags":["python","django"],"title":"Django-视图层(view)","uri":"/django-%E8%A7%86%E5%9B%BE%E5%B1%82view/"},{"categories":["python"],"content":"四、CBV和FBV CBV是基于类的视图(Class base view)和FBV基于函数的视图(Function base view) from django.views import View class AddPublish(View): def dispatch(self, request, *args, **kwargs): print(request) print(args) print(kwargs) # 可以写类似装饰器的东西，在前后加代码 obj=super().dispatch(request, *args, **kwargs) return obj def get(self,request): return render(request,'index.html') def post(self,request): request return HttpResponse('post') ","date":"2018-11-08","objectID":"/django-%E8%A7%86%E5%9B%BE%E5%B1%82view/:1:4","tags":["python","django"],"title":"Django-视图层(view)","uri":"/django-%E8%A7%86%E5%9B%BE%E5%B1%82view/"},{"categories":["python"],"content":"五、简单文件上传 def fileupload(request): if request.method=='GET': return render(request,'fileupload.html') if request.method=='POST': # FILES print(request.FILES) print(type(request.FILES.get('myfile'))) # 从字典里根据名字,把文件取出来 myfile=request.FILES.get('myfile') from django.core.files.uploadedfile import InMemoryUploadedFile # 文件名字 name=myfile.name # 打开文件,把上传过来的文件存到本地 with open(name,'wb') as f: # for line in myfile.chunks(): for line in myfile: f.write(line) return HttpResponse('ok') ","date":"2018-11-08","objectID":"/django-%E8%A7%86%E5%9B%BE%E5%B1%82view/:1:5","tags":["python","django"],"title":"Django-视图层(view)","uri":"/django-%E8%A7%86%E5%9B%BE%E5%B1%82view/"},{"categories":["python"],"content":"Django-路由控制 ","date":"2018-11-07","objectID":"/django-%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6/:1:0","tags":["python","django"],"title":"Django-路由控制","uri":"/django-%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6/"},{"categories":["python"],"content":"一、URL路由基础 URL是web服务的路口，用户通过浏览器发送过来的任何请求都会被发送到一个指定的URL地址里，然后被响应。 在django项目中编写路由就是向外暴露我们接收哪些URL的请求，除此之外任何的URL都不会被处理，URL路由就是web服务对外暴露的API ","date":"2018-11-07","objectID":"/django-%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6/:1:1","tags":["python","django"],"title":"Django-路由控制","uri":"/django-%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6/"},{"categories":["python"],"content":"二、Django处理请求 确定要使用的URLconf模块，通常是settings中ROOT_URLCONF设置的值，如果传入的HttpRequest对象具有urlconf属性(中间件设置)，则使用其值代替settings中ROOT_URLCONF Django加载模块并查找可用的urlpatterns,它是django.conf.urls.url()实例的一个列表 按顺序运行每个URL模式，匹配成功就停下来，所以顺序很关键 匹配成功导入给定的视图，它是一个python函数，或基于类的视图，视图将获得如下参数 一个HttpRequest实例 如果匹配的正则表达式返回了无名分组，那么它将作为位置参数提供给视图 关键字参数由正则的有名分组组成，但是可以被django.conf.urls.url()的可选参数kwargs覆盖 如果没有URL模式匹配，或者过程出错了，将调用错误处理视图 ","date":"2018-11-07","objectID":"/django-%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6/:1:2","tags":["python","django"],"title":"Django-路由控制","uri":"/django-%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6/"},{"categories":["python"],"content":"三、简单的路由配置 from django.conf.urls import url urlpatterns=[ url(正则表达式，view视图函数，参数，别名) ] 示例的URLconf： from django.urls import url from . import views urlpatterns = [ url(r'^articles/2003/$', views.special_case_2003), url(r'^articles/([0-9]{4})/$', views.year_archive), url(r'^articles/([0-9]{4})/([0-9]{2})/$', views.month_archive), url(r'^articles/([0-9]{4})/([0-9]{2})/([0-9]+)/$', views.article_detail), ] 注： 从URL中捕获一个值，可以加园括号或者尖括号 不要添加前导的防斜杠，因为每个URL都有，例如，应该是^articles而不是^/articles 每个正则表达式前面的’r'是可选的，建议添加上，它告诉python这个字符串中的任何字符都不应该被转义 请求的例子及匹配的url /articles/2005/03/将匹配列表中的第三个模式。Django将调用函数views.month_archive(request, '2005', '03')。 /articles/2005/3/不匹配任何URL模式，因为列表中的第三个模式要求月份是两个数字。 /articles/2003/将匹配列表中的第一个模式不是第二个，因为模式按顺序从上往下匹配，第一个会首先被匹配。Django会调用函数views.special_case_2003(request) /articles/2003不匹配任何一个模式，因为每个模式都要求URL以一个斜杠结尾。 /articles/2003/03/03/将匹配最后一个模式。Django将调用函数views.article_detail(request, '2003', '03', '03')。 是否开启URL访问地址后面 不为/跳转至带有/路径的配置项 APPEND_SLASH=True Django settings.py配置文件中默认没有 APPEND_SLASH 这个参数，但 Django 默认这个参数为 APPEND_SLASH = True。 其作用就是自动在网址结尾加'/'。 ","date":"2018-11-07","objectID":"/django-%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6/:1:3","tags":["python","django"],"title":"Django-路由控制","uri":"/django-%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6/"},{"categories":["python"],"content":"四、有名分组 有名分组的语法是(?P\u003cname\u003epattern),其中name是组的名字，pattern是匹配的模式 使用有名分组重写上面的URLconf： from django.conf.urls import url from . import views urlpatterns = [ url(r'^articles/2003/$', views.special_case_2003), url(r'^articles/(?P\u003cyear\u003e[0-9]{4})/$', views.year_archive), url(r'^articles/(?P\u003cyear\u003e[0-9]{4})/(?P\u003cmonth\u003e[0-9]{2})/$', views.month_archive), url(r'^articles/(?P\u003cyear\u003e[0-9]{4})/(?P\u003cmonth\u003e[0-9]{2})/(?P\u003cday\u003e[0-9]{2})/$', views.article_detail), ] **注：**捕获的值作为关键字参数而不是位置参数传递给视图函数。 /articles/2005/03/请求将调用views.month_archive(request, year='2005', month='03')函数，而不是views.month_archive(request, '2005', '03')。 ","date":"2018-11-07","objectID":"/django-%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6/:1:4","tags":["python","django"],"title":"Django-路由控制","uri":"/django-%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6/"},{"categories":["python"],"content":"五、无名分组有名分组总结 1.无名分组 按位置传参 分组之后，将分组好的数据当做位置传参到视图函数，所以视图函数需要定义形参 示例： ​ url:(r'^articles/([0-9]{4})/([0-9]{2})$', views.article_detail) ​ 视图函数：def article_detail(request,*args) 2.有名分组 按关键字传参 分组后，会把分组出来的数据当做关键字参数传到视图函数，所以视图函数需要定义形参，形参名字和分组的名字相对应，与顺序无关 示例： ​ url：(r'^articles/(?P\u003cyear\u003e[0-9]{4})/(?P\u003cmounth\u003e[0-9]{2})/$', views.article_detail), ​ 视图函数：def article_detail(request,mounth,year) **注：**有名分组和无名分组最好不要混用 ","date":"2018-11-07","objectID":"/django-%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6/:1:5","tags":["python","django"],"title":"Django-路由控制","uri":"/django-%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6/"},{"categories":["python"],"content":"六、反向解析 在django项目中，一个常见的需求是获得URL的最终形式，以用于嵌入到生成的内容中(视图中和显示给用户的URL等)或者用于处理服务器端的导航(重定向)。不希望通过硬编码URL Django提供了一种解决方案，只需在URL中提供一个name参数，并赋值一个你自定义的、好记的、直观的字符串。 在模板中：使用url模板标签 在python代码中，使用reverse()函数 示例： url配置： 无参数：url(r'^publishadd111/$',views.publishadd,name='ddd'), 无名分组:url(r'^publishadd/([0-9]{4})/([0-9]{2})/$', views.publishadd,name='ddd'), 有名分组：url(r'^publishadd/(?P\u003cyear\u003e[0-9]{4})/(?P\u003cmounth\u003e[0-9]{2})/$',views.publishadd,name='ddd'), 模板层： 无参数：{% url 'ddd' %} 无名分组：{% url 'ddd' 2018 12 %} 空格隔开，传多个值 有名分组：{% url 'ddd' 2018 12 %} 还可以 {% url 'ddd' year=2018 mounth=12 %} 视图层： from django.shortcuts import reverse 无参数：url=reverse('ddd') 无名分组：url=reverse('ddd',args=(2018,12,)) 有名分组：url=reverse('ddd',args=(2018,12,)) 还可以 url=reverse('ddd',kwargs={'year':2018,'mounth':12}) ","date":"2018-11-07","objectID":"/django-%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6/:1:6","tags":["python","django"],"title":"Django-路由控制","uri":"/django-%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6/"},{"categories":["python"],"content":"七、路由分发 在每个app里各自创建一个urls.py路由模块，然后从根路由出发，将app所属的url请求全部转发到相应的urls.py模块中。 Django1.1版本的分发 from django.conf.urls import url,include 例子： 总路由： -from django.conf.urls import include -url(r'^blog/',include('blog.urls')), -url(r'^app01/',include('app01.urls')), 各自路由配置url app01--url(r'^publish/$', views.publish,name='app01_test'), blog--url(r'^blogtest/$', views.test,name='blog_test'), 路由分发使用的是include()方法，需要提前导入，他的参数是转发目的地地路径的字符串。 **重点：**总路由后面不能加$ 两个不同的app，在各自的urlconf中为某一条url取了相同的name，这就会带来麻烦。为了解决这个问题，又引出了下面的命名空间。 ","date":"2018-11-07","objectID":"/django-%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6/:1:7","tags":["python","django"],"title":"Django-路由控制","uri":"/django-%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6/"},{"categories":["python"],"content":"八、命名空间 由于name没有作用域，Django在反解URL时，会在项目全局顺序搜索，当查找到第一个name指定URL时，立即返回。URL命名空间可以保证反查到唯一的URL，即使不同的app使用相同的URL名称。 示例： urls.py url(r'^blog/',include('blog.urls')), url(r'^app01/',include('app01.urls')), blog的urls.py url(r'^blogtest/$', views.test,name='test'), app01的urls.py url(r'^publish/$', views.publish,name='test'), blog的视图函数 def test(request): url=reverse('test') return HttpResponse('blog test) app01的视图函数 def test(request): url=reverse('test') return HttpResponse('app01 test) 无论如何找index都是找的app01的index。 解决方法：在总路由分发的时候指定名称空间，实现命名空间的做法很简单，在urlconf文件中添加namespace='xxx'即可。 url(r'^blog/',include('blog.urls',namespace='blog')), url(r'^app01/',include('app01.urls',namespace='app01')), 在视图函数反向解析的时候，指定是哪个名称空间下的 url = reverse('blog:test') 在模板里也指定是 {% url 'blog:test'%} 不是很推荐使用名称空间，推荐的是在子路由的name中加入app的前缀 url(r'^publish/$', views.publish,name='app01_test'), ","date":"2018-11-07","objectID":"/django-%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6/:1:8","tags":["python","django"],"title":"Django-路由控制","uri":"/django-%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6/"},{"categories":["python"],"content":"九、伪静态 和真静态URL类似。他是通过伪静态规则把动态URL伪装成静态网址。 在urls.py文件中自己添加匹配.html url(r'^book/(?P\u003cid\u003e\\d+.html)',views.book), ","date":"2018-11-07","objectID":"/django-%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6/:1:9","tags":["python","django"],"title":"Django-路由控制","uri":"/django-%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6/"},{"categories":["python"],"content":"Django入门 ","date":"2018-11-02","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0http%E5%8D%8F%E8%AE%AE%E4%B8%8Edjango%E5%AE%89%E8%A3%85/:0:0","tags":["python","django"],"title":"Django学习笔记(http协议与django安装)","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0http%E5%8D%8F%E8%AE%AE%E4%B8%8Edjango%E5%AE%89%E8%A3%85/"},{"categories":["python"],"content":"HTTP协议 HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于万维网（WWW:World Wide Web ）服务器与本地浏览器之间传输超文本的传送协议。 ","date":"2018-11-02","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0http%E5%8D%8F%E8%AE%AE%E4%B8%8Edjango%E5%AE%89%E8%A3%85/:1:0","tags":["python","django"],"title":"Django学习笔记(http协议与django安装)","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0http%E5%8D%8F%E8%AE%AE%E4%B8%8Edjango%E5%AE%89%E8%A3%85/"},{"categories":["python"],"content":"http协议的特性 基于tcp/ip协议之上的应用层协议 基于请求-响应模式 请求是先由客户端发出,服务端响应并返回，服务端在没有收到请求的情况下不好发送响应 无状态保存 HTTP协议不保存状态，自身不对请求和响应之间的通信状态进行保存。也就是说，协议对发送的请求和响应都不做持久化处理。 但是很多网站当前页面跳转别的页面之后仍需要保持登录状态，这是就引入了cookie技术，有了cookie再用http协议通信就可以管理状态了 无连接 无连接的意思是限制每次连接只处理一个请求。服务端处理完请求就即刻断开连接，这种方式可以节约传输时间。 ","date":"2018-11-02","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0http%E5%8D%8F%E8%AE%AE%E4%B8%8Edjango%E5%AE%89%E8%A3%85/:1:1","tags":["python","django"],"title":"Django学习笔记(http协议与django安装)","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0http%E5%8D%8F%E8%AE%AE%E4%B8%8Edjango%E5%AE%89%E8%A3%85/"},{"categories":["python"],"content":"http请求协议与响应协议 http协议包含浏览器发送数据给服务器所需的请求协议与服务器发送数据到浏览器的请求协议。 请求端(客户端)的hppt报文称为请求报文，响应端(服务器端)的称为响应报文 # 请求首行 # GET / HTTP/1.1\\r\\n # # 请求头 # Host: 127.0.0.1:8001\\r\\n # Connection: keep-alive\\r\\n # Cache-Control: max-age=0\\r\\n # Upgrade-Insecure-Requests: 1\\r\\n # User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36\\r\\n # Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\\r\\n # Accept-Encoding: gzip, deflate, br\\r\\nAccept-Language: zh-CN,zh;q=0.9\\r\\n\\r\\n' # # 请求体(get请求，请求体为空) POST请求 # 请求首行 POST /?name=lqz\u0026age=18 HTTP/1.1\\r\\n # 请求头 Host: 127.0.0.1:8008\\r\\nConnection: keep-alive\\r\\nContent-Length: 21\\r\\nCache-Control: max-age=0\\r\\nOrigin: http://127.0.0.1:8008\\r\\nUpgrade-Insecure-Requests: 1\\r\\nContent-Type: application/x-www-form-urlencoded\\r\\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36\\r\\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\\r\\nReferer: http://127.0.0.1:8008/?name=lqz\u0026age=18\\r\\nAccept-Encoding: gzip, deflate, br\\r\\nAccept-Language: zh-CN,zh;q=0.9\\r\\nCookie: csrftoken=7xx6BxQDJ6KB0PM7qS8uTA892ACtooNbnnF4LDwlYk1Y7S7nTS81FBqwruizHsxF\\r\\n\\r\\n # 请求体 name=abc\u0026password=123' 请求方式：get与post请求 GET提交的数据会放在URL后，以？分割URL和传输的数据，参数之间用\u0026相连。POST是把提交的数据放在HTTP包的请求体中 GET提交的数据大小有限制(URL长度限制)，POST提交的数据没有限制 GET与POST请求在服务端获取请求数据方式不同。 响应状态码 ","date":"2018-11-02","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0http%E5%8D%8F%E8%AE%AE%E4%B8%8Edjango%E5%AE%89%E8%A3%85/:1:2","tags":["python","django"],"title":"Django学习笔记(http协议与django安装)","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0http%E5%8D%8F%E8%AE%AE%E4%B8%8Edjango%E5%AE%89%E8%A3%85/"},{"categories":["python"],"content":"URL简介 统一资源定位符是互联网上标准资源的地址，互联网上的每个文件都有一个唯一的URL。 协议：//IP:端口(80)/路径?name=abc\u0026age=123 ？之前的是请求路径，？之后的是请求数据部分 ","date":"2018-11-02","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0http%E5%8D%8F%E8%AE%AE%E4%B8%8Edjango%E5%AE%89%E8%A3%85/:1:3","tags":["python","django"],"title":"Django学习笔记(http协议与django安装)","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0http%E5%8D%8F%E8%AE%AE%E4%B8%8Edjango%E5%AE%89%E8%A3%85/"},{"categories":["python"],"content":"Django框架 ","date":"2018-11-02","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0http%E5%8D%8F%E8%AE%AE%E4%B8%8Edjango%E5%AE%89%E8%A3%85/:2:0","tags":["python","django"],"title":"Django学习笔记(http协议与django安装)","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0http%E5%8D%8F%E8%AE%AE%E4%B8%8Edjango%E5%AE%89%E8%A3%85/"},{"categories":["python"],"content":"一、django简介 djangon使用的是MTV模式他与MVC模式本质相同，只是定义上有点不同。 MVC MVC就是将应用分为模型(M)，视图(V),控制器(C)三层，他们之间以一种插件式、松耦合的方式连接在一起，模型（M）负责业务对象与数据库的映射（ORM），视图（V）赋值与用户的交互，控制器接受用户的输入 MTV 模型（Model）：负责业务对象和数据库的关系映射(ORM). 模板（Template）：负责如何把页面展示给用户(html) 视图（View）：负责业务逻辑，并在适当时候调用Model和Template 除了以上三层之外，还需要一个URL分发器，它的作用是将一个个URL的页面请求分发给不同的View处理，View再调用相应的Model和Template，MTV的响应模式如下所示： 用户通过浏览器向服务器发起一个请求(request),这个请求访问视图函数(如果不涉及数据调用，视图函数返回一个模板)，视图函数调用模型，模型去数据库查找数据，如何逐级返回，视图函数把返回的数据填充到模板空格中，最后返回页面给用户。 ","date":"2018-11-02","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0http%E5%8D%8F%E8%AE%AE%E4%B8%8Edjango%E5%AE%89%E8%A3%85/:2:1","tags":["python","django"],"title":"Django学习笔记(http协议与django安装)","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0http%E5%8D%8F%E8%AE%AE%E4%B8%8Edjango%E5%AE%89%E8%A3%85/"},{"categories":["python"],"content":"二、Django安装 1.安装 方式一：在命令行输入：pip3 install django pip install django==1.11.9 -i http://pypi.hustunique.org/simple 指定版本号，指定国内镜像 方式二：使用pycharm 2.创建一个django project 命令创建：django-admin.py startproject mysite 创建app:python3 manage.py startapp app01 3.文件目录介绍 -manage.py---项目入口,执行一些命令 -项目名 -settings:全局配置信息 -urls:总路由,请求地址跟视图函数的映射关系 -app名字 -migrations:数据库迁移的记录 -models.py 数据库表模型 -views 视图函数 ","date":"2018-11-02","objectID":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0http%E5%8D%8F%E8%AE%AE%E4%B8%8Edjango%E5%AE%89%E8%A3%85/:2:2","tags":["python","django"],"title":"Django学习笔记(http协议与django安装)","uri":"/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0http%E5%8D%8F%E8%AE%AE%E4%B8%8Edjango%E5%AE%89%E8%A3%85/"},{"categories":["前端"],"content":"一、事件的两种绑定方式 ******* 1、on事件绑定方式 document.onclick = function() { console.log(\"文档点击\"); } // on事件只能绑定一个方法，重复绑定保留最后一次绑定的方法 document.onclick = function() { console.log(\"文档点击\"); } // 事件的移除 document.onclick = null; 2、非on事件绑定方式 document.addEventListener('click', function() { console.log(\"点击1\"); }) document.addEventListener('click', function() { console.log(\"点击2\"); }) // 非on事件可以同时绑定多个方法，被绑定的方法依次被执行 // addEventListener第三个参数(true|false)决定冒泡的方式 function fn () {} document.addEventListener('click', fn); // 事件的移除 document.removeEventListener('click', fn); ","date":"2018-10-18","objectID":"/js%E4%BA%8B%E4%BB%B6/:1:0","tags":["JavaScript"],"title":"JS事件","uri":"/js%E4%BA%8B%E4%BB%B6/"},{"categories":["前端"],"content":"二、事件参数event ********* 存放事件信息的回调参数 ","date":"2018-10-18","objectID":"/js%E4%BA%8B%E4%BB%B6/:2:0","tags":["JavaScript"],"title":"JS事件","uri":"/js%E4%BA%8B%E4%BB%B6/"},{"categories":["前端"],"content":"三、事件的冒泡与默认事件 ********* 事件的冒泡：父子都具有点击事件，不处理的话，点击子级也会出发父级的点击事件 \u003cbody id=\"body\"\u003e \u003cdiv id=\"sup\"\u003e \u003cdiv id=\"sub\"\u003e\u003c/div\u003e \u003c/div\u003e \u003c/body\u003e \u003cscript\u003e sub.onclick = function (ev) { // 方式一 ev.stopPropagation(); console.log(\"sub click\"); } sup.onclick = function (ev) { // 方式二 ev.cancelBubble = true; console.log(\"sup click\"); } body.onclick = function (ev) { console.log(\"body click\"); } \u003c/script\u003e 默认事件：取消默认的事件动作，如鼠标右键菜单 ev.preventDefault(); | return false; \u003cbody id=\"body\"\u003e \u003cdiv id=\"sup\"\u003e \u003cdiv id=\"sub\"\u003e\u003c/div\u003e \u003c/div\u003e \u003c/body\u003e \u003cscript\u003e //默认事件:鼠标右键oncontextmenu sub.oncontextmenu = function (ev) { ev.preventDefault(); console.log(\"sub menu click\"); } //父级取消了默认事件，子级都被取消掉了 body.oncontextmenu = function(ev){ console.log(\"body menu click\"); return false; } \u003c/script\u003e ","date":"2018-10-18","objectID":"/js%E4%BA%8B%E4%BB%B6/:3:0","tags":["JavaScript"],"title":"JS事件","uri":"/js%E4%BA%8B%E4%BB%B6/"},{"categories":["前端"],"content":"四、鼠标事件 ********* 鼠标事件 onclick：鼠标点击 ondblclick：鼠标双击 onmousedown：鼠标按下 onmousemove：鼠标移动 onmouseup：鼠标抬起 onmouseover：鼠标悬浮 onmouseenter onmouseout：鼠标移开 onmouseleave oncontextmenu：鼠标右键 事件参数ev ev.clientX：点击点X坐标 ev.clientY：点击点Y坐标 ","date":"2018-10-18","objectID":"/js%E4%BA%8B%E4%BB%B6/:4:0","tags":["JavaScript"],"title":"JS事件","uri":"/js%E4%BA%8B%E4%BB%B6/"},{"categories":["前端"],"content":"五、键盘事件 ******* 键盘事件 onkeydown：键盘按下 onkeyup：键盘抬起 // 绑定的对象: 对象自身不录入文本,绑给document,自身录入文本(表单标签),绑给自身 ev.keyCode 事件参数ev ev.keyCode：按键编号 ev.altKey：alt特殊按键 ev.ctrlKey：ctrl特殊按键 ev.shiftKey：shift特殊按键 键盘控制平滑运动 \u003cdiv class=\"div\"\u003e\u003c/div\u003e \u003cscript\u003e var div =document.querySelector('.div'); var r_able =false; var l_able =false; var t_able =false; var b_able =false; setInterval(function () { //l_able为假，则后者短路，可以实现if的简写 l_able\u0026\u0026(div.style.left=div.offsetLeft -3 + 'px'); t_able\u0026\u0026(div.style.top=div.offsetTop -3 + 'px'); if(r_able){ div.style.left = div.offsetLeft + 3 + 'px'; } b_able\u0026\u0026(div.style.top=div.offsetTop +3 + 'px'); },16); document.onkeydown = function (ev) { switch(ev.keyCode){ case 39: r_able=true; break; case 37: l_able=true; break; case 38: t_able=true; break; case 40: b_able=true; break; } } document.onkeyup = function (ev) { switch(ev.keyCode){ case 39: r_able=false; break; case 37: l_able=false; break; case 38: t_able=false; break; case 40: b_able=false; break; } } \u003c/script\u003e ","date":"2018-10-18","objectID":"/js%E4%BA%8B%E4%BB%B6/:5:0","tags":["JavaScript"],"title":"JS事件","uri":"/js%E4%BA%8B%E4%BB%B6/"},{"categories":["前端"],"content":"六、表单事件 ******* onfocus：获取焦点 onblur：失去焦点 onselect：文本被选中 oninput：值改变 onchange：值改变，且需要在失去焦点后才能触发 onsubmit：表单默认提交事件 \u003cform action=\"\"\u003e \u003cinput type=\"text\" name=\"usr\"\u003e \u003cbutton type=\"submit\"\u003e提交\u003c/button\u003e \u003c/form\u003e \u003cscript\u003e var form = document.querySelector('form'); var ipt=document.querySelector('input'); var btn =document.querySelector('button'); ipt.onselect = function () { console.log(\"文本被选中了\"); } //值改变就触发 ipt.oninput=function(){ console.log(\"值在改变\"); } //键盘抬起就触发 ipt.onkeyup =function () { console.log(\"值在改变\"); } //丢失焦点触发 ipt.change =function () { console.log(\"值在改变\"); } //form的专有事件 form.onsubmit = function () { console.log(\"提交\"); return false;//取消默认事件 } \u003c/script\u003e ","date":"2018-10-18","objectID":"/js%E4%BA%8B%E4%BB%B6/:6:0","tags":["JavaScript"],"title":"JS事件","uri":"/js%E4%BA%8B%E4%BB%B6/"},{"categories":["前端"],"content":"七、文档事件 * 文档事件由window调用 onload：页面加载成功 onbeforeunload：页面退出或刷新警告，需要设置回调函数返回值，返回值随意 ","date":"2018-10-18","objectID":"/js%E4%BA%8B%E4%BB%B6/:7:0","tags":["JavaScript"],"title":"JS事件","uri":"/js%E4%BA%8B%E4%BB%B6/"},{"categories":["前端"],"content":"八、图片事件 * onerror：图片加载失败 ","date":"2018-10-18","objectID":"/js%E4%BA%8B%E4%BB%B6/:8:0","tags":["JavaScript"],"title":"JS事件","uri":"/js%E4%BA%8B%E4%BB%B6/"},{"categories":["前端"],"content":"九、页面事件 ********* onscroll：页面滚动 onresize：页面尺寸调整 window.scrollY：页面下滚距离 ","date":"2018-10-18","objectID":"/js%E4%BA%8B%E4%BB%B6/:9:0","tags":["JavaScript"],"title":"JS事件","uri":"/js%E4%BA%8B%E4%BB%B6/"},{"categories":["前端"],"content":"一、函数高级 ","date":"2018-10-17","objectID":"/js%E9%AB%98%E7%BA%A7/:1:0","tags":["JavaScript"],"title":"JS高级","uri":"/js%E9%AB%98%E7%BA%A7/"},{"categories":["前端"],"content":"1.函数回调 函数回调的本质：在一个函数中，满足特定条件下，调用另一个函数 //\u003cspan style=\"color: #000000;\"\u003e 回调的函数 function callback(data) {} \u003c/span\u003e//\u003cspan style=\"color: #000000;\"\u003e 逻辑函数 function func(callback) { \u003c/span\u003e//\u003cspan style=\"color: #000000;\"\u003e 函数回调 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eif\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (callback) callback(data); }\u003c/span\u003e \u003cspan style=\"color: #000000;\"\u003efunction a_fn(data) { console.log(\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003ea_fn\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e); \u003c/span\u003e//\u003cspan style=\"color: #000000;\"\u003e 如果要使用数据,那么定义形参接收参数 console.log(data); } function b_fn(a_fn) { var data \u003c/span\u003e= \u003cspan style=\"color: #800000;\"\u003e\"\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003eb_fn 的 数据\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003e\"\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e; console.log(\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003eb_fn\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e); \u003c/span\u003e//\u003cspan style=\"color: #000000;\"\u003e 条件: a_fn有值(有函数实现体) \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eif\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (a_fn) { \u003c/span\u003e//\u003cspan style=\"color: #000000;\"\u003e 调用参数函数 a_fn(data); } } b_fn(a_fn);\u003c/span\u003e test 总结： 1.一个函数(函数名)作为另外一个函数的参数 2.满足一定的条件,调用参数函数 3.形成了函数回调,回调的函数可以获取调用函数的局部变量(将数据携带出去) ","date":"2018-10-17","objectID":"/js%E9%AB%98%E7%BA%A7/:1:1","tags":["JavaScript"],"title":"JS高级","uri":"/js%E9%AB%98%E7%BA%A7/"},{"categories":["前端"],"content":"2.闭包 闭包本质：函数的嵌套定义，内层函数称之为闭包 闭包目的：不允许提升变量作用域时，该函数的局部变量需要被其他函数使用 闭包的解决案例：①影响局部变量的生命周期，持久化局部变量；②解决变量污染 \u003cspan style=\"color: #000000;\"\u003efunction outer() { var data \u003c/span\u003e=\u003cspan style=\"color: #000000;\"\u003e {} \u003c/span\u003e//\u003cspan style=\"color: #000000;\"\u003e闭包 function inner() { \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ereturn\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e data; } \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ereturn\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e inner; }\u003c/span\u003e 注：外部使用局部变量的方法: 返回值 | 函数回调 | 闭包 | 提升作用域 2.1局部变量持久化 \u003cspan style=\"color: #000000;\"\u003e function outer() { \u003c/span\u003e//\u003cspan style=\"color: #000000;\"\u003eeg：请求得到的数据，如果不持久化，方法执行完毕后，数据就会被销毁 var data\u003c/span\u003e=[1,2,3,4,5\u003cspan style=\"color: #000000;\"\u003e]; console.log(data); \u003c/span\u003e//\u003cspan style=\"color: #000000;\"\u003e通过闭包解决该类问题，所以闭包所有代码均可以随意自定义 function inner(){ \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ereturn\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e data; } \u003c/span\u003e//\u003cspan style=\"color: #000000;\"\u003e数据被inner操作返回，inner属于outer，所以需要将inner返回出去(跟外界建立联系) \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ereturn\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e inner; } \u003c/span\u003e//\u003cspan style=\"color: #000000;\"\u003e将局部变量生命周期提升于inner函数相同，inner存在，局部变量data就一直存在 var inner \u003c/span\u003e= outer(); 2.2闭包解决变量污染 现有一个列表，点击某个时，弹出下标 \u003cscript type=\u003cspan style=\"color: #800000;\"\u003e\"\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003etext/javascript\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003e\"\u003c/span\u003e\u003e // 需求:点击li,打印li在ul中的索引 =\u003e 0, 1, 2, 3, 4 // 1\u003cspan style=\"color: #000000;\"\u003e.lis var lis \u003c/span\u003e= document.querySelectorAll(\u003cspan style=\"color: #800000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003eul li\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e); \u003c/span\u003e// 2\u003cspan style=\"color: #000000;\"\u003e.循环绑定 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003efor\u003c/span\u003e (var i = 0; i \u003c lis.length; i++\u003cspan style=\"color: #000000;\"\u003e) { \u003c/span\u003e// 解决的原理:一共产生了5个外层函数,存储的形参i的值分别是0, 1, 2, 3, 4 //\u003cspan style=\"color: #000000;\"\u003e 内层函数也产生了5个,且和外层函数一一对应,打印的i就是外层函数的形参i \u003c/span\u003e//\u003cspan style=\"color: #000000;\"\u003e 外层函数 (function (i) { \u003c/span\u003e//\u003cspan style=\"color: #000000;\"\u003e 内层函数:闭包 lis[i].onclick \u003c/span\u003e=\u003cspan style=\"color: #000000;\"\u003e function () { alert(i) } })(i) } console.log(i); \u003c/span\u003e//\u003cspan style=\"color: #000000;\"\u003e 点击事件触发一定晚于该逻辑语句 \u003c/span\u003e//\u003cspan style=\"color: #000000;\"\u003e 所以再去触发点击,弹出i的值,永远是5 \u003c/span\u003e//\u003cspan style=\"color: #000000;\"\u003e 该类问题就称之为变量污染 \u003c/span\u003e\u003c/script\u003e ES6的块级作用域的语法也可以解决循环绑定变量污染的问题 let lis = document.querySelectorAll(\u003cspan style=\"color: #800000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003eli\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e); \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003efor\u003c/span\u003e (let i = 0; i \u003c lis.length; i++\u003cspan style=\"color: #000000;\"\u003e) { lis[i].onclick \u003c/span\u003e=\u003cspan style=\"color: #000000;\"\u003e function () { alert(i) } }\u003c/span\u003e ","date":"2018-10-17","objectID":"/js%E9%AB%98%E7%BA%A7/:1:2","tags":["JavaScript"],"title":"JS高级","uri":"/js%E9%AB%98%E7%BA%A7/"},{"categories":["前端"],"content":"二、JS的面向对象 ","date":"2018-10-17","objectID":"/js%E9%AB%98%E7%BA%A7/:2:0","tags":["JavaScript"],"title":"JS高级","uri":"/js%E9%AB%98%E7%BA%A7/"},{"categories":["前端"],"content":"1.面向对象初始 var obj = {}; | var obj =\u003cspan style=\"color: #000000;\"\u003e new Object(); \u003c/span\u003e//\u003cspan style=\"color: #000000;\"\u003e 属性 obj.prop \u003c/span\u003e= \u003cspan style=\"color: #800000;\"\u003e\"\"\u003c/span\u003e;|obj[\u003cspan style=\"color: #800000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003ename\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003e'\u003c/span\u003e]=\u003cspan style=\"color: #800000;\"\u003e\"\"\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e; \u003c/span\u003e//\u003cspan style=\"color: #000000;\"\u003e 方法 obj.func \u003c/span\u003e=\u003cspan style=\"color: #000000;\"\u003e function () {} \u003c/span\u003e//\u003cspan style=\"color: #000000;\"\u003e 删除属性与方法 delete obj.prop delete obj.func\u003c/span\u003e ","date":"2018-10-17","objectID":"/js%E9%AB%98%E7%BA%A7/:2:1","tags":["JavaScript"],"title":"JS高级","uri":"/js%E9%AB%98%E7%BA%A7/"},{"categories":["前端"],"content":"2.类字典结构使用 js中没有字典(键值对存储数据的方式),但可以通过对象实现字典方式存储数据,并使用数据 var dict = {name: \u003cspan style=\"color: #800000;\"\u003e\"\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003ezero\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003e\"\u003c/span\u003e, age: 18\u003cspan style=\"color: #000000;\"\u003e} var dict \u003c/span\u003e= {\u003cspan style=\"color: #800000;\"\u003e\"\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003emy-name\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003e\"\u003c/span\u003e: \u003cspan style=\"color: #800000;\"\u003e\"\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003ezero\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003e\"\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e, fn: function () {}, fun () {}} \u003c/span\u003e//\u003cspan style=\"color: #000000;\"\u003e使用 dict.name \u003c/span\u003e| dict[\u003cspan style=\"color: #800000;\"\u003e\"\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003emy-name\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003e\"\u003c/span\u003e] | dict.fn() 总结：\u003cbr/\u003e1.key全为字符串形式，但存在两种书写方式\u003cbr/\u003e2.key在js语法标识符支持情况下，可以省略引号，但key为js非法标识符的情况下，必须添加引号。\u003cbr/\u003e3.value可以为任意类型\u003cbr/\u003e4.访问值可以通过字典名(对象名).key语法与[“key”]语法来访问value\u003cbr/\u003e5.可以随意添加key与value完成增删改查 //\u003cspan style=\"color: #000000;\"\u003e 增 dict.key4 \u003c/span\u003e=\u003cspan style=\"color: #000000;\"\u003e true; console.log(dict); \u003c/span\u003e//\u003cspan style=\"color: #000000;\"\u003e 删 delete dict.key4; console.log(dict); \u003c/span\u003e//\u003cspan style=\"color: #000000;\"\u003e 改 dict[\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003e\"\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003emy-key3\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003e\"\u003c/span\u003e] = [5, 4, 3, 2, 1\u003cspan style=\"color: #000000;\"\u003e]; console.log(dict); \u003c/span\u003e//\u003cspan style=\"color: #000000;\"\u003e 查 console.log(dict.key1); console.log(dict[\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003e\"\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003ekey1\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003e\"\u003c/span\u003e]); ","date":"2018-10-17","objectID":"/js%E9%AB%98%E7%BA%A7/:2:2","tags":["JavaScript"],"title":"JS高级","uri":"/js%E9%AB%98%E7%BA%A7/"},{"categories":["前端"],"content":"3.构造函数 构造函数其实就是普通函数 特定的语法与规定: 1.一般采用首字母大写(大驼峰) 2.内部可以构建属性与方法,通过this关键词 //\u003cspan style=\"color: #000000;\"\u003e 普通函数 function fn() { var num \u003c/span\u003e= 10\u003cspan style=\"color: #000000;\"\u003e; console.log(\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003e普通函数\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e); } fn(); \u003c/span\u003e//\u003cspan style=\"color: #000000;\"\u003e构造函数 function People(name) { this.name \u003c/span\u003e=\u003cspan style=\"color: #000000;\"\u003e name; this.eat \u003c/span\u003e=\u003cspan style=\"color: #000000;\"\u003e function (agr) { console.log(this.name \u003c/span\u003e+ \u003cspan style=\"color: #800000;\"\u003e\"\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003e吃\u003c/span\u003e\u003cspan style=\"color: #800000;\"\u003e\"\u003c/span\u003e +\u003cspan style=\"color: #000000;\"\u003e agr); } }\u003c/span\u003e 构造函数可以创建多个对象,使用{}构建出的对象是唯一的 \u003cspan style=\"color: #0000ff;\"\u003evar\u003c/span\u003e p1 = \u003cspan style=\"color: #0000ff;\"\u003enew\u003c/span\u003e People(\"zero\"); \u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e new关键词, 创建对象并实例化\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003evar\u003c/span\u003e p2 = \u003cspan style=\"color: #0000ff;\"\u003enew\u003c/span\u003e People(\"seven\"\u003cspan style=\"color: #000000;\"\u003e); \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003evar\u003c/span\u003e obj = {} \u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e对象唯一\u003c/span\u003e 构造函数的属性变量与{}的语法规则不一样，构造函数内部通过this，二普通对象直接通过对象名.的方式 \u003cspan style=\"color: #0000ff;\"\u003efunction\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e People(name) { \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ethis\u003c/span\u003e.name =\u003cspan style=\"color: #000000;\"\u003e name; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ethis\u003c/span\u003e.eat = \u003cspan style=\"color: #0000ff;\"\u003efunction\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (agr) { console.log(\u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ethis\u003c/span\u003e.name + \"吃\" +\u003cspan style=\"color: #000000;\"\u003e agr); } } \u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e普通对象\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003evar\u003c/span\u003e obj =\u003cspan style=\"color: #000000;\"\u003e { index: \u003c/span\u003e\"obj对象\"\u003cspan style=\"color: #000000;\"\u003e, fn: \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003efunction\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e () { console.log(\u003c/span\u003e\"obj方法\"\u003cspan style=\"color: #000000;\"\u003e); } }; \u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e 使用属性与方法\u003c/span\u003e \u003cspan style=\"color: #000000;\"\u003econsole.log(obj.index); obj.fn();\u003c/span\u003e ","date":"2018-10-17","objectID":"/js%E9%AB%98%E7%BA%A7/:2:3","tags":["JavaScript"],"title":"JS高级","uri":"/js%E9%AB%98%E7%BA%A7/"},{"categories":["前端"],"content":"4.继承 1.完成继承,必须拥有两个构造函数 2.一个函数要使用另外一个函数的属性与方法,需要对其进行继承(属性与方法的复用) 4.1 ES5的继承 属性的继承用call方法,在继承函数中由被继承函数调用,传入继承函数的this与被继承函数创建属性对属性进行赋值的所有需要的数据 方法的继承prototype原型 \u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e 类似于父级\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003efunction\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e Sup(name) { \u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e 属性存放某个值\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ethis\u003c/span\u003e.name =\u003cspan style=\"color: #000000;\"\u003e name; \u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e 方法完成某项功能\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ethis\u003c/span\u003e.func = \u003cspan style=\"color: #0000ff;\"\u003efunction\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e () { console.log(\u003c/span\u003e\"func\"\u003cspan style=\"color: #000000;\"\u003e); } } \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003evar\u003c/span\u003e sup = \u003cspan style=\"color: #0000ff;\"\u003enew\u003c/span\u003e Sup(\"supClass\"\u003cspan style=\"color: #000000;\"\u003e); console.log(sup.name); sup.func(); \u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e 类似于子级\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003efunction\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e Sub(name) { \u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e 属性的继承\u003c/span\u003e Sup.call(\u003cspan style=\"color: #0000ff;\"\u003ethis\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e, name);//Sup有name属性,那么可以通过call将Sub的name传给Sup } \u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e 方法的继承\u003c/span\u003e Sub.prototype = \u003cspan style=\"color: #0000ff;\"\u003enew\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e Sup; //将new Sup赋值给Sub.prototype \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003evar\u003c/span\u003e sub = \u003cspan style=\"color: #0000ff;\"\u003enew\u003c/span\u003e Sub(\"subClass\"\u003cspan style=\"color: #000000;\"\u003e); console.log(sub.name); sub.func(); \u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e 原型\u003c/span\u003e console.log(sup.__proto__); 4.2 ES6继承 \u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e 多对象 =\u003e 创建类\u003c/span\u003e \u003cspan style=\"color: #000000;\"\u003e class Person { \u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e 构造器:创建对象完成初始化操作\u003c/span\u003e \u003cspan style=\"color: #000000;\"\u003e constructor (name, age) { \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ethis\u003c/span\u003e.name =\u003cspan style=\"color: #000000;\"\u003e name; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ethis\u003c/span\u003e.age =\u003cspan style=\"color: #000000;\"\u003e age; } \u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e 实例方法:只能由对象调用\u003c/span\u003e \u003cspan style=\"color: #000000;\"\u003e eat () { console.log(\u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ethis\u003c/span\u003e.name + '吃吃吃'\u003cspan style=\"color: #000000;\"\u003e); } \u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e 类方法:只能由类调用\u003c/span\u003e \u003cspan style=\"color: #000000;\"\u003e static create () { console.log(\u003c/span\u003e'诞生'\u003cspan style=\"color: #000000;\"\u003e); } } let p1 \u003c/span\u003e= \u003cspan style=\"color: #0000ff;\"\u003enew\u003c/span\u003e Person('zero', 8\u003cspan style=\"color: #000000;\"\u003e); let p2 \u003c/span\u003e= \u003cspan style=\"color: #0000ff;\"\u003enew\u003c/span\u003e Person('seven', 58\u003cspan style=\"color: #000000;\"\u003e); console.log(p1.age); p2.eat(); \u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e Person.eat();\u003c/span\u003e \u003cspan style=\"color: #000000;\"\u003e Person.create(); \u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e p2.create();\u003c/span\u003e \u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e 继承\u003c/span\u003e \u003cspan style=\"color: #000000;\"\u003e class Student extends Person { constructor (name, age, sex) { \u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e super指向父级\u003c/span\u003e \u003cspan style=\"color: #000000;\"\u003e super(name, age); \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ethis\u003c/span\u003e.sex =\u003cspan style=\"color: #000000;\"\u003e sex; } } let s1 \u003c/span\u003e= \u003cspan style=\"color: #0000ff;\"\u003enew\u003c/span\u003e Student(\"张三\", 18, \"男\"\u003cspan style=\"color: #000000;\"\u003e); \u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e 属性的继承\u003c/span\u003e \u003cspan style=\"color: #000000;\"\u003e console.log(s1.name, s1.age, s1.sex); console.log(); \u003c/span\u003e\u003cspan style","date":"2018-10-17","objectID":"/js%E9%AB%98%E7%BA%A7/:2:4","tags":["JavaScript"],"title":"JS高级","uri":"/js%E9%AB%98%E7%BA%A7/"},{"categories":["前端"],"content":"三、定时器 应用场景： 1.完成js自启(不需要手动触发)动画 2.css完成不了的动画 setInterval　一次性定时器 setTimeout　持续性定时器 \u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e 一次性定时器\u003c/span\u003e \u003cspan style=\"color: #008000;\"\u003e/*\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e 异步执行 setTimeout(函数, 毫秒数, 函数所需参数(可以省略)); \u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e*/\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e console.log(\u003c/span\u003e\"开始\"\u003cspan style=\"color: #000000;\"\u003e); setTimeout(\u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003efunction\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (data) { console.log(data); }, \u003c/span\u003e1000, \"数据\"\u003cspan style=\"color: #000000;\"\u003e); console.log(\u003c/span\u003e\"结束\"\u003cspan style=\"color: #000000;\"\u003e); \u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e 持续性定时器\u003c/span\u003e \u003cspan style=\"color: #008000;\"\u003e/*\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e异步执行 setInterval(函数, 毫秒数, 函数所需参数(可以省略)); \u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e*/\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e console.log(\u003c/span\u003e\"又开始\"\u003cspan style=\"color: #000000;\"\u003e); \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003evar\u003c/span\u003e timer = setInterval(\u003cspan style=\"color: #0000ff;\"\u003efunction\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e() { console.log(\u003c/span\u003e\"呵呵\"\u003cspan style=\"color: #000000;\"\u003e); }, \u003c/span\u003e1000\u003cspan style=\"color: #000000;\"\u003e) console.log(timer); console.log(\u003c/span\u003e\"又结束\"); 清除定时器 1.持续性与一次性定时器通常都应该有清除定时器操作 2.清除定时器操作可以混用 clearTimeout() | clearInterval() 3.定时器的返回值就是定时器编号,就是普普通通的数字类型 document.onclick = \u003cspan style=\"color: #0000ff;\"\u003efunction\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e () { console.log(\u003c/span\u003e\"定时器清除了\"\u003cspan style=\"color: #000000;\"\u003e); clearInterval(timer); \u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e clearTimeout(timer);\u003c/span\u003e \u003cspan style=\"color: #000000;\"\u003e } \u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e 清除所有定时器\u003c/span\u003e \u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e 如果上方创建过n个定时器,那么timeout值为n+1\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003evar\u003c/span\u003e timeout = setTimeout(\u003cspan style=\"color: #0000ff;\"\u003efunction\u003c/span\u003e(){}, 1\u003cspan style=\"color: #000000;\"\u003e); \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003efor\u003c/span\u003e (\u003cspan style=\"color: #0000ff;\"\u003evar\u003c/span\u003e i = 0; i \u003c timeout; i++\u003cspan style=\"color: #000000;\"\u003e) { \u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e 循环将编号[0, n]所有定时器都清除一次\u003c/span\u003e \u003cspan style=\"color: #000000;\"\u003e clearTimeout(i) } \u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e 1.允许重复清除\u003c/span\u003e \u003cspan style=\"color: #008000;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #008000;\"\u003e 2.允许清除不存在的定时器编号\u003c/span\u003e  ","date":"2018-10-17","objectID":"/js%E9%AB%98%E7%BA%A7/:3:0","tags":["JavaScript"],"title":"JS高级","uri":"/js%E9%AB%98%E7%BA%A7/"},{"categories":["前端"],"content":"一、分支结构 1、if语句 if 基础语法 if (条件表达式) { 代码块; } // 当条件表达式结果为true，会执行代码块；反之不执行 // 条件表达式可以为普通表达式 // 0、undefined、null、\"\"、NaN为假，其他均为真 if 复杂语法 // 1.双分支 if (表达式1) { 代码块1; } else { 代码块2; } // 2.多分支 if (表达式1) { } else if (表达式2) { } ... else if (表达式2) { } else { } if 嵌套 if (表达式1) { if (表达式2) { }... }... 2、switch语句 switch (表达式) { case 值1: 代码块1; break; case 值2: 代码块2; break; default: 代码块3; } // 1.表达式可以为 整数表达式 或 字符串表达式 // 2.值可以为 整数 或 字符串 // 3.break可以省略 // 4.default为默认代码块，需要出现在所有case最下方，在所有case均未被匹配时执行 ","date":"2018-10-15","objectID":"/js%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/:1:0","tags":["JavaScript"],"title":"JS基础操作","uri":"/js%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"},{"categories":["前端"],"content":"二、循环结构 1、for循环 for (循环变量①; 条件表达式②; 循环变量增量③) { 代码块④; } // 1.循环变量可以在外、在内声明 // 2.执行逻辑 ① ②④③ ... ②④③ ②，入口为①，出口为②，②④③个数为[0, n] 2、while循环 while (条件表达式) { 代码块; } 3、do…while循环 do { 代码块; } while (条件表达式); 4、for…in循环 obj = {\"name\": \"zero\", \"age\": 8} for (k in obj) { console.log(k, obj[k]) } // 用于遍历对象：遍历的结果为key，通过[]语法访问对应的value 5、for…of循环 iter = ['a', 'b', 'c']; for (i of iter) { console.log(iter[i]) } // 1.用于遍历可迭代对象：遍历结果为index，通过[]语法访问对应的value // 2.ES6新增，可迭代对象有 字符串、数组、Map、Set、Anguments、NodeList等 6、break，continue关键词 break：结束本层循环 continue：结束本次循环进入下一次循环 ","date":"2018-10-15","objectID":"/js%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/:2:0","tags":["JavaScript"],"title":"JS基础操作","uri":"/js%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"},{"categories":["前端"],"content":"三、异常处理 try { 易错代码块; } catch (err) { 异常处理代码块; } finally { 必须逻辑代码块; } // 1.err为存储错误信息的变量 // 2.finally分支在异常出现与否都会被执行 throw \"自定义异常\" // 必要的时候抛出自定义异常，要结合对应的try...catch使用 ","date":"2018-10-15","objectID":"/js%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/:3:0","tags":["JavaScript"],"title":"JS基础操作","uri":"/js%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"},{"categories":["前端"],"content":"四、函数初级 1、函数的定义 ES5 function 函数名 (参数列表) { 函数体; } var 函数名 = function (参数列表) { 函数体; } ES6 let 函数名 = (参数列表) =\u003e { 函数体; } 匿名函数 (function (参数列表) { 函数体; }) // 匿名函数需要自调用 (function (参数列表) { 函数体; })(参数列表); 2、函数的调用 函数名(参数列表) 3、函数的参数 个数不需要统一 function fn (a, b, c) { console.log(a, b, c); // 100 undefined undefined } fn(100); function fn (a) { console.log(a) // 100 } fn(100, 200, 300) // 200,300被丢弃 可以任意位置具有默认值 function fn (a, b=20, c, d=40) { console.log(a, b, c, d); // 100 200 300 40 } fn(100, 200, 300); 通过…语法接收多个值 function fn (a, ...b) { console.log(a, b); // 100 [200 300] } fn(100, 200, 300); // ...变量必须出现在参数列表最后 4、返回值 function fn () { return 返回值; } // 1.可以空return操作，用来结束函数 // 2.返回值可以为任意js类型数据 // 3.函数最多只能拥有一个返回值，返回多个的时候，不报错，只返回最后一个值 ","date":"2018-10-15","objectID":"/js%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/:4:0","tags":["JavaScript"],"title":"JS基础操作","uri":"/js%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"},{"categories":["前端"],"content":"五、事件初级 onload：页面加载完毕事件，只附属于window对象 onclick：鼠标点击时间 onmouseover：鼠标悬浮事件 onmouseout：鼠标移开事件 onfocus：表单元素获取焦点 onblur：表单元素失去焦点 ","date":"2018-10-15","objectID":"/js%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/:5:0","tags":["JavaScript"],"title":"JS基础操作","uri":"/js%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"},{"categories":["前端"],"content":"六、JS选择器 1、getElement系列 // 1.通过id名获取唯一满足条件的页面元素 document.getElementById('id名'); // 该方法只能由document调用 // 2、通过class名获取所有满足条件的页面元素 document.getElementsByClassName('class名'); // 该方法可以由document及任意页面元素对象调用 // 返回值为HTMLCollection (一个类数组结果的对象，使用方式同数组) // 没有匹配到任何结果返回空HTMLCollection对象 ([]) // 3.通过tag名获取所有满足条件的页面元素 document.getElementsByTagName('tag名'); // 该方法可以由document及任意页面元素对象调用 // 返回值为HTMLCollection (一个类数组结果的对象，使用方式同数组) // 没有匹配到任何结果返回空HTMLCollection对象 ([]) 2、querySelect系列 // 1.获取第一个匹配到的页面元素 document.querySelector('css语法选择器'); // 该方法可以由document及任意页面对象调用 // 2.获取所有匹配到的页面元素 document.querySelectorAll('css语法选择器'); // 该方法可以由document及任意页面对象调用 // 返回值为NodeList (一个类数组结果的对象，使用方式同数组) // 没有匹配到任何结果返回空NodeList对象 ([]) 3、id名 可以通过id名直接获取对应的页面元素对象，但是不建议使用 ","date":"2018-10-15","objectID":"/js%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/:6:0","tags":["JavaScript"],"title":"JS基础操作","uri":"/js%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"},{"categories":["前端"],"content":"七、JS操作页面内容 innerText：普通标签内容（自身文本与所有子标签文本） innerHTML：包含标签在内的内容（自身文本及子标签的所有） value：表单标签的内容 outerHTML：包含自身标签在内的内容（自身标签及往下的所有） ","date":"2018-10-15","objectID":"/js%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/:7:0","tags":["JavaScript"],"title":"JS基础操作","uri":"/js%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"},{"categories":["前端"],"content":"八、JS操作页面样式 读写 style属性 样式 div.style.backgroundColor = 'red'; // 1.操作的为行间式 // 2.可读可写 // 3.具体属性名采用小驼峰命名法 只读 计算后 样式 // eg: 背景颜色 // 推荐 getComputedStyle(页面元素对象, 伪类).getPropertyValue('background-color'); // 不推荐 getComputedStyle(页面元素对象, 伪类).backgroundColor; // IE9以下 页面元素对象.currentStyle.getAttribute('background-color'); 页面元素对象.currentStyle.backgroundColor; // 1.页面元素对象由JS选择器获取 // 2.伪类没有的情况下用null填充 // 3.计算后样式为只读 // 4.该方式依旧可以获取行间式样式 (获取逻辑最后的样式) 结合 css 操作样式 页面元素对象.className = \"\"; // 清除类名 页面元素对象.className = \"类名\"; // 设置类名 页面元素对象.className += \" 类名\"; // 添加类名 前面要注意加空格 classList[add|remove|toggle] //add添加 remove 删除 toggle有则无，无则有 eg: this.classlist.toggle('active') //如果class里没有active就加上，有就删掉 ","date":"2018-10-15","objectID":"/js%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/:8:0","tags":["JavaScript"],"title":"JS基础操作","uri":"/js%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"},{"categories":["前端"],"content":"一、JS语言介绍 ","date":"2018-10-11","objectID":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/:1:0","tags":["JavaScript"],"title":"JavaScript入门（基础）","uri":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"},{"categories":["前端"],"content":"1.概述 浏览器脚本语言 可以编写运行在浏览器上的代码程序 属于解释性、弱语言类型编程语言 ","date":"2018-10-11","objectID":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/:1:1","tags":["JavaScript"],"title":"JavaScript入门（基础）","uri":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"},{"categories":["前端"],"content":"2.组成 ES语法：ECMAScript、主要版本有ES5和ES6 DOM:文档对象模型(Document Object Model),是W3C组织推荐的处理可扩展标准语言的标准编程接口。 BOM浏览器对象模型(Browser Object Model),提供了独立于内容的、可以与浏览器窗口进行互动的对象结构，且由多个对象组成，其中代表浏览器窗口的Window对象是BOM的顶层对象，其他对象都是该对象的子对象。 ","date":"2018-10-11","objectID":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/:1:2","tags":["JavaScript"],"title":"JavaScript入门（基础）","uri":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"},{"categories":["前端"],"content":"二、JS的基本语法 ","date":"2018-10-11","objectID":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/:2:0","tags":["JavaScript"],"title":"JavaScript入门（基础）","uri":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"},{"categories":["前端"],"content":"1.三种存在位置(HTML中) 1.1行间式：存在于行间的时间中 \u003cbody id='bd' onload=\"body.style.backgroundColor='cyan'\"\u003e \u003c/body\u003e 1.2内联式：存在于页面的script标签中 \u003cbody id ='bd'\u003e \u003cstyle\u003e bd.style.backgroundColor='cyan'; \u003c/style\u003e \u003c/body\u003e 一般情况下，内联可以放在\u003c/body\u003e下 或者\u003c/body\u003e上，最终被解析在\u003c/body\u003e上方 内联式也可以出现在\u003chead\u003e标签底部，一般应用于依赖性JS库 1.3外联式：存在于外部JS文件，通过script标签的src属性链接 html文件： \u003cscript src='js/test.js'\u003e\u003c/script\u003e js文件： bd.style.backgroundColor='cyan'; \u003cscript src=\"js/02.js\"\u003e alert(123) \u003c/script\u003e 拥有src的外联script标签，会自动屏蔽标签内部的代码块 1.4总结 内联使用场景：某页面的特有逻辑，可以书写在该页面的script标签内 外联的使用场景：适用于团队开发，js代码具有复用性 出现在head标签底部：依赖型JS库；出现在body标签底部：功能型JS脚本 ","date":"2018-10-11","objectID":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/:2:1","tags":["JavaScript"],"title":"JavaScript入门（基础）","uri":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"},{"categories":["前端"],"content":"2.JavaScript注释 //单行注释 /* 多行注释 */ ","date":"2018-10-11","objectID":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/:2:2","tags":["JavaScript"],"title":"JavaScript入门（基础）","uri":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"},{"categories":["前端"],"content":"3.变量的定义 3.1变量的命名规范 标识符由字母数字下划线，$组成，不能以数字开头(驼峰命名法) 标识符不能与关键字及保留字重名 区分大小写 保留字： abstract arguments boolean break byte case catch char class* const continue debugger default delete do double else enum* eval export* extends* false final finally float for function goto if implements import* in instanceof int interface let long native new null package private protected public return short static super* switch synchronized this throw throws transient true try typeof var void volatile while with yield 3.2ES5定义变量 var num = 10; //无块级作用域变量 num = 10; //全局变量 3.3ES6定义变量 let num = 10; //局部变量 const NUM=10; //常量 常量名全大写 不允许修改 注：ES5标准下无块级作用域，只有方法可以产生实际的局部作用域 // 方法的自调用，就会产生一个局部的作用域 (function () { var x=10; y=20; })() ES6有块级作用域 ","date":"2018-10-11","objectID":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/:2:3","tags":["JavaScript"],"title":"JavaScript入门（基础）","uri":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"},{"categories":["前端"],"content":"4.三个基本弹出框 alert() //一个弹出框只能弹出一条消息，多个值，后面的值会被忽略 confirm() // 确认框 有返回值， true | false prompt() //输入框 确定为输入值，取消为null ","date":"2018-10-11","objectID":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/:2:4","tags":["JavaScript"],"title":"JavaScript入门（基础）","uri":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"},{"categories":["前端"],"content":"5.函数监测 typeof(100) ","date":"2018-10-11","objectID":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/:2:5","tags":["JavaScript"],"title":"JavaScript入门（基础）","uri":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"},{"categories":["前端"],"content":"5.数据类型 5.1值类型 5.1.1数字类型Number 数值范围：-5e324 ~ 1.7976931348623157e+308超过范围，会显示为 Infinity(正无穷) 或 -Infinity(负无穷),不像其它语言，JS的数字类型包含了小数。 特殊的Number值 NaN:表示Not A Number，非数字类型 和任何值都不相等 与任何值运算,结果还是NaN isFinite() //函数判断是否在范围内 isNaN() //函数 判读是否是 NaN 5.1.2字符串类型String 声明方式： 双引号 单引号 模板字符串(ES6新增) content = ` 打扎好，我寺${username}. 是兄弟，就来砍我 今晚八点，不见不散 ` //多行，${}方式 嵌入变量。 传统方式变量字符串连接必须用字符串连接符 5.1.3布尔类型Boolean true |false var a = true; console.log(a, typeof a); 5.1.4未定义类型Undefined undefined 表示'缺少值' var c = undefined console.log(c,typeof c); 5.2引用类型 5.2.1函数类型function var m = function(){ console.log(m,typeof m); } 5.2.2对象类型：object var obj = {}; console.log(obj,typeof obj); obj = new Object(); //console.log(obj,typeof obj); //对象类型判断一般用instanceof console.log(obj instanceof Object); 5.3具体的对象类型 5.3.1空对象：null var o = null; //console.log(o,typeof o); //空的判断用== console.log(o == null); 5.3.2数组对象：Array o = new Array(1,2,3,4,5); //console.log(o,typeof o); //判断 console.log(o instanceof Array); 5.3.3时间对象：Date o = new Date(); console.log(o,instanceof Date); 5.3.4正则对象：ReExp o = new ReExp(); console.log(o, instanceof ReExp); ","date":"2018-10-11","objectID":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/:2:6","tags":["JavaScript"],"title":"JavaScript入门（基础）","uri":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"},{"categories":["前端"],"content":"6.数据类型转换 6.1显示转换 //1.num,bool =\u003e str //String|toString var a = 10; var b=true; var c =String(a); c = a.toString(); //2.bool,str =\u003e num //Number |+? var aa =true; var bb = '10'; var cc = Number(aa); cc = +aa; //'1' number cc = +bb; //'10' number //针对字符串 //parseFloat|parseInt cc = parseFloat('3.14.15.16'); console.log(cc,typeof cc); //3.14 number cc = parseInt('10.35abc'); console.log(cc,typeof cc); //10 number //字符串以非数字开头，结果为NaN //1.非数字类型 //2.不与任何数相等，包含自己 //3.通过isNaN()进行判断 var res = parseInt('abc10def'); console.log(res,isNaN(res)); 6.2隐性转换 5 + null //5 '5' +null //'5null' '5' +1 //'51' '5' -1 //4 ","date":"2018-10-11","objectID":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/:2:7","tags":["JavaScript"],"title":"JavaScript入门（基础）","uri":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"},{"categories":["前端"],"content":"7.运算符 7.1算数运算符 加法运算符 + 减法运算符 - 乘法运算符 * 除法运算符 / 模运算符 % 负号运算符 - 正号运算符 + 递增运算符 ++ 递减运算符 – **注：**++/–在前先自身运算，再做其他运算，++/–在后先做其他运算，再自运算 //a = 5 var res = a++; console.log('res:'+res+'a:'+a); //5 6 //a =5 var res = ++a; console.log('res:'+res+'a:'+a); //6 6 7.2赋值运算符 前提：x=5，y=5 运算符 例子 等同于 运算结果 = x=y 5 += x+=y x=x+y 10 -= x-=y x=x-y 0 *= x*=y x=x*y 25 /= x/=y x=x/y 1 %= x%=y x=x%y 0 7.3比较运算符 前提：x=5 运算符 描述 比较 结果 == 等于 x==\"5” true === 绝对等于 x===\"5” false != 不等于 x!=\"5” fales !== 不绝对等于 x!==\"5” true \u003e 大于 x\u003e5 false \u003c 小于 x\u003c5 false \u003e= 大于等于 x\u003e=5 true \u003c= 小于等于 x\u003c=5 true 7.4逻辑运算符 前提：n=5 运算符 描述 例子 结果 \u0026\u0026 与 x=n\u003e10\u0026\u0026++n x=false,n=5（短路） || 或 x=n\u003c10||n– x=true,n=5（短路） ! 非 x=!n x=false,x=5 \u0026\u0026运算，有假即假，前面有假，后面不会被执行，称为短路 ||运算，有真，即真，前面为真，后面不执行 短路 7.5三目运算符(三元运算符) expression ? sentence1 : sentence2 当expression的值为真时执行sentence1，否则执行 sentence2 var tq = prompt('天气(晴|雨)') var res =tq =='晴'?'今天天气挺好':'请假回家'; console.log(res); 7.6其他运算符 条件运算符 ?: typeof运算符 判断操作数类型 delete运算符 删除对象属性或者数组元素 void运算符 忽略操作数的值 逗号运算符 , 字符串连接 + ","date":"2018-10-11","objectID":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/:2:8","tags":["JavaScript"],"title":"JavaScript入门（基础）","uri":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"},{"categories":["前端"],"content":"补：四种调试方式 alert() console.log() document.write() 浏览器断点调试 ","date":"2018-10-11","objectID":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/:2:9","tags":["JavaScript"],"title":"JavaScript入门（基础）","uri":"/javascript%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"},{"categories":["前端"],"content":"一、文档流(normal flow) ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:1:0","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"1.概念 将窗体自上而下分成一行一行，块级元素从上至下，行内元素在每行中从左至右顺序排放元素 本质为normal flow(普通流，常规流)，文档流就是一个连续具有逻辑上下的页面整体，也可以片面的说，出现在页面中的显示内容都可以理解为在文档流中。 ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:1:1","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"2.BFC(Block formatting context) 块级格式化上下文，它是一个独立的渲染区域，只有Block-level box参与，它规定了内部的Block-level box如何布局，并且这个区域与外部毫不相干。 ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:1:2","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"3.BFC规则 内部的Box会在垂直方向，一个接一个的放置 根据BFC布局方向，Box自身的水平方向位置，由margin左或右控制，相邻Box的margin会叠加 Box的垂直位置，由margin-top控制位置，相邻Box会发生重叠(margin塌陷) 同一容器(区域)中，box相互影响，不对对区域外产生影响。 ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:1:3","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"二、浮动布局 ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:2:0","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"1.目的 让block同行显示(1.在父级规定的宽度中，2.不完全脱离文档流) ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:2:1","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"2.基本语法 float:left | right float：left—\u003e设置BFC横向布局规则为从左至右，且block box同行显示之间没有间隔 float：right—\u003eBFC规则为从右至左，且block box同行显示之间没有间隔 ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:2:2","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"3.浮动布局实例 .box{ width: 1000px; margin: 0 auto; } div div{ font: 900 30px/100px 'STSong'; text-align: center; width: 200px; height: 100px; background-color: green; float: left; color: white; } .b6{ width: 600px; background-color: yellow; } .b7{ width: 400px; height: 200px; background-color: yellowgreen; float: right; } .b8{ width: 300px; height: 150px; background-color: brown; float: left; } .b9{ width: 300px; height: 150px; background-color: black; float: left; } .b10{ width: 400px; height: 150px; background-color: cyan; float: right; } .b11{ width: 600px; background-color: red; float: left; } .b12{ width: 1000px; background-color: blue; } \u003cdiv class=\"box\"\u003e \u003cdiv class=\"b1\"\u003e1\u003c/div\u003e \u003cdiv class=\"b2\"\u003e2\u003c/div\u003e \u003cdiv class=\"b3\"\u003e3\u003c/div\u003e \u003cdiv class=\"b4\"\u003e4\u003c/div\u003e \u003cdiv class=\"b5\"\u003e5\u003c/div\u003e \u003cdiv class=\"b6\"\u003e6\u003c/div\u003e \u003cdiv class=\"b7\"\u003e7\u003c/div\u003e \u003cdiv class=\"b8\"\u003e8\u003c/div\u003e \u003cdiv class=\"b9\"\u003e9\u003c/div\u003e \u003cdiv class=\"b10\"\u003e10\u003c/div\u003e \u003cdiv class=\"b11\"\u003e11\u003c/div\u003e \u003cdiv class=\"b12\"\u003e12\u003c/div\u003e \u003c/div\u003e 效果图： ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:2:3","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"4.浮动布局的问题 通常文档流中，子标签在父级标签未设置高度的情况下，会撑开父级的高度，父级的高度决定于逻辑最后位置的子级的低端。 脱离文档流后的子级标签，不再撑开父级高度。 不完全脱离文档流(浮动后的结果)：当目标标签的内部有浮动的子级，目标标签的兄弟标签的布局会出现显示异常！在不做清浮动的情况下，父级不会获取子级的高度。 ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:2:4","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"5.清浮动 清浮动的对象：拥有浮动子级的父级 这里只介绍四种清浮动的方法 1.浮动的父级设置高度 super { height: npx; } 2.浮动的父级设置overflow super { overflow: hidden; } 3.浮动的父级兄弟设置clear brother { clear: left | right | both; } 4.浮动的父级伪类清浮动 super:after { content: \"\"; display: block; clear: left | right | both; } 原理：在浮动布局的情况下，让父级获得合适的高度。 ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:2:5","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"三、流式布局 ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:3:0","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"1.目的 让布局脱离固定值限制，可以根据页面情况的改变发生相应的变化 ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:3:1","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"2.相关设置 百分比设置 % 参考为最近的父级 窗口设置 vw | vh 50vw代表占据窗口宽度50% 字体控制 em rem em为最近设置字体大小的父级规定的字体大小 rem为html字体大小 ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:3:2","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"四、定位布局 可以根据需求给相应的块设定相应设置。 ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:4:0","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"1.语法 position属性指定一个元素的定位类型 值 描述 relative 相对定位 absolute 绝对定位 fixed 固定定位 static 默认，没有定位 设置完定位类型就可以设置top,bottom,left,right四个属性进行布局。，如果同时设置了top和bottom，top生效，同时设置了left和right，left生效。简单说就是 左右取左，上下取上 ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:4:1","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"2.相对定位 未脱离文档流 以自身原有位置作为参考坐标系 方位布局只改变盒子显示区域，不会改变盒子原有位置(相当于灵魂出窍) left=-right，top=-bottom。 **优点：**父级不会脱离文档流，满足所有的盒模型布局 ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:4:2","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"3.绝对定位 完全脱离文档流，不在文档流中占位，不会撑开父级高度，不会影响兄弟布局，显示层也永远高于文档流 以最近定位父级作为参考坐标系，没有就找html **优点：**如果自身已经采用绝对定位布局，那么子级一定参考自身进行定位。 **注：**如果父级只是辅助子级进行绝对定位,那么一定优选相对定位,因为绝对定位会产生新的BFC,导致盒模型布局会受影响 ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:4:3","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"4.固定定位 完全脱离文档流 参考系为文档窗口，不随页面滚动而改变位置 ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:4:4","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"5.z-index 脱离文档流的标签，具有z-index属性，可以用来控制显示层次的优先级，值为任意正整数 ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:4:5","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"五、Flex布局 ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:5:0","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"1.概念 Flex是Flexible Box的缩写，意为“弹性布局”，用来为盒状模型提供最大灵活性。 采用Flex布局的元素，称为Flex容器(flex container)，简称“容器”。它的所有子元素自动成为容器成员，称为flex项目(flex item),简称“项目”。 水平为主轴(main axis),主轴开始的位置叫做main start，结束位置叫做main end。 垂直为交叉轴(cross axis),交叉轴的开始位置叫做cross start，结束位置叫做cross end 项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:5:1","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"2.容器属性 1.flex-direction属性 决定主轴的方向(即项目的排列方向) flex-direction: row | row-reverse | column | column-reverse; -- row（默认值）：主轴为水平方向，起点在左端。 -- row-reverse：主轴为水平方向，起点在右端。 -- column：主轴为垂直方向，起点在上沿。 -- column-reverse：主轴为垂直方向，起点在下沿。 2.flex-wrap属性 定义一条轴线排不下的情况下如何换行 flex-wrap: nowrap | wrap | wrap-reverse; -- nowrap（默认）：不换行。 -- wrap：换行，第一行在上方。 -- wrap-reverse：换行，第一行在下方。 3.flex-flow属性 是flex-direction属性和flex-wrap属性的简写形式，默认为row nowrap flex-flow: \u003cflex-direction\u003e \u003cflex-wrap\u003e; 4.justify-content属性 定义了项目在主轴上的对齐方式。 justify-content: flex-start | flex-end | center | space-between | space-around; 5.align-items属性 定义项目在交叉轴上如何对齐 align-items: flex-start | flex-end | center | baseline | stretch; 6.align-content属性 定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用 align-content: flex-start | flex-end | center | space-between | space-around | stretch; ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:5:2","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"3.项目属性 1.order 属性 定义项目的排列顺序。数值越小，排列越靠前，默认为0。 order: \u003cinteger\u003e; 2.flex-grow 属性 定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。 flex-grow: \u003cnumber\u003e; /* default 0 */ 3.flex-shrink 属性 定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。 flex-shrink: \u003cnumber\u003e; /* default 1 */ 4.flex-basis 属性 定义了在分配多余空间之前，项目占据的主轴空间（main size）。 flex-basis: \u003clength\u003e | auto; /* default auto */ 5.flex 属性 是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。 flex: \u003cflex-grow\u003e \u003cflex-shrink\u003e \u003cflex-basis\u003e 6.align-self 属性 允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。 align-self: auto | flex-start | flex-end | center | baseline | stretch; ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:5:3","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"六、响应式布局 ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:6:0","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"1.概念 响应式布局就是一个网站能够兼容多个终端。 **原则：**采用响应式布局的样式块，基本样式块只做共性设置，需要根据页面尺寸进行适应变化的样式均有响应式布局处理 ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:6:1","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"2.页面宽度 小于\u003cinteger\u003e宽度 @media only screen and (max-width: \u003cinteger\u003e) { selector { } } 大于\u003cinteger\u003e宽度小于\u003cinteger\u003e宽度 @media only screen and (min-width: \u003cinteger\u003e) and (max-width: \u003cinteger\u003e) { selector { } } 大于\u003cinteger\u003e宽度 @media only screen and (min-width: \u003cinteger\u003e) { selector { } } ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:6:2","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["前端"],"content":"3.注 在响应式布局内，css语法同正常样式表语法一样 响应式布局之间存在不同屏幕尺寸的限制，使用样式相互不影响。满足当前屏幕尺寸时，该样式块起作用，不满足时则失效 当响应式布局中样式快起作用时，会与正常样式快设置一起协同布局，遵循选择器的优先级规则 ","date":"2018-09-27","objectID":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/:6:3","tags":["html","css"],"title":"高级布局","uri":"/%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80/"},{"categories":["MySql"],"content":"目录 视图 触发器 事务 存储过程 流程控制 ","date":"2018-09-18","objectID":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/:0:0","tags":["MySql"],"title":"mysql-视图、触发器、事务、存储过程、流程控制","uri":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"},{"categories":["MySql"],"content":"一、视图 视图是由查询结果构成的一张虚拟表，和真实的表一样，带有名称的列和行数据 强调：视图是永久存储的，但是视图存储的不是数据，只是一条sql语句 视图的特点： 视图的列可以来自不同的表，是表的抽象和逻辑意义上建立的新关系。  视图是由基本表（实表）产生的表（虚表）。 视图的建立和删除不影响基本表。  对视图内容的更新（添加、删除和修改）直接影响基本表。  当视图来自多个基本表时，不允许添加和删除数据。 优点： 可以简化查询（多表查询转换为直接通过视图查询） 可以进行权限控制（把表的权限封闭，开发对应的视图权限） ","date":"2018-09-18","objectID":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/:1:0","tags":["MySql"],"title":"mysql-视图、触发器、事务、存储过程、流程控制","uri":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"},{"categories":["MySql"],"content":"（一）、创建视图 \u003cspan style=\"color: #0000ff;\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eview\u003c/span\u003e 视图名称 \u003cspan style=\"color: #0000ff;\"\u003eas\u003c/span\u003e sql 查询语句 例子：\u003cspan style=\"color: #0000ff;\"\u003eCREATE\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eview\u003c/span\u003e test_view \u003cspan style=\"color: #0000ff;\"\u003eas\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eSELECT\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e*\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003efrom\u003c/span\u003e test; ","date":"2018-09-18","objectID":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/:1:1","tags":["MySql"],"title":"mysql-视图、触发器、事务、存储过程、流程控制","uri":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"},{"categories":["MySql"],"content":"（二）、查询视图 \u003cspan style=\"color: #0000ff;\"\u003eselect\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e*\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003efrom\u003c/span\u003e 视图名 \u003cspan style=\"color: #ff0000;\"\u003e[\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003ewhere 条件\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e]\u003c/span\u003e ","date":"2018-09-18","objectID":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/:1:2","tags":["MySql"],"title":"mysql-视图、触发器、事务、存储过程、流程控制","uri":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"},{"categories":["MySql"],"content":"（三）、修改视图 \u003cspan style=\"color: #0000ff;\"\u003ealter\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eview\u003c/span\u003e 视图名称 \u003cspan style=\"color: #0000ff;\"\u003eAS\u003c/span\u003e SQL语句； 例子：\u003cspan style=\"color: #0000ff;\"\u003eALTER\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eview\u003c/span\u003e test_view \u003cspan style=\"color: #0000ff;\"\u003eas\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eSELECT\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e*\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003efrom\u003c/span\u003e test_view \u003cspan style=\"color: #0000ff;\"\u003eWHERE\u003c/span\u003e salary\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e10000\u003c/span\u003e ","date":"2018-09-18","objectID":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/:1:3","tags":["MySql"],"title":"mysql-视图、触发器、事务、存储过程、流程控制","uri":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"},{"categories":["MySql"],"content":"（四）、删除视图 \u003cspan style=\"color: #0000ff;\"\u003edrop\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eview\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 视图名称; 例子：\u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003edrop\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eview\u003c/span\u003e test_view ","date":"2018-09-18","objectID":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/:1:4","tags":["MySql"],"title":"mysql-视图、触发器、事务、存储过程、流程控制","uri":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"},{"categories":["MySql"],"content":"二、触发器 触发器可以监视用户对表的增、删、改操作，并触发某种操作（没有查），自动执行，无法直接调用。 创建触发器语法的四要素： 1.监视地点（table） 2.监视事件（insert/update/delete） 3.触发时间（before/after） 4.触发事件（insert/update/delete） ","date":"2018-09-18","objectID":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/:2:0","tags":["MySql"],"title":"mysql-视图、触发器、事务、存储过程、流程控制","uri":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"},{"categories":["MySql"],"content":"（一）、创建触发器 \u003cspan style=\"color: #000000;\"\u003e# 插入前 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eCREATE\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eTRIGGER\u003c/span\u003e tri_before_insert_tb1 BEFORE \u003cspan style=\"color: #0000ff;\"\u003eINSERT\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eON\u003c/span\u003e tb1 \u003cspan style=\"color: #0000ff;\"\u003eFOR\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e EACH ROW \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eBEGIN\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e ... \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eEND\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e # 插入后 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eCREATE\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eTRIGGER\u003c/span\u003e tri_after_insert_tb1 AFTER \u003cspan style=\"color: #0000ff;\"\u003eINSERT\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eON\u003c/span\u003e tb1 \u003cspan style=\"color: #0000ff;\"\u003eFOR\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e EACH ROW \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eBEGIN\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e ... \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eEND\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e # 删除前 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eCREATE\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eTRIGGER\u003c/span\u003e tri_before_delete_tb1 BEFORE \u003cspan style=\"color: #0000ff;\"\u003eDELETE\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eON\u003c/span\u003e tb1 \u003cspan style=\"color: #0000ff;\"\u003eFOR\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e EACH ROW \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eBEGIN\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e ... \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eEND\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e # 删除后 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eCREATE\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eTRIGGER\u003c/span\u003e tri_after_delete_tb1 AFTER \u003cspan style=\"color: #0000ff;\"\u003eDELETE\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eON\u003c/span\u003e tb1 \u003cspan style=\"color: #0000ff;\"\u003eFOR\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e EACH ROW \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eBEGIN\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e ... \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eEND\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e # 更新前 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eCREATE\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eTRIGGER\u003c/span\u003e tri_before_update_tb1 BEFORE \u003cspan style=\"color: #0000ff;\"\u003eUPDATE\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eON\u003c/span\u003e tb1 \u003cspan style=\"color: #0000ff;\"\u003eFOR\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e EACH ROW \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eBEGIN\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e ... \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eEND\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e # 更新后 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eCREATE\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eTRIGGER\u003c/span\u003e tri_after_update_tb1 AFTER \u003cspan style=\"color: #0000ff;\"\u003eUPDATE\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eON\u003c/span\u003e tb1 \u003cspan style=\"color: #0000ff;\"\u003eFOR\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e EACH ROW \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eBEGIN\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e ... \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eEND\u003c/span\u003e 语法 \u003cspan style=\"color: #000000;\"\u003e#准备表 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eCREATE\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eTABLE\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e cmd ( id \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eINT\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ePRIMARY\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eKEY\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e auto_increment, \u003c/span\u003e\u003cspan style=\"color: #ff00ff;\"\u003eUSER\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eCHAR\u003c/span\u003e (\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e32\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e), priv \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eCHAR\u003c/span\u003e (\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e10\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e), cmd \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eCHAR\u003c/span\u003e (\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e64\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e), sub_time \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003edatetime\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e, #提交时间 success enum (\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003eyes\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e, \u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003eno\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e) #0代表执行失败 ); \u003c/span\u003e\u003c","date":"2018-09-18","objectID":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/:2:1","tags":["MySql"],"title":"mysql-视图、触发器、事务、存储过程、流程控制","uri":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"},{"categories":["MySql"],"content":"（二）、查看触发器 show triggers ","date":"2018-09-18","objectID":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/:2:2","tags":["MySql"],"title":"mysql-视图、触发器、事务、存储过程、流程控制","uri":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"},{"categories":["MySql"],"content":"（三）、删除触发器 \u003cspan style=\"color: #0000ff;\"\u003edrop\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003etrigger\u003c/span\u003e 触发器的名称 ","date":"2018-09-18","objectID":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/:2:3","tags":["MySql"],"title":"mysql-视图、触发器、事务、存储过程、流程控制","uri":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"},{"categories":["MySql"],"content":"三、事务 事务用于将某些操作的多个SQL作为原子性操作，意思就是，事务是一组sql语句集合。 一旦有某一个出现错误，即可回滚到原来的状态，从而保证数据库数据完整性。在事务内的语句, 要么全部执行成功, 要么全部执行失败。 ","date":"2018-09-18","objectID":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/:3:0","tags":["MySql"],"title":"mysql-视图、触发器、事务、存储过程、流程控制","uri":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"},{"categories":["MySql"],"content":"（一）、事务的特性 事务具有以下四个特性（ACID） 1.原子性：事务是一个整体，不可分割，包含在其中的sql操作要么全部成功，要么全部失败回滚，不可能只执行其中一部分操作。 2.一致性：当事务执行后 所有的数据都是完整的(外键约束 非空约束)。 3.持久性：一旦事务提交，数据永久保存在数据库中 4.隔离性：事务之间相互隔离，一个事务的执行不影响其他事务的执行 SQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。 ","date":"2018-09-18","objectID":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/:3:1","tags":["MySql"],"title":"mysql-视图、触发器、事务、存储过程、流程控制","uri":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"},{"categories":["MySql"],"content":"（二）、事务的隔离级别 　1.READ UNCOMMITED（未提交读）：所有事务都可以看到其他未提交事务的执行结果。很少用于实际应用，因为它的性能不比其他级别好多少 2.READ COMMITED（提交读）：大部分数据库默认级别，不包括mysql。一个事务从开始到提交之前, 所做的任何修改对其他事务都是不可见的。 3.REPEATABLE READ（可重复读）：mysql默认级别，解决了脏读的问题. 该级别保证了在同一个事务中多次读取同样记录的结果时一致的. 无法解决幻读问题 4.SERIALIZABLE（可串行化）：是最高的隔离级别，强制事务排序，使之不可能相互冲突，从而解决幻读问题 脏读： 一个事物 读到了 另一个事务未提交的数据 查询 之前要保证 所有的更新都已经完成。 不可重复读：在一个事务的两次查询之中数据不一致，这可能是两次查询过程中间插入了一个事务更新的原有的数据。 幻读：指的是当某个事务在读取某个范围内的记录时, 另外一个事务又在该范围内插入了新的记录, 当之前的事务再次读取该范围的记录时, 会产生幻行(Phantom Row). ","date":"2018-09-18","objectID":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/:3:2","tags":["MySql"],"title":"mysql-视图、触发器、事务、存储过程、流程控制","uri":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"},{"categories":["MySql"],"content":"（三）、事务操作 start \u003cspan style=\"color: #0000ff;\"\u003etransaction\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e; 开启一个事物 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ecommit\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 提交事物 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003erollback\u003c/span\u003e 回滚事务 注：mysql默认开启自动提交事务，pymysql默认是不自动提交，需手动commit ","date":"2018-09-18","objectID":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/:3:3","tags":["MySql"],"title":"mysql-视图、触发器、事务、存储过程、流程控制","uri":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"},{"categories":["MySql"],"content":"四、存储过程 存储过程包含了一系列可执行的sql语句的集合，类似于函数(方法)。 使用存储过程的优点： #\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e1\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e. 用于替代程序写的SQL语句，实现程序与sql解耦 #\u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e2\u003c/span\u003e. 基于网络传输，传别名的数据量小，而直接传sql数据量大 缺点：不方便扩展 ","date":"2018-09-18","objectID":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/:4:0","tags":["MySql"],"title":"mysql-视图、触发器、事务、存储过程、流程控制","uri":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"},{"categories":["MySql"],"content":"（一）、使用存储过程 \u003cspan style=\"color: #000000;\"\u003e创建语法: \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eprocedure\u003c/span\u003e 过程的名称 ({\u003cspan style=\"color: #808080;\"\u003ein\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e,out,inout} 数据类型 参数名称) \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ebegin\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 具体的sql代码 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eend\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 参数前面需要指定参数的作用\u003cbr/\u003e \u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003ein\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 表示该参数用于传入数据 out 用于返回数据 inout 即可传入 也可返回 参数类型是 mysql中的数据类型\u003cbr/\u003e\u003cbr/\u003e调用语法：\u003cbr/\u003e　call 存储过程()\u003cbr/\u003e\u003c/span\u003e \u003cspan style=\"color: #000000;\"\u003e 案例:创建一个存储过程 作用是将两个整数相加 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eprocedure\u003c/span\u003e add_p (\u003cspan style=\"color: #808080;\"\u003ein\u003c/span\u003e a \u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e,\u003cspan style=\"color: #808080;\"\u003ein\u003c/span\u003e b \u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e) \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ebegin\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eselect\u003c/span\u003e a \u003cspan style=\"color: #808080;\"\u003e+\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e b; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eend\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 调用 call add_p(\u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e1\u003c/span\u003e,\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e2\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e) 案例:创建一个存储过程 作用是将两个整数相加 将结果保存在变量中 定义一个变量 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eset\u003c/span\u003e \u003cspan style=\"color: #008000;\"\u003e@su\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e=\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e100\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eprocedure\u003c/span\u003e add_p2 (\u003cspan style=\"color: #808080;\"\u003ein\u003c/span\u003e a \u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e,\u003cspan style=\"color: #808080;\"\u003ein\u003c/span\u003e b \u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e,out su \u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e) \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ebegin\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eset\u003c/span\u003e su \u003cspan style=\"color: #808080;\"\u003e=\u003c/span\u003e a \u003cspan style=\"color: #808080;\"\u003e+\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e b; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eend\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 定义变量 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eset\u003c/span\u003e \u003cspan style=\"color: #008000;\"\u003e@su\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e=\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e100\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e; 调用过程 call add_p2(\u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e10\u003c/span\u003e,\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e20\u003c/span\u003e,\u003cspan style=\"color: #008000;\"\u003e@su\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e); 注意 在存储过程中 需要使用分号来结束一行 但是分号有特殊含义 得将原始的结束符 修改为其他符号 delimiter \u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e//\u003c/span\u003e 结束符更换为\u003cspan style=\"color: #808080;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e delimiter;\u003c/span\u003e 案列 \u003cspan style=\"color: #000000;\"\u003e在存储过程中 需要使用分号来结束一行 但是分号有特殊含义 得将原始的结束符 修改为其他符号 delimiter \u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e//\u003c/span\u003e 结束符更换为\u003cspan style=\"color: #808080;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e delimiter;\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eprocedure\u003c/span\u003e show_p (\u003cspan style=\"color: #808080;\"\u003ein\u003c/span\u003e a \u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e) \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ebegin\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eif\u003c/span\u003e a \u003cspan style=\"color: #808080;\"\u003e=\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e1\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ethen\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eselect\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e \"壹\"; elseif a \u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e=\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e2\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ethen\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eselect\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e \"贰\"; \u003c/span\u003e\u003cspan style=\"","date":"2018-09-18","objectID":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/:4:1","tags":["MySql"],"title":"mysql-视图、触发器、事务、存储过程、流程控制","uri":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"},{"categories":["MySql"],"content":"（二）、删除存储过程 \u003cspan style=\"color: #0000ff;\"\u003edrop\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eprocedure\u003c/span\u003e proc_name; ","date":"2018-09-18","objectID":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/:4:2","tags":["MySql"],"title":"mysql-视图、触发器、事务、存储过程、流程控制","uri":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"},{"categories":["MySql"],"content":"五、流程控制 ","date":"2018-09-18","objectID":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/:5:0","tags":["MySql"],"title":"mysql-视图、触发器、事务、存储过程、流程控制","uri":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"},{"categories":["MySql"],"content":"（一）、条件语句 delimiter \u003cspan style=\"color: #808080;\"\u003e//\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eCREATE\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ePROCEDURE\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e proc_if () \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eBEGIN\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003edeclare\u003c/span\u003e i \u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003edefault\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e0\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eif\u003c/span\u003e i \u003cspan style=\"color: #808080;\"\u003e=\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e1\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eTHEN\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eSELECT\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e1\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e; ELSEIF i \u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e=\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e2\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eTHEN\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eSELECT\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e2\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eELSE\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eSELECT\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e7\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eEND\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eIF\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eEND\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e delimiter ;\u003c/span\u003e if ","date":"2018-09-18","objectID":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/:5:1","tags":["MySql"],"title":"mysql-视图、触发器、事务、存储过程、流程控制","uri":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"},{"categories":["MySql"],"content":"（二）、循环语句 delimiter \u003cspan style=\"color: #808080;\"\u003e//\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eCREATE\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ePROCEDURE\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e proc_while () \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eBEGIN\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eDECLARE\u003c/span\u003e num \u003cspan style=\"color: #0000ff;\"\u003eINT\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e ; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eSET\u003c/span\u003e num \u003cspan style=\"color: #808080;\"\u003e=\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e0\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e ; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eWHILE\u003c/span\u003e num \u003cspan style=\"color: #808080;\"\u003e\u003c\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e10\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e DO \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eSELECT\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e num ; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eSET\u003c/span\u003e num \u003cspan style=\"color: #808080;\"\u003e=\u003c/span\u003e num \u003cspan style=\"color: #808080;\"\u003e+\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e1\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e ; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eEND\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eWHILE\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e ; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eEND\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e delimiter ;\u003c/span\u003e while delimiter \u003cspan style=\"color: #808080;\"\u003e//\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eCREATE\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ePROCEDURE\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e proc_repeat () \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eBEGIN\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eDECLARE\u003c/span\u003e i \u003cspan style=\"color: #0000ff;\"\u003eINT\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e ; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eSET\u003c/span\u003e i \u003cspan style=\"color: #808080;\"\u003e=\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e0\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e ; repeat \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eselect\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e i; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eset\u003c/span\u003e i \u003cspan style=\"color: #808080;\"\u003e=\u003c/span\u003e i \u003cspan style=\"color: #808080;\"\u003e+\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e1\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e; until i \u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e\u003e=\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e5\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eend\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e repeat; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eEND\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e//\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e delimiter ;\u003c/span\u003e repeat \u003cspan style=\"color: #0000ff;\"\u003eBEGIN\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003edeclare\u003c/span\u003e i \u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003edefault\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e0\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e; loop_label: loop \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eset\u003c/span\u003e i\u003cspan style=\"color: #808080;\"\u003e=\u003c/span\u003ei\u003cspan style=\"color: #808080;\"\u003e+\u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e1\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eif\u003c/span\u003e i\u003cspan style=\"color: #808080;\"\u003e\u003c\u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e8\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ethen\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e iterate loop_label; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eend\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eif\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eif\u003c/span\u003e i\u003cspan style=\"color: #808080;\"\u003e\u003e=\u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e10\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ethen\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e leave loop_label; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eend\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eif\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eselect\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e i; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eend\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e loop loop_label; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eEND\u003c/span\u003e loop  ","date":"2018-09-18","objectID":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/:5:2","tags":["MySql"],"title":"mysql-视图、触发器、事务、存储过程、流程控制","uri":"/mysql-%E8%A7%86%E5%9B%BE%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BA%8B%E5%8A%A1%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"},{"categories":["MySql"],"content":"一、介绍 在MySQL管理软件中，可以通过SQL语句中的DML语言来实现数据的操作，包括 使用INSERT实现数据的插入 UPDATE实现数据的更新 使用DELETE实现数据的删除 使用SELECT查询数据以及。 ","date":"2018-09-17","objectID":"/mysql-%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/:1:0","tags":["MySql"],"title":"mysql-数据（记录）相关操作（增删改查）及权限管理","uri":"/mysql-%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"},{"categories":["MySql"],"content":"二、插入数据 \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e1\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e. 插入完整数据（顺序插入） 语法一： \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eINSERT\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eINTO\u003c/span\u003e 表名(字段1,字段2,字段3…字段n) \u003cspan style=\"color: #0000ff;\"\u003eVALUES\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e(值1,值2,值3…值n); 语法二： \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eINSERT\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eINTO\u003c/span\u003e 表名 \u003cspan style=\"color: #0000ff;\"\u003eVALUES\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (值1,值2,值3…值n); \u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e2\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e. 指定字段插入数据 语法： \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eINSERT\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eINTO\u003c/span\u003e 表名(字段1,字段2,字段3…) \u003cspan style=\"color: #0000ff;\"\u003eVALUES\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (值1,值2,值3…); \u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e3\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e. 插入多条记录 语法： \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eINSERT\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eINTO\u003c/span\u003e 表名 \u003cspan style=\"color: #0000ff;\"\u003eVALUES\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (值1,值2,值3…值n), (值1,值2,值3…值n), (值1,值2,值3…值n); \u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e4\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e. 插入查询结果 语法： \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eINSERT\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eINTO\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 表名(字段1,字段2,字段3…字段n) \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eSELECT\u003c/span\u003e (字段1,字段2,字段3…字段n) \u003cspan style=\"color: #0000ff;\"\u003eFROM\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 表2 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eWHERE\u003c/span\u003e …; ","date":"2018-09-17","objectID":"/mysql-%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/:2:0","tags":["MySql"],"title":"mysql-数据（记录）相关操作（增删改查）及权限管理","uri":"/mysql-%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"},{"categories":["MySql"],"content":"三、更新数据 \u003cspan style=\"color: #000000;\"\u003e语法： \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eUPDATE\u003c/span\u003e 表名 \u003cspan style=\"color: #0000ff;\"\u003eSET\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 字段1\u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e=\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e值1, 字段2\u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e=\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e值2, \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eWHERE\u003c/span\u003e CONDITION; ","date":"2018-09-17","objectID":"/mysql-%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/:3:0","tags":["MySql"],"title":"mysql-数据（记录）相关操作（增删改查）及权限管理","uri":"/mysql-%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"},{"categories":["MySql"],"content":"四、删除数据 \u003cspan style=\"color: #000000;\"\u003e语法： \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eDELETE\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eFROM\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 表名 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eWHERE\u003c/span\u003e CONITION; ","date":"2018-09-17","objectID":"/mysql-%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/:4:0","tags":["MySql"],"title":"mysql-数据（记录）相关操作（增删改查）及权限管理","uri":"/mysql-%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"},{"categories":["MySql"],"content":"五、查询数据 \u003cspan style=\"color: #000000;\"\u003e单表查询语法： \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eSELECT\u003c/span\u003e 字段1,字段2... \u003cspan style=\"color: #0000ff;\"\u003eFROM\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 表名 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eWHERE\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 条件 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eGROUP\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eBY\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e field \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eHAVING\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 筛选 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eORDER\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eBY\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e field LIMIT 限制条数 多表查询语法： \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eSELECT\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 字段列表 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eFROM\u003c/span\u003e 表1 \u003cspan style=\"color: #0000ff;\"\u003eINNER\u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e|LEFT|RIGHT\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003eJOIN\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 表2 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eON\u003c/span\u003e 表1.字段 \u003cspan style=\"color: #808080;\"\u003e=\u003c/span\u003e 表2.字段; ","date":"2018-09-17","objectID":"/mysql-%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/:5:0","tags":["MySql"],"title":"mysql-数据（记录）相关操作（增删改查）及权限管理","uri":"/mysql-%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"},{"categories":["MySql"],"content":"select关键字的定义顺序： \u003cspan style=\"color: #0000ff;\"\u003eSELECT\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eDISTINCT\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e\u003c\u003c/span\u003eselect_list\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eFROM\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e\u003c\u003c/span\u003eleft_table\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e\u003c\u003c/span\u003ejoin_type\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003eJOIN\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e\u003c\u003c/span\u003eright_table\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eON\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e\u003c\u003c/span\u003ejoin_condition\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eWHERE\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e\u003c\u003c/span\u003ewhere_condition\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eGROUP\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eBY\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e\u003c\u003c/span\u003egroup_by_list\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eHAVING\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e\u003c\u003c/span\u003ehaving_condition\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eORDER\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eBY\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e\u003c\u003c/span\u003eorder_by_condition\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e LIMIT \u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e\u003c\u003c/span\u003elimit_number\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e ","date":"2018-09-17","objectID":"/mysql-%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/:5:1","tags":["MySql"],"title":"mysql-数据（记录）相关操作（增删改查）及权限管理","uri":"/mysql-%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"},{"categories":["MySql"],"content":"select关键字的执行顺序： (\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e7\u003c/span\u003e) \u003cspan style=\"color: #0000ff;\"\u003eSELECT\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (\u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e8\u003c/span\u003e) \u003cspan style=\"color: #0000ff;\"\u003eDISTINCT\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e\u003c\u003c/span\u003eselect_list\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (\u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e1\u003c/span\u003e) \u003cspan style=\"color: #0000ff;\"\u003eFROM\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e\u003c\u003c/span\u003eleft_table\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (\u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e3\u003c/span\u003e) \u003cspan style=\"color: #808080;\"\u003e\u003c\u003c/span\u003ejoin_type\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003eJOIN\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e\u003c\u003c/span\u003eright_table\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (\u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e2\u003c/span\u003e) \u003cspan style=\"color: #0000ff;\"\u003eON\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e\u003c\u003c/span\u003ejoin_condition\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (\u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e4\u003c/span\u003e) \u003cspan style=\"color: #0000ff;\"\u003eWHERE\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e\u003c\u003c/span\u003ewhere_condition\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (\u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e5\u003c/span\u003e) \u003cspan style=\"color: #0000ff;\"\u003eGROUP\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eBY\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e\u003c\u003c/span\u003egroup_by_list\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (\u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e6\u003c/span\u003e) \u003cspan style=\"color: #0000ff;\"\u003eHAVING\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e\u003c\u003c/span\u003ehaving_condition\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (\u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e9\u003c/span\u003e) \u003cspan style=\"color: #0000ff;\"\u003eORDER\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eBY\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e\u003c\u003c/span\u003eorder_by_condition\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (\u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e10\u003c/span\u003e) LIMIT \u003cspan style=\"color: #808080;\"\u003e\u003c\u003c/span\u003elimit_number\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e ","date":"2018-09-17","objectID":"/mysql-%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/:5:2","tags":["MySql"],"title":"mysql-数据（记录）相关操作（增删改查）及权限管理","uri":"/mysql-%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"},{"categories":["MySql"],"content":"（一）、单表查询 \u003cspan style=\"color: #000000;\"\u003ecompany.employee 员工id id \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 姓名 emp_name \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003evarchar\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 性别 sex enum 年龄 age \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 入职日期 hire_date date 岗位 post \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003evarchar\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 职位描述 post_comment \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003evarchar\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 薪水 salary \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003edouble\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 办公室 office \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 部门编号 depart_id \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e #创建表 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003etable\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e employee( id \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003enot\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003enull\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eunique\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e auto_increment, name \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003evarchar\u003c/span\u003e(\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e20\u003c/span\u003e) \u003cspan style=\"color: #808080;\"\u003enot\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003enull\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e, sex enum(\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003emale\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e,\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003efemale\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e) \u003cspan style=\"color: #808080;\"\u003enot\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003enull\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003edefault\u003c/span\u003e \u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003emale\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e, #大部分是男的 age \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e(\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e3\u003c/span\u003e) unsigned \u003cspan style=\"color: #808080;\"\u003enot\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003enull\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003edefault\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e28\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e, hire_date date \u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003enot\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003enull\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e, post \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003evarchar\u003c/span\u003e(\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e50\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e), post_comment \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003evarchar\u003c/span\u003e(\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e100\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e), salary \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003edouble\u003c/span\u003e(\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e15\u003c/span\u003e,\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e2\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e), office \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e, #一个部门一个屋子 depart_id \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e ); #插入记录 #三个部门：教学，销售，运营 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003einsert\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003einto\u003c/span\u003e employee(name,sex,age,hire_date,post,salary,office,depart_id) \u003cspan style=\"color: #0000ff;\"\u003evalues\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003eegon\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e,\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003emale\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e,\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e18\u003c/span\u003e,\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e20170301\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e,\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e老男孩驻沙河办事处外交大使\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e,\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e7300.33\u003c/span\u003e,\u003cspan style","date":"2018-09-17","objectID":"/mysql-%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/:5:3","tags":["MySql"],"title":"mysql-数据（记录）相关操作（增删改查）及权限管理","uri":"/mysql-%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"},{"categories":["MySql"],"content":"（二）、多表查询 \u003cspan style=\"color: #0000ff;\"\u003eSELECT\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 字段列表 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eFROM\u003c/span\u003e 表1 \u003cspan style=\"color: #0000ff;\"\u003eINNER\u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e|LEFT|RIGHT\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003eJOIN\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 表2 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eON\u003c/span\u003e 表1.字段 \u003cspan style=\"color: #808080;\"\u003e=\u003c/span\u003e 表2.字段; 1.交叉连接（笛卡尔积）： 交叉连接返回左表中的所有行，左表中的每一行与右表中的所有行组合，结果集的行数是两个表的行数的乘积。（效率最低） mysql\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eselect\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e*\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003efrom\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e employee,department; \u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e+\u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e--\u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e--+------------+--------+------+--------+------+--------------+\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e id \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e name \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e sex \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e age \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e dep_id \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e id \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e name \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e+\u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e--\u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e--+------------+--------+------+--------+------+--------------+\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e1\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e A \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e male \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e18\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e200\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e200\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e 技术 \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e1\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e A \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e male \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e18\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e200\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e201\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e 人力资源 \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e1\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e A \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e male \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e18\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e200\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e202\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e 销售 \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e1\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e A \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e male \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e18\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e200\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e203\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e 运营 \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e2\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e B \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e female \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e48\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight","date":"2018-09-17","objectID":"/mysql-%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/:5:4","tags":["MySql"],"title":"mysql-数据（记录）相关操作（增删改查）及权限管理","uri":"/mysql-%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"},{"categories":["MySql"],"content":"（三）、子查询 #\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e1\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e：子查询是将一个查询语句嵌套在另一个查询语句中。 #\u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e2\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e：内层查询语句的查询结果，可以为外层查询语句提供查询条件。 #\u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e3\u003c/span\u003e：子查询中可以包含：\u003cspan style=\"color: #808080;\"\u003eIN\u003c/span\u003e、\u003cspan style=\"color: #808080;\"\u003eNOT\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003eIN\u003c/span\u003e、\u003cspan style=\"color: #808080;\"\u003eANY\u003c/span\u003e、\u003cspan style=\"color: #808080;\"\u003eALL\u003c/span\u003e、\u003cspan style=\"color: #808080;\"\u003eEXISTS\u003c/span\u003e 和 \u003cspan style=\"color: #808080;\"\u003eNOT\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e EXISTS等关键字 #\u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e4\u003c/span\u003e：还可以包含比较运算符：\u003cspan style=\"color: #808080;\"\u003e=\u003c/span\u003e 、 \u003cspan style=\"color: #808080;\"\u003e!=\u003c/span\u003e、\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e 、\u003cspan style=\"color: #808080;\"\u003e\u003c\u003c/span\u003e等 1.带in关键字的子查询 \u003cspan style=\"color: #000000;\"\u003e#查询平均年龄在25岁以上的部门名 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eselect\u003c/span\u003e id,name \u003cspan style=\"color: #0000ff;\"\u003efrom\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e department \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ewhere\u003c/span\u003e id \u003cspan style=\"color: #808080;\"\u003ein\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (\u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eselect\u003c/span\u003e dep_id \u003cspan style=\"color: #0000ff;\"\u003efrom\u003c/span\u003e employee \u003cspan style=\"color: #0000ff;\"\u003egroup\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eby\u003c/span\u003e dep_id \u003cspan style=\"color: #0000ff;\"\u003ehaving\u003c/span\u003e \u003cspan style=\"color: #ff00ff;\"\u003eavg\u003c/span\u003e(age) \u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e25\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e); #查看技术部员工姓名 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eselect\u003c/span\u003e name \u003cspan style=\"color: #0000ff;\"\u003efrom\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e employee \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ewhere\u003c/span\u003e dep_id \u003cspan style=\"color: #808080;\"\u003ein\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (\u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eselect\u003c/span\u003e id \u003cspan style=\"color: #0000ff;\"\u003efrom\u003c/span\u003e department \u003cspan style=\"color: #0000ff;\"\u003ewhere\u003c/span\u003e name\u003cspan style=\"color: #808080;\"\u003e=\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e技术\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e); #查看不足1人的部门名(子查询得到的是有人的部门id) \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eselect\u003c/span\u003e name \u003cspan style=\"color: #0000ff;\"\u003efrom\u003c/span\u003e department \u003cspan style=\"color: #0000ff;\"\u003ewhere\u003c/span\u003e id \u003cspan style=\"color: #808080;\"\u003enot\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003ein\u003c/span\u003e (\u003cspan style=\"color: #0000ff;\"\u003eselect\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003edistinct\u003c/span\u003e dep_id \u003cspan style=\"color: #0000ff;\"\u003efrom\u003c/span\u003e employee); 2.带比较运算符的子查询 \u003cspan style=\"color: #000000;\"\u003e#查询大于部门内平均年龄的员工名、年龄 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eselect\u003c/span\u003e t1.name,t1.age \u003cspan style=\"color: #0000ff;\"\u003efrom\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e emp t1 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003einner\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003ejoin\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (\u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eselect\u003c/span\u003e dep_id,\u003cspan style=\"color: #ff00ff;\"\u003eavg\u003c/span\u003e(age) avg_age \u003cspan style=\"color: #0000ff;\"\u003efrom\u003c/span\u003e emp \u003cspan style=\"color: #0000ff;\"\u003egroup\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eby\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e dep_id) t2 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eon\u003c/span\u003e t1.dep_id \u003cspan style=\"color: #808080;\"\u003e=\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e t2.dep_id \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ewhere\u003c/span\u003e t1.age \u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e t2.avg_age; 3.带exists关键字的子查询 #department表中存在dept_id\u003cspan style=\"color: #808080;\"\u003e=\u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e203\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e，Ture mysql\u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eselect\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e*\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003efrom\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e employee \u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e-\u003e\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ewhere\u003c/span\u003e","date":"2018-09-17","objectID":"/mysql-%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/:5:5","tags":["MySql"],"title":"mysql-数据（记录）相关操作（增删改查）及权限管理","uri":"/mysql-%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"},{"categories":["MySql"],"content":"六、权限管理 \u003cspan style=\"color: #000000;\"\u003e#授权表 \u003c/span\u003e\u003cspan style=\"color: #ff00ff;\"\u003euser\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e #该表放行的权限，针对：所有数据，所有库下所有表，以及表下的所有字段 db #该表放行的权限，针对：某一数据库，该数据库下的所有表，以及表下的所有字段 tables_priv #该表放行的权限。针对：某一张表，以及该表下的所有字段 columns_priv #该表放行的权限，针对：某一个字段\u003cbr/\u003e\u003cbr/\u003e#查看自己的权限\u003cbr/\u003eshow grants; #创建用户 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color: #ff00ff;\"\u003euser\u003c/span\u003e 用户名@\"主机地址\" identified \u003cspan style=\"color: #0000ff;\"\u003eby\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e \"密码\"; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color: #ff00ff;\"\u003euser\u003c/span\u003e \u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003eA\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e@\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e1127.0.0.1\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e identified \u003cspan style=\"color: #0000ff;\"\u003eby\u003c/span\u003e \u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e123\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color: #ff00ff;\"\u003euser\u003c/span\u003e \u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003eB\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e@\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e192.168.1.%\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e identified \u003cspan style=\"color: #0000ff;\"\u003eby\u003c/span\u003e \u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e123\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e;#指定ip \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color: #ff00ff;\"\u003euser\u003c/span\u003e \u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003eC\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e@\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e%\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e identified \u003cspan style=\"color: #0000ff;\"\u003eby\u003c/span\u003e \u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e123\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e;#任意用户 #授权：对文件夹，对文件，对文件某一字段的权限 查看帮助：help \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003egrant\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 常用权限有：\u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eselect\u003c/span\u003e,\u003cspan style=\"color: #0000ff;\"\u003eupdate\u003c/span\u003e,\u003cspan style=\"color: #0000ff;\"\u003ealter\u003c/span\u003e,\u003cspan style=\"color: #0000ff;\"\u003edelete\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e all可以代表除了grant之外的所有权限 语法: \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003egrant\u003c/span\u003e \u003cspan style=\"color: #ff0000;\"\u003e[\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e权限的名称 select insert.... | all \u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e]\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eon\u003c/span\u003e 数据库.表名 \u003cspan style=\"color: #0000ff;\"\u003eto\u003c/span\u003e 用户名\u003cspan style=\"color: #008000;\"\u003e@主机地址\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e; \u003cstrong\u003e特点: 如果授权时，用户不存在则直接自动创建用户\u003c/strong\u003e #针对所有库的授权:\u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e*\u003c/span\u003e.\u003cspan style=\"color: #808080;\"\u003e*\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003egrant\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eselect\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eon\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e*\u003c/span\u003e.\u003cspan style=\"color: #808080;\"\u003e*\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eto\u003c/span\u003e \u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003eA\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e@\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003elocalhost\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e identified \u003cspan style=\"color: #0000ff;\"\u003eby\u003c/span\u003e \u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e123\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e; #只在user表中可以查到A用户的select权限被设置为Y\u003cbr/\u003e没有 Grant_priv（授权）的权限 #针对某一数据库：db1.\u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e*\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003egrant\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eselect\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eon\u003c/span\u003e db1.\u003cspan style=\"color: #808080;\"\u003e*\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eto\u003c/span\u003e \u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan s","date":"2018-09-17","objectID":"/mysql-%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/:6:0","tags":["MySql"],"title":"mysql-数据（记录）相关操作（增删改查）及权限管理","uri":"/mysql-%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"},{"categories":["MySql"],"content":"一、约束介绍 约束是一种限制，它通过对表的行或列的数据做出限制，来确保数据的完整性、一致性。约束条件与数据类型宽度一样都是可选参数。 常用约束： \u003cspan style=\"color: #0000ff;\"\u003ePRIMARY\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eKEY\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (PK) 标识该字段为该表的主键，可以唯一的标识记录 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eFOREIGN\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eKEY\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (FK) 标识该字段为该表的外键 \u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003eNOT\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eNULL\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 标识该字段不能为空 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eUNIQUE\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eKEY\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (UK) 标识该字段的值是唯一的 AUTO_INCREMENT 标识该字段的值自动增长（整数类型，而且为主键） \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eDEFAULT\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 为该字段设置默认值 UNSIGNED 无符号 ZEROFILL 使用0填充\u003c/span\u003e ","date":"2018-09-13","objectID":"/mysql-%E7%BA%A6%E6%9D%9F%E4%BB%8B%E7%BB%8D/:1:0","tags":["MySql"],"title":"mysql-约束介绍","uri":"/mysql-%E7%BA%A6%E6%9D%9F%E4%BB%8B%E7%BB%8D/"},{"categories":["MySql"],"content":"（一）、not null与default not null 用于约束列不允许为空 null 列的默认约束为null 允许为空 default 默认值，创建列时可以指定其默认值，插入数据为设置时，自动添加为默认值。 mysql\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003etable\u003c/span\u003e test1(id \u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003enot\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003enull\u003c/span\u003e,name \u003cspan style=\"color: #0000ff;\"\u003evarchar\u003c/span\u003e(\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e11\u003c/span\u003e) \u003cspan style=\"color: #0000ff;\"\u003edefault\u003c/span\u003e \u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003eaaa\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e); Query OK, \u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e0\u003c/span\u003e rows affected (\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e0.26\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e sec) mysql\u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003einsert\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003einto\u003c/span\u003e test1 value(\u003cspan style=\"color: #0000ff;\"\u003enull\u003c/span\u003e,\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003eabc\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e); ERROR \u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e1048\u003c/span\u003e (\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e23000\u003c/span\u003e): \u003cspan style=\"color: #0000ff;\"\u003eColumn\u003c/span\u003e \u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003eid\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e cannot be \u003cspan style=\"color: #0000ff;\"\u003enull\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e mysql\u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003einsert\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003einto\u003c/span\u003e test1(id) value(\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e1\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e); Query OK, \u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e1\u003c/span\u003e row affected (\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e0.29\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e sec) mysql\u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eselect\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e*\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003efrom\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e test1; \u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e+\u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e--\u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e--+------+\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e id \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e name \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e+\u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e--\u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e--+------+\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e1\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e aaa \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e+\u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e--\u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e--+------+\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e1\u003c/span\u003e row \u003cspan style=\"color: #808080;\"\u003ein\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eset\u003c/span\u003e (\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e0.00\u003c/span\u003e sec) test ","date":"2018-09-13","objectID":"/mysql-%E7%BA%A6%E6%9D%9F%E4%BB%8B%E7%BB%8D/:1:1","tags":["MySql"],"title":"mysql-约束介绍","uri":"/mysql-%E7%BA%A6%E6%9D%9F%E4%BB%8B%E7%BB%8D/"},{"categories":["MySql"],"content":"（二）、unique 设置唯一约束，当你需要限定你的某个表字段每个值都唯一,没有重复值时使用。 允许为空 mysql\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003etable\u003c/span\u003e test2(id \u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003enot\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003enull\u003c/span\u003e ,name \u003cspan style=\"color: #0000ff;\"\u003evarchar\u003c/span\u003e(\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e11\u003c/span\u003e),phone \u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e(\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e11\u003c/span\u003e) \u003cspan style=\"color: #0000ff;\"\u003eunique\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e); Query OK, \u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e0\u003c/span\u003e rows affected (\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e0.50\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e sec) mysql\u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003edesc\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e test2; \u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e+\u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e--\u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e-----+-------------+------+-----+---------+-------+\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e Field \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e Type \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eNull\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eKey\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eDefault\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e Extra \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e+\u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e--\u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e-----+-------------+------+-----+---------+-------+\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e id \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e(\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e11\u003c/span\u003e) \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e NO \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eNULL\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e name \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003evarchar\u003c/span\u003e(\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e11\u003c/span\u003e) \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e YES \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eNULL\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e phone \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e(\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e11\u003c/span\u003e) \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e YES \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e UNI \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eNULL\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e+\u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e--\u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e-----+-------------+------+-----+---------+-------+\u003c/span\u003e \u003cspan style=\"color: #800000; font-weight: bold;\"\u003e3\u003c/span\u003e rows \u003cspan style=\"color: #808080;\"\u003ein\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eset\u003c/span\u003e (\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e0.00\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e sec) mysql\u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003einsert\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003einto\u003c/span\u003e test2 value(\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e1\u003c/span\u003e,\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003eabc\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e,\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e111111\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e); Query OK, \u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e1\u003c/span\u003e row affected (\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e0.29\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e sec) mysql\u003c/span\u003e\u003cspan style=","date":"2018-09-13","objectID":"/mysql-%E7%BA%A6%E6%9D%9F%E4%BB%8B%E7%BB%8D/:1:2","tags":["MySql"],"title":"mysql-约束介绍","uri":"/mysql-%E7%BA%A6%E6%9D%9F%E4%BB%8B%E7%BB%8D/"},{"categories":["MySql"],"content":"（四）、primary key 站在约束角度看primary key=not null unique。主键primary key是innodb存储引擎组织数据的依据，innodb称之为索引组织表，一张表中必须有且只有一个主键。 主键约束列不允许重复，也不允许出现空值。每个表最多只允许一个主键，建立主键约束可以在列级别创建，也可以在表级别创建。当创建主键的约束时，系统默认会在所在的列和列组合上建立对应的唯一索引。（通常id字段被设置为主键） \u003cspan style=\"color: #008080;\"\u003e--\u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e 基本模式\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003etable\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003etemp\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e( id \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eprimary\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ekey\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e, name \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003evarchar\u003c/span\u003e(\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e20\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e) ); \u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e--\u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e 组合模式\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003etable\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003etemp\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e( id \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e , name \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003evarchar\u003c/span\u003e(\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e20\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e), pwd \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003evarchar\u003c/span\u003e(\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e20\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e), \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eprimary\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ekey\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e(id, name) );\u003c/span\u003e ","date":"2018-09-13","objectID":"/mysql-%E7%BA%A6%E6%9D%9F%E4%BB%8B%E7%BB%8D/:1:3","tags":["MySql"],"title":"mysql-约束介绍","uri":"/mysql-%E7%BA%A6%E6%9D%9F%E4%BB%8B%E7%BB%8D/"},{"categories":["MySql"],"content":"（五）、auto_increment  约束字段为自动增长 \u003cspan style=\"color: #000000;\"\u003e#不指定id，则自动增长 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003etable\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e student( id \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eprimary\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ekey\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e auto_increment, name \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003evarchar\u003c/span\u003e(\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e20\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e), sex enum(\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003emale\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e,\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003efemale\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e) \u003cspan style=\"color: #0000ff;\"\u003edefault\u003c/span\u003e \u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003emale\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e ); mysql\u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003edesc\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e student; \u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e+\u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e--\u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e-----+-----------------------+------+-----+---------+----------------+\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e Field \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e Type \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eNull\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eKey\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eDefault\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e Extra \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e+\u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e--\u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e-----+-----------------------+------+-----+---------+----------------+\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e id \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e(\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e11\u003c/span\u003e) \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e NO \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e PRI \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eNULL\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e auto_increment \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e name \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003evarchar\u003c/span\u003e(\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e20\u003c/span\u003e) \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e YES \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eNULL\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e sex \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e enum(\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003emale\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e,\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003efemale\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e) \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e YES \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e male \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e|\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e+\u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e--\u003c/span\u003e\u003cspan style=\"color: #008080;\"\u003e-----+-----------------------+------+-----+---------+----------------+\u003c/span\u003e mysql\u003cspan style=\"color: #808080;\"\u003e\u003e\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003einsert\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003einto\u003c/span\u003e student(name) \u003cspan style=\"color: #0000ff;\"\u003evalues\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003e-\u003e\u003c/span\u003e (\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003eaaa\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e), \u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e-\u003e\u003c/span\u003e (\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003ebbb\u003c/s","date":"2018-09-13","objectID":"/mysql-%E7%BA%A6%E6%9D%9F%E4%BB%8B%E7%BB%8D/:1:4","tags":["MySql"],"title":"mysql-约束介绍","uri":"/mysql-%E7%BA%A6%E6%9D%9F%E4%BB%8B%E7%BB%8D/"},{"categories":["MySql"],"content":"（六）、foreign key 外键约束是保证一个或两个表之间的参照完整性，外键是构建于一个表的两个字段或是两个表的两个字段之间的参照关系。 现在有两个表，第一个学生表 有三个字段，学号、姓名、班级 第二个学校表 有班级， 老师 等字段， 每个学生都有班级，那班级这个字段就需要重复存储，很浪费资源，我们可以建一个班级表，让学生关联这个班级表。 \u003cspan style=\"color: #000000;\"\u003e#表类型必须是innodb存储引擎，且被关联的字段，即references指定的另外一个表的字段，必须保证唯一 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003etable\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e class( id \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eprimary\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ekey\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e, name \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003evarchar\u003c/span\u003e(\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e20\u003c/span\u003e) \u003cspan style=\"color: #808080;\"\u003enot\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003enull\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e ) #cls_id外键，关联父表（department主键id），同步更新，同步删除 \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003etable\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e student( id \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eprimary\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ekey\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e, name \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003evarchar\u003c/span\u003e(\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e20\u003c/span\u003e) \u003cspan style=\"color: #808080;\"\u003enot\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003enull\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e, dpt_id \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e, \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003econstraint\u003c/span\u003e fk_name \u003cspan style=\"color: #0000ff;\"\u003eforeign\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ekey\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e(cls) \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ereferences\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e class(id) \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eon\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003edelete\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ecascade\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eon\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eupdate\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ecascade\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e )engine\u003c/span\u003e\u003cspan style=\"color: #808080;\"\u003e=\u003c/span\u003einnodb;  foreign key注意： 1、被关联的字段必须是一个key，通常是id字段 2、创建表时：必须先建立被关联的表，才能建立关联表 3、插入记录时：必须先往被关联的表插入记录，才能往关联表中插入记录 4、删除时：应该先删除关联表中的记录，再删除被关联表对应的记录 ","date":"2018-09-13","objectID":"/mysql-%E7%BA%A6%E6%9D%9F%E4%BB%8B%E7%BB%8D/:1:5","tags":["MySql"],"title":"mysql-约束介绍","uri":"/mysql-%E7%BA%A6%E6%9D%9F%E4%BB%8B%E7%BB%8D/"},{"categories":["MySql"],"content":"二、表与表之间的关系 如何才能找出两张表之间的关系呢？ \u003cspan style=\"color: #000000;\"\u003e分析步骤： #\u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e1\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e、先站在左表的角度去找 是否左表的多条记录可以对应右表的一条记录，如果是，则证明左表的一个字段foreign \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ekey\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 右表一个字段（通常是id） #\u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e2\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e、再站在右表的角度去找 是否右表的多条记录可以对应左表的一条记录，如果是，则证明右表的一个字段foreign \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ekey\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e 左表一个字段（通常是id） #\u003c/span\u003e\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e3\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e、总结： #多对一： 如果只有步骤1成立，则是左表多对一右表 如果只有步骤2成立，则是右表多对一左表 #多对多 如果步骤1和2同时成立，则证明这两张表时一个双向的多对一，即多对多,需要定义一个这两张表的关系表来专门存放二者的关系 #一对一: 如果1和2都不成立，而是左表的一条记录唯一对应右表的一条记录，反之亦然。这种情况很简单，就是在左表foreign key右表的基础上，将左表的外键字段设置成unique即可\u003c/span\u003e 建立表与表之间的关系： 多对一： \u003cspan style=\"color: #808080;\"\u003e=====================\u003c/span\u003e多对一\u003cspan style=\"color: #808080;\"\u003e=====================\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003etable\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e press( id \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eprimary\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ekey\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e auto_increment, name \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003evarchar\u003c/span\u003e(\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e20\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e) ); \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003etable\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e book( id \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eprimary\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ekey\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e auto_increment, name \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003evarchar\u003c/span\u003e(\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e20\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e), press_id \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eint\u003c/span\u003e \u003cspan style=\"color: #808080;\"\u003enot\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003enull\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e, \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eforeign\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ekey\u003c/span\u003e(press_id) \u003cspan style=\"color: #0000ff;\"\u003ereferences\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e press(id) \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003eon\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003edelete\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ecascade\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eon\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003eupdate\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003ecascade\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e ); \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003einsert\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003einto\u003c/span\u003e press(name) \u003cspan style=\"color: #0000ff;\"\u003evalues\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e北京工业地雷出版社\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e), (\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e人民音乐不好听出版社\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e), (\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e知识产权没有用出版社\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e) ; \u003c/span\u003e\u003cspan style=\"color: #0000ff;\"\u003einsert\u003c/span\u003e \u003cspan style=\"color: #0000ff;\"\u003einto\u003c/span\u003e book(name,press_id) \u003cspan style=\"color: #0000ff;\"\u003evalues\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e (\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e九阳神功\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e,\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e1\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e), (\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e九阴真经\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e,\u003cspan style=\"color: #800000; font-weight: bold;\"\u003e2\u003c/span\u003e\u003cspan style=\"color: #000000;\"\u003e), (\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e九阴白骨爪\u003c/span\u003e\u003cspan style=\"color: #ff0000;\"\u003e'\u003c/span\u003e,\u003cspan styl","date":"2018-09-13","objectID":"/mysql-%E7%BA%A6%E6%9D%9F%E4%BB%8B%E7%BB%8D/:2:0","tags":["MySql"],"title":"mysql-约束介绍","uri":"/mysql-%E7%BA%A6%E6%9D%9F%E4%BB%8B%E7%BB%8D/"}]