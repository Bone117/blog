<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>django - 标签 - mine blog</title>
        <link>http://101.35.190.67/tags/django/</link>
        <description>django - 标签 - mine blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>soufj17857@gmail.com (bone)</managingEditor>
            <webMaster>soufj17857@gmail.com (bone)</webMaster><lastBuildDate>Sat, 07 Sep 2019 13:27:00 &#43;0000</lastBuildDate><atom:link href="http://101.35.190.67/tags/django/" rel="self" type="application/rss+xml" /><item>
    <title>Django-查询优化</title>
    <link>http://101.35.190.67/django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</link>
    <pubDate>Sat, 07 Sep 2019 13:27:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://101.35.190.67/django-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</guid>
    <description><![CDATA[表数据： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from django.db import models class Province(models.Model): name = models.CharField(max_length=10) def __str__(self): return self.name class City(models.Model): name = models.CharField(max_length=5) province = models.ForeignKey(Province) def __str__(self): return self.name class Person(models.Model): firstname = models.CharField(max_length=10) lastname = models.CharField(max_length=10) visitation = models.ManyToManyField(City, related_name = &#34;visitor&#34;) hometown = models.ForeignKey(City, related_name = &#34;birth&#34;)]]></description>
</item><item>
    <title>django-auth组件</title>
    <link>http://101.35.190.67/django-auth%E7%BB%84%E4%BB%B6/</link>
    <pubDate>Mon, 26 Nov 2018 07:46:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://101.35.190.67/django-auth%E7%BB%84%E4%BB%B6/</guid>
    <description><![CDATA[auth组件 一、auth模块简介 auth模块是django自带的用户认证模块，包含了身份验证和权限管理两部分。 身份验证用于核实某个用户是否合]]></description>
</item><item>
    <title>django会话</title>
    <link>http://101.35.190.67/django%E4%BC%9A%E8%AF%9D/</link>
    <pubDate>Thu, 22 Nov 2018 08:48:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://101.35.190.67/django%E4%BC%9A%E8%AF%9D/</guid>
    <description><![CDATA[django会话 可以把会话理解为客户端与服务器之间的一次会晤，在一次会话过程中有多次请求和响应，但是由于HTTP协议的特性&ndash;&g]]></description>
</item><item>
    <title>多表操作</title>
    <link>http://101.35.190.67/%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/</link>
    <pubDate>Wed, 14 Nov 2018 12:25:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://101.35.190.67/%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/</guid>
    <description><![CDATA[多表操作 数据准备 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Publish(models.Model): id = models.AutoField(primary_key=True) name = models.CharField(max_length=32) addr=models.CharField(max_length=64) email=models.EmailField def __str__(self): return self.name class Author(models.Model): id = models.AutoField(primary_key=True) name=models.CharField(max_length=32) sex=models.IntegerField() authordetail=models.OneToOneField(to=&#39;AuthorDetail&#39;,to_field=&#39;id&#39;) def __str__(self): return self.name]]></description>
</item><item>
    <title>Django-ORM-单表操作</title>
    <link>http://101.35.190.67/django-orm-%E5%8D%95%E8%A1%A8%E6%93%8D%E4%BD%9C/</link>
    <pubDate>Mon, 12 Nov 2018 10:55:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://101.35.190.67/django-orm-%E5%8D%95%E8%A1%A8%E6%93%8D%E4%BD%9C/</guid>
    <description><![CDATA[ORM字段参数及单表操作 一、字段参数 1.字段 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48]]></description>
</item><item>
    <title>django学习笔记-模板层</title>
    <link>http://101.35.190.67/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/</link>
    <pubDate>Mon, 12 Nov 2018 07:28:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://101.35.190.67/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E5%B1%82/</guid>
    <description><![CDATA[模板层 1 将Python嵌入到HTML中。 模板简介 将HTML硬解码到视图并不是那么完美原因如下： 对页面设计时也需要对python代码进行相应的]]></description>
</item><item>
    <title>Django-视图层(view)</title>
    <link>http://101.35.190.67/django-%E8%A7%86%E5%9B%BE%E5%B1%82view/</link>
    <pubDate>Thu, 08 Nov 2018 11:07:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://101.35.190.67/django-%E8%A7%86%E5%9B%BE%E5%B1%82view/</guid>
    <description><![CDATA[视图层(view) ​ 视图函数，简称视图，本质上是一个简单的Python函数，它接受Web请求并且返回Web响应。响应的内容可以是HTML网页]]></description>
</item><item>
    <title>Django-路由控制</title>
    <link>http://101.35.190.67/django-%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6/</link>
    <pubDate>Wed, 07 Nov 2018 09:28:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://101.35.190.67/django-%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6/</guid>
    <description><![CDATA[Django-路由控制 一、URL路由基础 1 2 URL是web服务的路口，用户通过浏览器发送过来的任何请求都会被发送到一个指定的URL地址里，然]]></description>
</item><item>
    <title>Django学习笔记(http协议与django安装)</title>
    <link>http://101.35.190.67/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0http%E5%8D%8F%E8%AE%AE%E4%B8%8Edjango%E5%AE%89%E8%A3%85/</link>
    <pubDate>Fri, 02 Nov 2018 10:56:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://101.35.190.67/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0http%E5%8D%8F%E8%AE%AE%E4%B8%8Edjango%E5%AE%89%E8%A3%85/</guid>
    <description><![CDATA[Django入门 HTTP协议 HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于万维网（WWW:World Wide Web ）服务]]></description>
</item></channel>
</rss>
